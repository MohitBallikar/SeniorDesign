
GameinatorB4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040f4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080042cc  080042cc  000052cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004384  08004384  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004384  08004384  00005384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800438c  0800438c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800438c  0800438c  0000538c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004390  08004390  00005390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004394  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  2000000c  080043a0  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  080043a0  00006360  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ece1  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002114  00000000  00000000  00014d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  00016e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000094a  00000000  00000000  00017a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bc83  00000000  00000000  0001838a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f82f  00000000  00000000  0003400d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8a9c  00000000  00000000  0004383c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fc2d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030f8  00000000  00000000  000fc31c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000ff414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080042b4 	.word	0x080042b4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080042b4 	.word	0x080042b4

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <setLED>:

extern SPI_HandleTypeDef hspi1;


void setLED (int led, int RED, int GREEN, int BLUE)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
 8000514:	603b      	str	r3, [r7, #0]
	LED_Data[led][0] = led;
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	b2d9      	uxtb	r1, r3
 800051a:	4a11      	ldr	r2, [pc, #68]	@ (8000560 <setLED+0x58>)
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[led][1] = GREEN;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	b2d9      	uxtb	r1, r3
 8000526:	4a0e      	ldr	r2, [pc, #56]	@ (8000560 <setLED+0x58>)
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	4413      	add	r3, r2
 800052e:	460a      	mov	r2, r1
 8000530:	705a      	strb	r2, [r3, #1]
	LED_Data[led][2] = RED;
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	b2d9      	uxtb	r1, r3
 8000536:	4a0a      	ldr	r2, [pc, #40]	@ (8000560 <setLED+0x58>)
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	4413      	add	r3, r2
 800053e:	460a      	mov	r2, r1
 8000540:	709a      	strb	r2, [r3, #2]
	LED_Data[led][3] = BLUE;
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	b2d9      	uxtb	r1, r3
 8000546:	4a06      	ldr	r2, [pc, #24]	@ (8000560 <setLED+0x58>)
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	4413      	add	r3, r2
 800054e:	460a      	mov	r2, r1
 8000550:	70da      	strb	r2, [r3, #3]
}
 8000552:	bf00      	nop
 8000554:	3714      	adds	r7, #20
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20000028 	.word	0x20000028

08000564 <ws2812_spi>:


void ws2812_spi (int GREEN, int RED, int BLUE)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08e      	sub	sp, #56	@ 0x38
 8000568:	af00      	add	r7, sp, #0
 800056a:	60f8      	str	r0, [r7, #12]
 800056c:	60b9      	str	r1, [r7, #8]
 800056e:	607a      	str	r2, [r7, #4]
	uint32_t color = GREEN<<16 | RED<<8 | BLUE;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	041a      	lsls	r2, r3, #16
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	021b      	lsls	r3, r3, #8
 8000578:	431a      	orrs	r2, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4313      	orrs	r3, r2
 800057e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint8_t sendData[24];
	int indx = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	637b      	str	r3, [r7, #52]	@ 0x34

	for (int i = 23; i>=0; i--)
 8000584:	2317      	movs	r3, #23
 8000586:	633b      	str	r3, [r7, #48]	@ 0x30
 8000588:	e01b      	b.n	80005c2 <ws2812_spi+0x5e>
	{
		if (((color>>i)&0x01) == 1) sendData[indx++] = 0b110;
 800058a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800058c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800058e:	fa22 f303 	lsr.w	r3, r2, r3
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	2b00      	cmp	r3, #0
 8000598:	d008      	beq.n	80005ac <ws2812_spi+0x48>
 800059a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800059c:	1c5a      	adds	r2, r3, #1
 800059e:	637a      	str	r2, [r7, #52]	@ 0x34
 80005a0:	3338      	adds	r3, #56	@ 0x38
 80005a2:	443b      	add	r3, r7
 80005a4:	2206      	movs	r2, #6
 80005a6:	f803 2c24 	strb.w	r2, [r3, #-36]
 80005aa:	e007      	b.n	80005bc <ws2812_spi+0x58>
		else sendData[indx++] = 0b100;
 80005ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005ae:	1c5a      	adds	r2, r3, #1
 80005b0:	637a      	str	r2, [r7, #52]	@ 0x34
 80005b2:	3338      	adds	r3, #56	@ 0x38
 80005b4:	443b      	add	r3, r7
 80005b6:	2204      	movs	r2, #4
 80005b8:	f803 2c24 	strb.w	r2, [r3, #-36]
	for (int i = 23; i>=0; i--)
 80005bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005be:	3b01      	subs	r3, #1
 80005c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80005c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dae0      	bge.n	800058a <ws2812_spi+0x26>
	}

	HAL_SPI_Transmit(&hspi1, sendData, 24, 1000);
 80005c8:	f107 0114 	add.w	r1, r7, #20
 80005cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005d0:	2218      	movs	r2, #24
 80005d2:	4803      	ldr	r0, [pc, #12]	@ (80005e0 <ws2812_spi+0x7c>)
 80005d4:	f002 fb8f 	bl	8002cf6 <HAL_SPI_Transmit>
}
 80005d8:	bf00      	nop
 80005da:	3738      	adds	r7, #56	@ 0x38
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000064 	.word	0x20000064

080005e4 <WS2812_Send>:

void WS2812_Send (void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
	for (int i=0; i<NUM_LED; i++)
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	e016      	b.n	800061e <WS2812_Send+0x3a>
	{
		ws2812_spi(LED_Data[i][1],LED_Data[i][2],LED_Data[i][3]);
 80005f0:	4a10      	ldr	r2, [pc, #64]	@ (8000634 <WS2812_Send+0x50>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	4413      	add	r3, r2
 80005f8:	785b      	ldrb	r3, [r3, #1]
 80005fa:	4618      	mov	r0, r3
 80005fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000634 <WS2812_Send+0x50>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	4413      	add	r3, r2
 8000604:	789b      	ldrb	r3, [r3, #2]
 8000606:	4619      	mov	r1, r3
 8000608:	4a0a      	ldr	r2, [pc, #40]	@ (8000634 <WS2812_Send+0x50>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	4413      	add	r3, r2
 8000610:	78db      	ldrb	r3, [r3, #3]
 8000612:	461a      	mov	r2, r3
 8000614:	f7ff ffa6 	bl	8000564 <ws2812_spi>
	for (int i=0; i<NUM_LED; i++)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3301      	adds	r3, #1
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b0e      	cmp	r3, #14
 8000622:	dde5      	ble.n	80005f0 <WS2812_Send+0xc>
	}
	HAL_Delay (1);
 8000624:	2001      	movs	r0, #1
 8000626:	f000 ffcd 	bl	80015c4 <HAL_Delay>
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000028 	.word	0x20000028

08000638 <FreeUARTBuffer>:
  * @brief  The application entry point.
  * @retval int
  */

void FreeUARTBuffer(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
    // Step 1: Abort UART communication
    HAL_UART_Abort(&huart2);
 800063c:	480c      	ldr	r0, [pc, #48]	@ (8000670 <FreeUARTBuffer+0x38>)
 800063e:	f002 ff11 	bl	8003464 <HAL_UART_Abort>

    // Step 2: Clear any application-level buffers
    // Example: Assuming you have an Rx buffer
    memset(RxBuffer, 0, sizeof(RxBuffer));
 8000642:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000646:	2100      	movs	r1, #0
 8000648:	480a      	ldr	r0, [pc, #40]	@ (8000674 <FreeUARTBuffer+0x3c>)
 800064a:	f003 fe07 	bl	800425c <memset>
    memset(TxBuffer, 0, sizeof(TxBuffer));
 800064e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000652:	2100      	movs	r1, #0
 8000654:	4808      	ldr	r0, [pc, #32]	@ (8000678 <FreeUARTBuffer+0x40>)
 8000656:	f003 fe01 	bl	800425c <memset>

    // Step 3: Reinitialize UART (optional)
    if (HAL_UART_Init(&huart2) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	@ (8000670 <FreeUARTBuffer+0x38>)
 800065c:	f002 fe24 	bl	80032a8 <HAL_UART_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <FreeUARTBuffer+0x32>
    {
        // Initialization Error
        Error_Handler();
 8000666:	f000 fe0d 	bl	8001284 <Error_Handler>
    }
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200000c8 	.word	0x200000c8
 8000674:	2000015c 	.word	0x2000015c
 8000678:	2000025c 	.word	0x2000025c

0800067c <main>:

int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b0b2      	sub	sp, #200	@ 0xc8
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000682:	f000 ff2e 	bl	80014e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000686:	f000 fc9d 	bl	8000fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068a:	f000 fd85 	bl	8001198 <MX_GPIO_Init>
  MX_SPI1_Init();
 800068e:	f000 fce5 	bl	800105c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000692:	f000 fd21 	bl	80010d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  FreeUARTBuffer();
 8000696:	f7ff ffcf 	bl	8000638 <FreeUARTBuffer>

  int counter_1 = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  int counter_2 = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  int counter_3 = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  int counter_4 = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  int counter_5 = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  int counter_6 = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  int counter_7 = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  int counter_8 = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  int counter_9 = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  int counter_10 = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int counter_11 = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  int counter_12 = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  int counter_13 = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  int counter_14 = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  int counter_15 = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int turn_counter = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  setLED(0, 80, 80, 80);
 80006fa:	2350      	movs	r3, #80	@ 0x50
 80006fc:	2250      	movs	r2, #80	@ 0x50
 80006fe:	2150      	movs	r1, #80	@ 0x50
 8000700:	2000      	movs	r0, #0
 8000702:	f7ff ff01 	bl	8000508 <setLED>
  setLED(1, 80, 80, 80);
 8000706:	2350      	movs	r3, #80	@ 0x50
 8000708:	2250      	movs	r2, #80	@ 0x50
 800070a:	2150      	movs	r1, #80	@ 0x50
 800070c:	2001      	movs	r0, #1
 800070e:	f7ff fefb 	bl	8000508 <setLED>
  setLED(2, 80, 80, 80);
 8000712:	2350      	movs	r3, #80	@ 0x50
 8000714:	2250      	movs	r2, #80	@ 0x50
 8000716:	2150      	movs	r1, #80	@ 0x50
 8000718:	2002      	movs	r0, #2
 800071a:	f7ff fef5 	bl	8000508 <setLED>
  setLED(3, 80, 80, 80);
 800071e:	2350      	movs	r3, #80	@ 0x50
 8000720:	2250      	movs	r2, #80	@ 0x50
 8000722:	2150      	movs	r1, #80	@ 0x50
 8000724:	2003      	movs	r0, #3
 8000726:	f7ff feef 	bl	8000508 <setLED>
  setLED(4, 80, 80, 80);
 800072a:	2350      	movs	r3, #80	@ 0x50
 800072c:	2250      	movs	r2, #80	@ 0x50
 800072e:	2150      	movs	r1, #80	@ 0x50
 8000730:	2004      	movs	r0, #4
 8000732:	f7ff fee9 	bl	8000508 <setLED>
  setLED(5, 80, 80, 80);
 8000736:	2350      	movs	r3, #80	@ 0x50
 8000738:	2250      	movs	r2, #80	@ 0x50
 800073a:	2150      	movs	r1, #80	@ 0x50
 800073c:	2005      	movs	r0, #5
 800073e:	f7ff fee3 	bl	8000508 <setLED>
  setLED(6, 80, 80, 80);
 8000742:	2350      	movs	r3, #80	@ 0x50
 8000744:	2250      	movs	r2, #80	@ 0x50
 8000746:	2150      	movs	r1, #80	@ 0x50
 8000748:	2006      	movs	r0, #6
 800074a:	f7ff fedd 	bl	8000508 <setLED>
  setLED(7, 80, 80, 80);
 800074e:	2350      	movs	r3, #80	@ 0x50
 8000750:	2250      	movs	r2, #80	@ 0x50
 8000752:	2150      	movs	r1, #80	@ 0x50
 8000754:	2007      	movs	r0, #7
 8000756:	f7ff fed7 	bl	8000508 <setLED>
  setLED(8, 80, 80, 80);
 800075a:	2350      	movs	r3, #80	@ 0x50
 800075c:	2250      	movs	r2, #80	@ 0x50
 800075e:	2150      	movs	r1, #80	@ 0x50
 8000760:	2008      	movs	r0, #8
 8000762:	f7ff fed1 	bl	8000508 <setLED>
  setLED(9, 80, 80, 80);
 8000766:	2350      	movs	r3, #80	@ 0x50
 8000768:	2250      	movs	r2, #80	@ 0x50
 800076a:	2150      	movs	r1, #80	@ 0x50
 800076c:	2009      	movs	r0, #9
 800076e:	f7ff fecb 	bl	8000508 <setLED>
  setLED(10, 80, 80, 80);
 8000772:	2350      	movs	r3, #80	@ 0x50
 8000774:	2250      	movs	r2, #80	@ 0x50
 8000776:	2150      	movs	r1, #80	@ 0x50
 8000778:	200a      	movs	r0, #10
 800077a:	f7ff fec5 	bl	8000508 <setLED>
  setLED(11, 80, 80, 80);
 800077e:	2350      	movs	r3, #80	@ 0x50
 8000780:	2250      	movs	r2, #80	@ 0x50
 8000782:	2150      	movs	r1, #80	@ 0x50
 8000784:	200b      	movs	r0, #11
 8000786:	f7ff febf 	bl	8000508 <setLED>
  setLED(12, 80, 80, 80);
 800078a:	2350      	movs	r3, #80	@ 0x50
 800078c:	2250      	movs	r2, #80	@ 0x50
 800078e:	2150      	movs	r1, #80	@ 0x50
 8000790:	200c      	movs	r0, #12
 8000792:	f7ff feb9 	bl	8000508 <setLED>
  setLED(13, 80, 80, 80);
 8000796:	2350      	movs	r3, #80	@ 0x50
 8000798:	2250      	movs	r2, #80	@ 0x50
 800079a:	2150      	movs	r1, #80	@ 0x50
 800079c:	200d      	movs	r0, #13
 800079e:	f7ff feb3 	bl	8000508 <setLED>
  setLED(14, 80, 80, 80);
 80007a2:	2350      	movs	r3, #80	@ 0x50
 80007a4:	2250      	movs	r2, #80	@ 0x50
 80007a6:	2150      	movs	r1, #80	@ 0x50
 80007a8:	200e      	movs	r0, #14
 80007aa:	f7ff fead 	bl	8000508 <setLED>
  WS2812_Send();
 80007ae:	f7ff ff19 	bl	80005e4 <WS2812_Send>
  /* USER CODE BEGIN WHILE */
  while (1)
   {
    /* USER CODE END WHILE */

      if(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_RXNE))
 80007b2:	4bc6      	ldr	r3, [pc, #792]	@ (8000acc <main+0x450>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	69db      	ldr	r3, [r3, #28]
 80007b8:	f003 0320 	and.w	r3, r3, #32
 80007bc:	2b20      	cmp	r3, #32
 80007be:	f040 80af 	bne.w	8000920 <main+0x2a4>
      {
          if(turn_counter==0)
 80007c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d135      	bne.n	8000836 <main+0x1ba>
          {
              for(int i=0; i<=14; i++)
 80007ca:	2300      	movs	r3, #0
 80007cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80007d0:	e010      	b.n	80007f4 <main+0x178>
              {
                  setLED(i, 20, 0, 0);
 80007d2:	2300      	movs	r3, #0
 80007d4:	2200      	movs	r2, #0
 80007d6:	2114      	movs	r1, #20
 80007d8:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80007dc:	f7ff fe94 	bl	8000508 <setLED>
                  WS2812_Send();
 80007e0:	f7ff ff00 	bl	80005e4 <WS2812_Send>
                  HAL_Delay(50);
 80007e4:	2032      	movs	r0, #50	@ 0x32
 80007e6:	f000 feed 	bl	80015c4 <HAL_Delay>
              for(int i=0; i<=14; i++)
 80007ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80007ee:	3301      	adds	r3, #1
 80007f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80007f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80007f8:	2b0e      	cmp	r3, #14
 80007fa:	ddea      	ble.n	80007d2 <main+0x156>
              }
              setLED(12, 80, 20, 20);
 80007fc:	2314      	movs	r3, #20
 80007fe:	2214      	movs	r2, #20
 8000800:	2150      	movs	r1, #80	@ 0x50
 8000802:	200c      	movs	r0, #12
 8000804:	f7ff fe80 	bl	8000508 <setLED>
              setLED(13, 80, 20, 20);
 8000808:	2314      	movs	r3, #20
 800080a:	2214      	movs	r2, #20
 800080c:	2150      	movs	r1, #80	@ 0x50
 800080e:	200d      	movs	r0, #13
 8000810:	f7ff fe7a 	bl	8000508 <setLED>
              setLED(14, 80, 20, 20);
 8000814:	2314      	movs	r3, #20
 8000816:	2214      	movs	r2, #20
 8000818:	2150      	movs	r1, #80	@ 0x50
 800081a:	200e      	movs	r0, #14
 800081c:	f7ff fe74 	bl	8000508 <setLED>
              WS2812_Send();
 8000820:	f7ff fee0 	bl	80005e4 <WS2812_Send>
              HAL_Delay(50);
 8000824:	2032      	movs	r0, #50	@ 0x32
 8000826:	f000 fecd 	bl	80015c4 <HAL_Delay>
              turn_counter = 1;
 800082a:	2301      	movs	r3, #1
 800082c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
              FreeUARTBuffer();
 8000830:	f7ff ff02 	bl	8000638 <FreeUARTBuffer>
 8000834:	e074      	b.n	8000920 <main+0x2a4>
          }
          else if(turn_counter==1)
 8000836:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800083a:	2b01      	cmp	r3, #1
 800083c:	d11e      	bne.n	800087c <main+0x200>
          {
              for(int i=0; i<=14; i++)
 800083e:	2300      	movs	r3, #0
 8000840:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000844:	e010      	b.n	8000868 <main+0x1ec>
              {
                  setLED(i, 0, 20, 0);
 8000846:	2300      	movs	r3, #0
 8000848:	2214      	movs	r2, #20
 800084a:	2100      	movs	r1, #0
 800084c:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8000850:	f7ff fe5a 	bl	8000508 <setLED>
                  WS2812_Send();
 8000854:	f7ff fec6 	bl	80005e4 <WS2812_Send>
                  HAL_Delay(50);
 8000858:	2032      	movs	r0, #50	@ 0x32
 800085a:	f000 feb3 	bl	80015c4 <HAL_Delay>
              for(int i=0; i<=14; i++)
 800085e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000862:	3301      	adds	r3, #1
 8000864:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000868:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800086c:	2b0e      	cmp	r3, #14
 800086e:	ddea      	ble.n	8000846 <main+0x1ca>
              }
              turn_counter = 2;
 8000870:	2302      	movs	r3, #2
 8000872:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
              FreeUARTBuffer();
 8000876:	f7ff fedf 	bl	8000638 <FreeUARTBuffer>
 800087a:	e051      	b.n	8000920 <main+0x2a4>
          }
          else if(turn_counter==2)
 800087c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000880:	2b02      	cmp	r3, #2
 8000882:	d119      	bne.n	80008b8 <main+0x23c>
          {
              for(int i=0; i<=14; i++)
 8000884:	2300      	movs	r3, #0
 8000886:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000888:	e00d      	b.n	80008a6 <main+0x22a>
              {
                  setLED(i, 0, 0, 20);
 800088a:	2314      	movs	r3, #20
 800088c:	2200      	movs	r2, #0
 800088e:	2100      	movs	r1, #0
 8000890:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8000892:	f7ff fe39 	bl	8000508 <setLED>
                  WS2812_Send();
 8000896:	f7ff fea5 	bl	80005e4 <WS2812_Send>
                  HAL_Delay(50);
 800089a:	2032      	movs	r0, #50	@ 0x32
 800089c:	f000 fe92 	bl	80015c4 <HAL_Delay>
              for(int i=0; i<=14; i++)
 80008a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80008a2:	3301      	adds	r3, #1
 80008a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80008a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80008a8:	2b0e      	cmp	r3, #14
 80008aa:	ddee      	ble.n	800088a <main+0x20e>
              }
              turn_counter = 3;
 80008ac:	2303      	movs	r3, #3
 80008ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
              FreeUARTBuffer();
 80008b2:	f7ff fec1 	bl	8000638 <FreeUARTBuffer>
 80008b6:	e033      	b.n	8000920 <main+0x2a4>
          }
          else if(turn_counter==3)
 80008b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80008bc:	2b03      	cmp	r3, #3
 80008be:	d12f      	bne.n	8000920 <main+0x2a4>
          {
              for(int i=0; i<=14; i++)
 80008c0:	2300      	movs	r3, #0
 80008c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80008c4:	e00d      	b.n	80008e2 <main+0x266>
              {
                  setLED(i, 20, 20, 0);
 80008c6:	2300      	movs	r3, #0
 80008c8:	2214      	movs	r2, #20
 80008ca:	2114      	movs	r1, #20
 80008cc:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80008ce:	f7ff fe1b 	bl	8000508 <setLED>
                  WS2812_Send();
 80008d2:	f7ff fe87 	bl	80005e4 <WS2812_Send>
                  HAL_Delay(50);
 80008d6:	2032      	movs	r0, #50	@ 0x32
 80008d8:	f000 fe74 	bl	80015c4 <HAL_Delay>
              for(int i=0; i<=14; i++)
 80008dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80008de:	3301      	adds	r3, #1
 80008e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80008e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80008e4:	2b0e      	cmp	r3, #14
 80008e6:	ddee      	ble.n	80008c6 <main+0x24a>
              }
              setLED(0, 80, 80, 20);
 80008e8:	2314      	movs	r3, #20
 80008ea:	2250      	movs	r2, #80	@ 0x50
 80008ec:	2150      	movs	r1, #80	@ 0x50
 80008ee:	2000      	movs	r0, #0
 80008f0:	f7ff fe0a 	bl	8000508 <setLED>
              setLED(1, 80, 80, 20);
 80008f4:	2314      	movs	r3, #20
 80008f6:	2250      	movs	r2, #80	@ 0x50
 80008f8:	2150      	movs	r1, #80	@ 0x50
 80008fa:	2001      	movs	r0, #1
 80008fc:	f7ff fe04 	bl	8000508 <setLED>
              setLED(2, 80, 80, 20);
 8000900:	2314      	movs	r3, #20
 8000902:	2250      	movs	r2, #80	@ 0x50
 8000904:	2150      	movs	r1, #80	@ 0x50
 8000906:	2002      	movs	r0, #2
 8000908:	f7ff fdfe 	bl	8000508 <setLED>
              WS2812_Send();
 800090c:	f7ff fe6a 	bl	80005e4 <WS2812_Send>
              HAL_Delay(50);
 8000910:	2032      	movs	r0, #50	@ 0x32
 8000912:	f000 fe57 	bl	80015c4 <HAL_Delay>
              turn_counter = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
              FreeUARTBuffer();
 800091c:	f7ff fe8c 	bl	8000638 <FreeUARTBuffer>
          }
      }
  	  if(HAL_GPIO_ReadPin(SENSOR1_GPIO_Port, SENSOR1_Pin)) // Doesn't work
 8000920:	2102      	movs	r1, #2
 8000922:	486b      	ldr	r0, [pc, #428]	@ (8000ad0 <main+0x454>)
 8000924:	f001 f93a 	bl	8001b9c <HAL_GPIO_ReadPin>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d02d      	beq.n	800098a <main+0x30e>
  	  {
  		  if (counter_1 == 0)
 800092e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000932:	2b00      	cmp	r3, #0
 8000934:	d11c      	bne.n	8000970 <main+0x2f4>
  		  {
  			  uint8_t data[] = "B4 S1 ";
 8000936:	4a67      	ldr	r2, [pc, #412]	@ (8000ad4 <main+0x458>)
 8000938:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800093c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000940:	6018      	str	r0, [r3, #0]
 8000942:	3304      	adds	r3, #4
 8000944:	8019      	strh	r1, [r3, #0]
 8000946:	3302      	adds	r3, #2
 8000948:	0c0a      	lsrs	r2, r1, #16
 800094a:	701a      	strb	r2, [r3, #0]
  			  HAL_UART_Transmit(&huart2,data,6,10);
 800094c:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8000950:	230a      	movs	r3, #10
 8000952:	2206      	movs	r2, #6
 8000954:	485d      	ldr	r0, [pc, #372]	@ (8000acc <main+0x450>)
 8000956:	f002 fcf7 	bl	8003348 <HAL_UART_Transmit>
  			  FreeUARTBuffer();
 800095a:	f7ff fe6d 	bl	8000638 <FreeUARTBuffer>
  			  counter_1 = 1500;
 800095e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000962:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  			  HAL_Delay(1500);
 8000966:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800096a:	f000 fe2b 	bl	80015c4 <HAL_Delay>
 800096e:	e00c      	b.n	800098a <main+0x30e>
  		  }
  		  else if(counter_1 < 0)
 8000970:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000974:	2b00      	cmp	r3, #0
 8000976:	da03      	bge.n	8000980 <main+0x304>
  		  {
  			  counter_1 =0;
 8000978:	2300      	movs	r3, #0
 800097a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800097e:	e004      	b.n	800098a <main+0x30e>
  		  }
  		  else
  		  {
  			  counter_1--;
 8000980:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000984:	3b01      	subs	r3, #1
 8000986:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  		  }
  	  }
  	  if(HAL_GPIO_ReadPin(SENSOR2_GPIO_Port, SENSOR2_Pin)) // Doesn't work
 800098a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800098e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000992:	f001 f903 	bl	8001b9c <HAL_GPIO_ReadPin>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d02d      	beq.n	80009f8 <main+0x37c>
  	  {
  		  if (counter_2 == 0)
 800099c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d11c      	bne.n	80009de <main+0x362>
  		  {
  			  uint8_t data[] = "B4 S2 ";
 80009a4:	4a4c      	ldr	r2, [pc, #304]	@ (8000ad8 <main+0x45c>)
 80009a6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80009aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009ae:	6018      	str	r0, [r3, #0]
 80009b0:	3304      	adds	r3, #4
 80009b2:	8019      	strh	r1, [r3, #0]
 80009b4:	3302      	adds	r3, #2
 80009b6:	0c0a      	lsrs	r2, r1, #16
 80009b8:	701a      	strb	r2, [r3, #0]
  			  HAL_UART_Transmit(&huart2,data,6,10);
 80009ba:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80009be:	230a      	movs	r3, #10
 80009c0:	2206      	movs	r2, #6
 80009c2:	4842      	ldr	r0, [pc, #264]	@ (8000acc <main+0x450>)
 80009c4:	f002 fcc0 	bl	8003348 <HAL_UART_Transmit>
  			  FreeUARTBuffer();
 80009c8:	f7ff fe36 	bl	8000638 <FreeUARTBuffer>
  			  counter_2 = 1500;
 80009cc:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80009d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  			  HAL_Delay(1500);
 80009d4:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80009d8:	f000 fdf4 	bl	80015c4 <HAL_Delay>
 80009dc:	e00c      	b.n	80009f8 <main+0x37c>
  		  }
  		  else if(counter_2 < 0)
 80009de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	da03      	bge.n	80009ee <main+0x372>
  		  {
  			  counter_2 =0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80009ec:	e004      	b.n	80009f8 <main+0x37c>
  		  }
  		  else
  		  {
  			  counter_2--;
 80009ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80009f2:	3b01      	subs	r3, #1
 80009f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  		  }
  	  }
  	  if(HAL_GPIO_ReadPin(SENSOR3_GPIO_Port, SENSOR3_Pin))
 80009f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a00:	f001 f8cc 	bl	8001b9c <HAL_GPIO_ReadPin>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d02d      	beq.n	8000a66 <main+0x3ea>
  	  {
  		  if (counter_3 == 0)
 8000a0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d11c      	bne.n	8000a4c <main+0x3d0>
  		  {
  			  uint8_t data[] = "B4 S3 ";
 8000a12:	4a32      	ldr	r2, [pc, #200]	@ (8000adc <main+0x460>)
 8000a14:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000a18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a1c:	6018      	str	r0, [r3, #0]
 8000a1e:	3304      	adds	r3, #4
 8000a20:	8019      	strh	r1, [r3, #0]
 8000a22:	3302      	adds	r3, #2
 8000a24:	0c0a      	lsrs	r2, r1, #16
 8000a26:	701a      	strb	r2, [r3, #0]
  			  HAL_UART_Transmit(&huart2,data,6,10);
 8000a28:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8000a2c:	230a      	movs	r3, #10
 8000a2e:	2206      	movs	r2, #6
 8000a30:	4826      	ldr	r0, [pc, #152]	@ (8000acc <main+0x450>)
 8000a32:	f002 fc89 	bl	8003348 <HAL_UART_Transmit>
  			  FreeUARTBuffer();
 8000a36:	f7ff fdff 	bl	8000638 <FreeUARTBuffer>
  			  counter_3 = 1500;
 8000a3a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000a3e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  			  HAL_Delay(1500);
 8000a42:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000a46:	f000 fdbd 	bl	80015c4 <HAL_Delay>
 8000a4a:	e00c      	b.n	8000a66 <main+0x3ea>
  		  }
  		  else if(counter_3 < 0)
 8000a4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	da03      	bge.n	8000a5c <main+0x3e0>
  		  {
  			  counter_3 =0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000a5a:	e004      	b.n	8000a66 <main+0x3ea>
  		  }
  		  else
  		  {
  			  counter_3--;
 8000a5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000a60:	3b01      	subs	r3, #1
 8000a62:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  		  }
  	  }
  	  if(HAL_GPIO_ReadPin(SENSOR4_GPIO_Port, SENSOR4_Pin))
 8000a66:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6e:	f001 f895 	bl	8001b9c <HAL_GPIO_ReadPin>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d03a      	beq.n	8000aee <main+0x472>
  	  {
  		  if (counter_4 == 0)
 8000a78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d11c      	bne.n	8000aba <main+0x43e>
  		  {
  			  uint8_t data[] = "B4 S4 ";
 8000a80:	4a17      	ldr	r2, [pc, #92]	@ (8000ae0 <main+0x464>)
 8000a82:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000a86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a8a:	6018      	str	r0, [r3, #0]
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	8019      	strh	r1, [r3, #0]
 8000a90:	3302      	adds	r3, #2
 8000a92:	0c0a      	lsrs	r2, r1, #16
 8000a94:	701a      	strb	r2, [r3, #0]
  			  HAL_UART_Transmit(&huart2,data,6,10);
 8000a96:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000a9a:	230a      	movs	r3, #10
 8000a9c:	2206      	movs	r2, #6
 8000a9e:	480b      	ldr	r0, [pc, #44]	@ (8000acc <main+0x450>)
 8000aa0:	f002 fc52 	bl	8003348 <HAL_UART_Transmit>
  			  FreeUARTBuffer();
 8000aa4:	f7ff fdc8 	bl	8000638 <FreeUARTBuffer>
  			  counter_4 = 1500;
 8000aa8:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000aac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  			  HAL_Delay(1500);
 8000ab0:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000ab4:	f000 fd86 	bl	80015c4 <HAL_Delay>
 8000ab8:	e019      	b.n	8000aee <main+0x472>
  		  }
  		  else if(counter_4 < 0)
 8000aba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	da10      	bge.n	8000ae4 <main+0x468>
  		  {
  			  counter_4 =0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000ac8:	e011      	b.n	8000aee <main+0x472>
 8000aca:	bf00      	nop
 8000acc:	200000c8 	.word	0x200000c8
 8000ad0:	48000800 	.word	0x48000800
 8000ad4:	080042cc 	.word	0x080042cc
 8000ad8:	080042d4 	.word	0x080042d4
 8000adc:	080042dc 	.word	0x080042dc
 8000ae0:	080042e4 	.word	0x080042e4
  		  }
  		  else
  		  {
  			  counter_4--;
 8000ae4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000ae8:	3b01      	subs	r3, #1
 8000aea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  		  }
  	  }
  	  if(HAL_GPIO_ReadPin(SENSOR5_GPIO_Port, SENSOR5_Pin))
 8000aee:	2101      	movs	r1, #1
 8000af0:	48b6      	ldr	r0, [pc, #728]	@ (8000dcc <main+0x750>)
 8000af2:	f001 f853 	bl	8001b9c <HAL_GPIO_ReadPin>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d02d      	beq.n	8000b58 <main+0x4dc>
  	  {
  		  if (counter_5 == 0)
 8000afc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d11c      	bne.n	8000b3e <main+0x4c2>
  		  {
  			  uint8_t data[] = "B4 S5 ";
 8000b04:	4ab2      	ldr	r2, [pc, #712]	@ (8000dd0 <main+0x754>)
 8000b06:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000b0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b0e:	6018      	str	r0, [r3, #0]
 8000b10:	3304      	adds	r3, #4
 8000b12:	8019      	strh	r1, [r3, #0]
 8000b14:	3302      	adds	r3, #2
 8000b16:	0c0a      	lsrs	r2, r1, #16
 8000b18:	701a      	strb	r2, [r3, #0]
  			  HAL_UART_Transmit(&huart2,data,6,10);
 8000b1a:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8000b1e:	230a      	movs	r3, #10
 8000b20:	2206      	movs	r2, #6
 8000b22:	48ac      	ldr	r0, [pc, #688]	@ (8000dd4 <main+0x758>)
 8000b24:	f002 fc10 	bl	8003348 <HAL_UART_Transmit>
  			  FreeUARTBuffer();
 8000b28:	f7ff fd86 	bl	8000638 <FreeUARTBuffer>
  			  counter_5 = 1500;
 8000b2c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000b30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  			  HAL_Delay(1500);
 8000b34:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000b38:	f000 fd44 	bl	80015c4 <HAL_Delay>
 8000b3c:	e00c      	b.n	8000b58 <main+0x4dc>
  		  }
  		  else if(counter_5 < 0)
 8000b3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	da03      	bge.n	8000b4e <main+0x4d2>
  		  {
  			  counter_5 =0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000b4c:	e004      	b.n	8000b58 <main+0x4dc>
  		  }
  		  else
  		  {
  			  counter_5--;
 8000b4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000b52:	3b01      	subs	r3, #1
 8000b54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  		  }
  	  }
  	  if(HAL_GPIO_ReadPin(SENSOR6_GPIO_Port, SENSOR6_Pin))
 8000b58:	2102      	movs	r1, #2
 8000b5a:	489c      	ldr	r0, [pc, #624]	@ (8000dcc <main+0x750>)
 8000b5c:	f001 f81e 	bl	8001b9c <HAL_GPIO_ReadPin>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d02d      	beq.n	8000bc2 <main+0x546>
  	  {
  		  if (counter_6 == 0)
 8000b66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d11c      	bne.n	8000ba8 <main+0x52c>
  		  {
  			  uint8_t data[] = "B4 S6 ";
 8000b6e:	4a9a      	ldr	r2, [pc, #616]	@ (8000dd8 <main+0x75c>)
 8000b70:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b78:	6018      	str	r0, [r3, #0]
 8000b7a:	3304      	adds	r3, #4
 8000b7c:	8019      	strh	r1, [r3, #0]
 8000b7e:	3302      	adds	r3, #2
 8000b80:	0c0a      	lsrs	r2, r1, #16
 8000b82:	701a      	strb	r2, [r3, #0]
  			  HAL_UART_Transmit(&huart2,data,6,10);
 8000b84:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8000b88:	230a      	movs	r3, #10
 8000b8a:	2206      	movs	r2, #6
 8000b8c:	4891      	ldr	r0, [pc, #580]	@ (8000dd4 <main+0x758>)
 8000b8e:	f002 fbdb 	bl	8003348 <HAL_UART_Transmit>
  			  FreeUARTBuffer();
 8000b92:	f7ff fd51 	bl	8000638 <FreeUARTBuffer>
  			  counter_6 = 1500;
 8000b96:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000b9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  			  HAL_Delay(1500);
 8000b9e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000ba2:	f000 fd0f 	bl	80015c4 <HAL_Delay>
 8000ba6:	e00c      	b.n	8000bc2 <main+0x546>
  		  }
  		  else if(counter_6 < 0)
 8000ba8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	da03      	bge.n	8000bb8 <main+0x53c>
  		  {
  			  counter_6 =0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000bb6:	e004      	b.n	8000bc2 <main+0x546>
  		  }
  		  else
  		  {
  			  counter_6--;
 8000bb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  		  }
  	  }
  	  if(HAL_GPIO_ReadPin(SENSOR7_GPIO_Port, SENSOR7_Pin))
 8000bc2:	2104      	movs	r1, #4
 8000bc4:	4881      	ldr	r0, [pc, #516]	@ (8000dcc <main+0x750>)
 8000bc6:	f000 ffe9 	bl	8001b9c <HAL_GPIO_ReadPin>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d02d      	beq.n	8000c2c <main+0x5b0>
  	  {
  		  if (counter_7 == 0)
 8000bd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d11c      	bne.n	8000c12 <main+0x596>
  		  {
  			  uint8_t data[] = "B4 S7 ";
 8000bd8:	4a80      	ldr	r2, [pc, #512]	@ (8000ddc <main+0x760>)
 8000bda:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000be2:	6018      	str	r0, [r3, #0]
 8000be4:	3304      	adds	r3, #4
 8000be6:	8019      	strh	r1, [r3, #0]
 8000be8:	3302      	adds	r3, #2
 8000bea:	0c0a      	lsrs	r2, r1, #16
 8000bec:	701a      	strb	r2, [r3, #0]
  			  HAL_UART_Transmit(&huart2,data,6,10);
 8000bee:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8000bf2:	230a      	movs	r3, #10
 8000bf4:	2206      	movs	r2, #6
 8000bf6:	4877      	ldr	r0, [pc, #476]	@ (8000dd4 <main+0x758>)
 8000bf8:	f002 fba6 	bl	8003348 <HAL_UART_Transmit>
  			  FreeUARTBuffer();
 8000bfc:	f7ff fd1c 	bl	8000638 <FreeUARTBuffer>
  			  counter_7 = 1500;
 8000c00:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000c04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  			  HAL_Delay(1500);
 8000c08:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000c0c:	f000 fcda 	bl	80015c4 <HAL_Delay>
 8000c10:	e00c      	b.n	8000c2c <main+0x5b0>
  		  }
  		  else if(counter_7 < 0)
 8000c12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	da03      	bge.n	8000c22 <main+0x5a6>
  		  {
  			  counter_7 =0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000c20:	e004      	b.n	8000c2c <main+0x5b0>
  		  }
  		  else
  		  {
  			  counter_7--;
 8000c22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000c26:	3b01      	subs	r3, #1
 8000c28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  		  }
  	  }
  	  if(HAL_GPIO_ReadPin(SENSOR8_GPIO_Port, SENSOR8_Pin))
 8000c2c:	2110      	movs	r1, #16
 8000c2e:	4867      	ldr	r0, [pc, #412]	@ (8000dcc <main+0x750>)
 8000c30:	f000 ffb4 	bl	8001b9c <HAL_GPIO_ReadPin>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d02d      	beq.n	8000c96 <main+0x61a>
  	  {
  		  if (counter_8 == 0)
 8000c3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d11c      	bne.n	8000c7c <main+0x600>
  		  {
  			  uint8_t data[] = "B4 S8 ";
 8000c42:	4a67      	ldr	r2, [pc, #412]	@ (8000de0 <main+0x764>)
 8000c44:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c4c:	6018      	str	r0, [r3, #0]
 8000c4e:	3304      	adds	r3, #4
 8000c50:	8019      	strh	r1, [r3, #0]
 8000c52:	3302      	adds	r3, #2
 8000c54:	0c0a      	lsrs	r2, r1, #16
 8000c56:	701a      	strb	r2, [r3, #0]
  			  HAL_UART_Transmit(&huart2,data,6,10);
 8000c58:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8000c5c:	230a      	movs	r3, #10
 8000c5e:	2206      	movs	r2, #6
 8000c60:	485c      	ldr	r0, [pc, #368]	@ (8000dd4 <main+0x758>)
 8000c62:	f002 fb71 	bl	8003348 <HAL_UART_Transmit>
  			  FreeUARTBuffer();
 8000c66:	f7ff fce7 	bl	8000638 <FreeUARTBuffer>
  			  counter_8 = 1500;
 8000c6a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000c6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  			  HAL_Delay(1500);
 8000c72:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000c76:	f000 fca5 	bl	80015c4 <HAL_Delay>
 8000c7a:	e00c      	b.n	8000c96 <main+0x61a>
  		  }
  		  else if(counter_8 < 0)
 8000c7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	da03      	bge.n	8000c8c <main+0x610>
  		  {
  			  counter_8 =0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000c8a:	e004      	b.n	8000c96 <main+0x61a>
  		  }
  		  else
  		  {
  			  counter_8--;
 8000c8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000c90:	3b01      	subs	r3, #1
 8000c92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  		  }
  	  }
  	  if(HAL_GPIO_ReadPin(SENSOR9_GPIO_Port, SENSOR9_Pin)) // Doesn't work
 8000c96:	2120      	movs	r1, #32
 8000c98:	484c      	ldr	r0, [pc, #304]	@ (8000dcc <main+0x750>)
 8000c9a:	f000 ff7f 	bl	8001b9c <HAL_GPIO_ReadPin>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d02d      	beq.n	8000d00 <main+0x684>
  	  {
  		  if (counter_9 == 0)
 8000ca4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d11c      	bne.n	8000ce6 <main+0x66a>
  		  {
  			  uint8_t data[] = "B4 S9 ";
 8000cac:	4a4d      	ldr	r2, [pc, #308]	@ (8000de4 <main+0x768>)
 8000cae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cb6:	6018      	str	r0, [r3, #0]
 8000cb8:	3304      	adds	r3, #4
 8000cba:	8019      	strh	r1, [r3, #0]
 8000cbc:	3302      	adds	r3, #2
 8000cbe:	0c0a      	lsrs	r2, r1, #16
 8000cc0:	701a      	strb	r2, [r3, #0]
  			  HAL_UART_Transmit(&huart2,data,6,10);
 8000cc2:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000cc6:	230a      	movs	r3, #10
 8000cc8:	2206      	movs	r2, #6
 8000cca:	4842      	ldr	r0, [pc, #264]	@ (8000dd4 <main+0x758>)
 8000ccc:	f002 fb3c 	bl	8003348 <HAL_UART_Transmit>
  			  FreeUARTBuffer();
 8000cd0:	f7ff fcb2 	bl	8000638 <FreeUARTBuffer>
  			  counter_9 = 1500;
 8000cd4:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000cd8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  			  HAL_Delay(1500);
 8000cdc:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000ce0:	f000 fc70 	bl	80015c4 <HAL_Delay>
 8000ce4:	e00c      	b.n	8000d00 <main+0x684>
  		  }
  		  else if(counter_9 < 0)
 8000ce6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	da03      	bge.n	8000cf6 <main+0x67a>
  		  {
  			  counter_9 =0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000cf4:	e004      	b.n	8000d00 <main+0x684>
  		  }
  		  else
  		  {
  			  counter_9--;
 8000cf6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  		  }
  	  }
  	  if(HAL_GPIO_ReadPin(SENSOR10_GPIO_Port, SENSOR10_Pin))
 8000d00:	2140      	movs	r1, #64	@ 0x40
 8000d02:	4832      	ldr	r0, [pc, #200]	@ (8000dcc <main+0x750>)
 8000d04:	f000 ff4a 	bl	8001b9c <HAL_GPIO_ReadPin>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d02d      	beq.n	8000d6a <main+0x6ee>
  	  {
  		  if (counter_10 == 0)
 8000d0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d11c      	bne.n	8000d50 <main+0x6d4>
  		  {
  			  uint8_t data[] = "B4 S10";
 8000d16:	4a34      	ldr	r2, [pc, #208]	@ (8000de8 <main+0x76c>)
 8000d18:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d20:	6018      	str	r0, [r3, #0]
 8000d22:	3304      	adds	r3, #4
 8000d24:	8019      	strh	r1, [r3, #0]
 8000d26:	3302      	adds	r3, #2
 8000d28:	0c0a      	lsrs	r2, r1, #16
 8000d2a:	701a      	strb	r2, [r3, #0]
  			  HAL_UART_Transmit(&huart2,data,6,10);
 8000d2c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000d30:	230a      	movs	r3, #10
 8000d32:	2206      	movs	r2, #6
 8000d34:	4827      	ldr	r0, [pc, #156]	@ (8000dd4 <main+0x758>)
 8000d36:	f002 fb07 	bl	8003348 <HAL_UART_Transmit>
  			  FreeUARTBuffer();
 8000d3a:	f7ff fc7d 	bl	8000638 <FreeUARTBuffer>
  			  counter_10 = 1500;
 8000d3e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000d42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  			  HAL_Delay(1500);
 8000d46:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000d4a:	f000 fc3b 	bl	80015c4 <HAL_Delay>
 8000d4e:	e00c      	b.n	8000d6a <main+0x6ee>
  		  }
  		  else if(counter_10 < 0)
 8000d50:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	da03      	bge.n	8000d60 <main+0x6e4>
  		  {
  			  counter_10 =0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000d5e:	e004      	b.n	8000d6a <main+0x6ee>
  		  }
  		  else
  		  {
  			  counter_10--;
 8000d60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000d64:	3b01      	subs	r3, #1
 8000d66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  		  }
  	  }
  	  if(HAL_GPIO_ReadPin(SENSOR11_GPIO_Port, SENSOR11_Pin))
 8000d6a:	2180      	movs	r1, #128	@ 0x80
 8000d6c:	4817      	ldr	r0, [pc, #92]	@ (8000dcc <main+0x750>)
 8000d6e:	f000 ff15 	bl	8001b9c <HAL_GPIO_ReadPin>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d040      	beq.n	8000dfa <main+0x77e>
  	  {
  		  if (counter_11 == 0)
 8000d78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d11c      	bne.n	8000dba <main+0x73e>
  		  {
  			  uint8_t data[] = "B4 S11";
 8000d80:	4a1a      	ldr	r2, [pc, #104]	@ (8000dec <main+0x770>)
 8000d82:	f107 0320 	add.w	r3, r7, #32
 8000d86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d8a:	6018      	str	r0, [r3, #0]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	8019      	strh	r1, [r3, #0]
 8000d90:	3302      	adds	r3, #2
 8000d92:	0c0a      	lsrs	r2, r1, #16
 8000d94:	701a      	strb	r2, [r3, #0]
  			  HAL_UART_Transmit(&huart2,data,6,10);
 8000d96:	f107 0120 	add.w	r1, r7, #32
 8000d9a:	230a      	movs	r3, #10
 8000d9c:	2206      	movs	r2, #6
 8000d9e:	480d      	ldr	r0, [pc, #52]	@ (8000dd4 <main+0x758>)
 8000da0:	f002 fad2 	bl	8003348 <HAL_UART_Transmit>
  			  FreeUARTBuffer();
 8000da4:	f7ff fc48 	bl	8000638 <FreeUARTBuffer>
  			  counter_11 = 1500;
 8000da8:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000dac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  			  HAL_Delay(1500);
 8000db0:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000db4:	f000 fc06 	bl	80015c4 <HAL_Delay>
 8000db8:	e01f      	b.n	8000dfa <main+0x77e>
  		  }
  		  else if(counter_11 < 0)
 8000dba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	da16      	bge.n	8000df0 <main+0x774>
  		  {
  			  counter_11 =0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000dc8:	e017      	b.n	8000dfa <main+0x77e>
 8000dca:	bf00      	nop
 8000dcc:	48000400 	.word	0x48000400
 8000dd0:	080042ec 	.word	0x080042ec
 8000dd4:	200000c8 	.word	0x200000c8
 8000dd8:	080042f4 	.word	0x080042f4
 8000ddc:	080042fc 	.word	0x080042fc
 8000de0:	08004304 	.word	0x08004304
 8000de4:	0800430c 	.word	0x0800430c
 8000de8:	08004314 	.word	0x08004314
 8000dec:	0800431c 	.word	0x0800431c
  		  }
  		  else
  		  {
  			  counter_11--;
 8000df0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000df4:	3b01      	subs	r3, #1
 8000df6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  		  }
  	  }
  	  if(HAL_GPIO_ReadPin(SENSOR12_GPIO_Port, SENSOR12_Pin)) // Doesn't work
 8000dfa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dfe:	486b      	ldr	r0, [pc, #428]	@ (8000fac <main+0x930>)
 8000e00:	f000 fecc 	bl	8001b9c <HAL_GPIO_ReadPin>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d02d      	beq.n	8000e66 <main+0x7ea>
  	  {
  		  if (counter_12 == 0)
 8000e0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d11c      	bne.n	8000e4c <main+0x7d0>
  		  {
  			  uint8_t data[] = "B4 S12";
 8000e12:	4a67      	ldr	r2, [pc, #412]	@ (8000fb0 <main+0x934>)
 8000e14:	f107 0318 	add.w	r3, r7, #24
 8000e18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e1c:	6018      	str	r0, [r3, #0]
 8000e1e:	3304      	adds	r3, #4
 8000e20:	8019      	strh	r1, [r3, #0]
 8000e22:	3302      	adds	r3, #2
 8000e24:	0c0a      	lsrs	r2, r1, #16
 8000e26:	701a      	strb	r2, [r3, #0]
  			  HAL_UART_Transmit(&huart2,data,6,10);
 8000e28:	f107 0118 	add.w	r1, r7, #24
 8000e2c:	230a      	movs	r3, #10
 8000e2e:	2206      	movs	r2, #6
 8000e30:	4860      	ldr	r0, [pc, #384]	@ (8000fb4 <main+0x938>)
 8000e32:	f002 fa89 	bl	8003348 <HAL_UART_Transmit>
  			  FreeUARTBuffer();
 8000e36:	f7ff fbff 	bl	8000638 <FreeUARTBuffer>
  			  counter_12 = 1500;
 8000e3a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000e3e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  			  HAL_Delay(1500);
 8000e42:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000e46:	f000 fbbd 	bl	80015c4 <HAL_Delay>
 8000e4a:	e00c      	b.n	8000e66 <main+0x7ea>
  		  }
  		  else if(counter_12 < 0)
 8000e4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	da03      	bge.n	8000e5c <main+0x7e0>
  		  {
  			  counter_12 =0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000e5a:	e004      	b.n	8000e66 <main+0x7ea>
  		  }
  		  else
  		  {
  			  counter_12--;
 8000e5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000e60:	3b01      	subs	r3, #1
 8000e62:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  		  }
  	  }
  	  if(HAL_GPIO_ReadPin(SENSOR13_GPIO_Port, SENSOR13_Pin)) // Doesn't work
 8000e66:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e6a:	4850      	ldr	r0, [pc, #320]	@ (8000fac <main+0x930>)
 8000e6c:	f000 fe96 	bl	8001b9c <HAL_GPIO_ReadPin>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d02d      	beq.n	8000ed2 <main+0x856>
  	  {
  		  if (counter_13 == 0)
 8000e76:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d11c      	bne.n	8000eb8 <main+0x83c>
  		  {
  			  uint8_t data[] = "B4 S13";
 8000e7e:	4a4e      	ldr	r2, [pc, #312]	@ (8000fb8 <main+0x93c>)
 8000e80:	f107 0310 	add.w	r3, r7, #16
 8000e84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e88:	6018      	str	r0, [r3, #0]
 8000e8a:	3304      	adds	r3, #4
 8000e8c:	8019      	strh	r1, [r3, #0]
 8000e8e:	3302      	adds	r3, #2
 8000e90:	0c0a      	lsrs	r2, r1, #16
 8000e92:	701a      	strb	r2, [r3, #0]
  			  HAL_UART_Transmit(&huart2,data,6,10);
 8000e94:	f107 0110 	add.w	r1, r7, #16
 8000e98:	230a      	movs	r3, #10
 8000e9a:	2206      	movs	r2, #6
 8000e9c:	4845      	ldr	r0, [pc, #276]	@ (8000fb4 <main+0x938>)
 8000e9e:	f002 fa53 	bl	8003348 <HAL_UART_Transmit>
  			  FreeUARTBuffer();
 8000ea2:	f7ff fbc9 	bl	8000638 <FreeUARTBuffer>
  			  counter_13 = 1500;
 8000ea6:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000eaa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  			  HAL_Delay(1500);
 8000eae:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000eb2:	f000 fb87 	bl	80015c4 <HAL_Delay>
 8000eb6:	e00c      	b.n	8000ed2 <main+0x856>
  		  }
  		  else if(counter_13 < 0)
 8000eb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	da03      	bge.n	8000ec8 <main+0x84c>
  		  {
  			  counter_13 =0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000ec6:	e004      	b.n	8000ed2 <main+0x856>
  		  }
  		  else
  		  {
  			  counter_13--;
 8000ec8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  		  }
  	  }
  	  if(HAL_GPIO_ReadPin(SENSOR14_GPIO_Port, SENSOR14_Pin))
 8000ed2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ed6:	4835      	ldr	r0, [pc, #212]	@ (8000fac <main+0x930>)
 8000ed8:	f000 fe60 	bl	8001b9c <HAL_GPIO_ReadPin>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d02d      	beq.n	8000f3e <main+0x8c2>
  	  {
  		  if (counter_14 == 0)
 8000ee2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d11c      	bne.n	8000f24 <main+0x8a8>
  		  {
  			  uint8_t data[] = "B4 S14";
 8000eea:	4a34      	ldr	r2, [pc, #208]	@ (8000fbc <main+0x940>)
 8000eec:	f107 0308 	add.w	r3, r7, #8
 8000ef0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ef4:	6018      	str	r0, [r3, #0]
 8000ef6:	3304      	adds	r3, #4
 8000ef8:	8019      	strh	r1, [r3, #0]
 8000efa:	3302      	adds	r3, #2
 8000efc:	0c0a      	lsrs	r2, r1, #16
 8000efe:	701a      	strb	r2, [r3, #0]
  			  HAL_UART_Transmit(&huart2,data,6,10);
 8000f00:	f107 0108 	add.w	r1, r7, #8
 8000f04:	230a      	movs	r3, #10
 8000f06:	2206      	movs	r2, #6
 8000f08:	482a      	ldr	r0, [pc, #168]	@ (8000fb4 <main+0x938>)
 8000f0a:	f002 fa1d 	bl	8003348 <HAL_UART_Transmit>
  			  FreeUARTBuffer();
 8000f0e:	f7ff fb93 	bl	8000638 <FreeUARTBuffer>
  			  counter_14 = 1500;
 8000f12:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000f16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  			  HAL_Delay(1500);
 8000f1a:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000f1e:	f000 fb51 	bl	80015c4 <HAL_Delay>
 8000f22:	e00c      	b.n	8000f3e <main+0x8c2>
  		  }
  		  else if(counter_14 < 0)
 8000f24:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	da03      	bge.n	8000f34 <main+0x8b8>
  		  {
  			  counter_14 =0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000f32:	e004      	b.n	8000f3e <main+0x8c2>
  		  }
  		  else
  		  {
  			  counter_14--;
 8000f34:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  		  }
  	  }
  	  if(HAL_GPIO_ReadPin(SENSOR15_GPIO_Port, SENSOR15_Pin))
 8000f3e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f42:	481a      	ldr	r0, [pc, #104]	@ (8000fac <main+0x930>)
 8000f44:	f000 fe2a 	bl	8001b9c <HAL_GPIO_ReadPin>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f43f ac31 	beq.w	80007b2 <main+0x136>
  	  {
  		  if (counter_15 == 0)
 8000f50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d11a      	bne.n	8000f8e <main+0x912>
  		  {
  			  uint8_t data[] = "B4 S15";
 8000f58:	4a19      	ldr	r2, [pc, #100]	@ (8000fc0 <main+0x944>)
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f60:	6018      	str	r0, [r3, #0]
 8000f62:	3304      	adds	r3, #4
 8000f64:	8019      	strh	r1, [r3, #0]
 8000f66:	3302      	adds	r3, #2
 8000f68:	0c0a      	lsrs	r2, r1, #16
 8000f6a:	701a      	strb	r2, [r3, #0]
  			  HAL_UART_Transmit(&huart2,data,6,10);
 8000f6c:	4639      	mov	r1, r7
 8000f6e:	230a      	movs	r3, #10
 8000f70:	2206      	movs	r2, #6
 8000f72:	4810      	ldr	r0, [pc, #64]	@ (8000fb4 <main+0x938>)
 8000f74:	f002 f9e8 	bl	8003348 <HAL_UART_Transmit>
  			  FreeUARTBuffer();
 8000f78:	f7ff fb5e 	bl	8000638 <FreeUARTBuffer>
  			  counter_15 = 1500;
 8000f7c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000f80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  			  HAL_Delay(1500);
 8000f84:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000f88:	f000 fb1c 	bl	80015c4 <HAL_Delay>
 8000f8c:	e411      	b.n	80007b2 <main+0x136>
  		  }
  		  else if(counter_15 < 0)
 8000f8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	da03      	bge.n	8000f9e <main+0x922>
  		  {
  			  counter_15 =0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000f9c:	e409      	b.n	80007b2 <main+0x136>
  		  }
  		  else
  		  {
  			  counter_15--;
 8000f9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_RXNE))
 8000fa8:	e403      	b.n	80007b2 <main+0x136>
 8000faa:	bf00      	nop
 8000fac:	48000400 	.word	0x48000400
 8000fb0:	08004324 	.word	0x08004324
 8000fb4:	200000c8 	.word	0x200000c8
 8000fb8:	0800432c 	.word	0x0800432c
 8000fbc:	08004334 	.word	0x08004334
 8000fc0:	0800433c 	.word	0x0800433c

08000fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b094      	sub	sp, #80	@ 0x50
 8000fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fca:	f107 0318 	add.w	r3, r7, #24
 8000fce:	2238      	movs	r2, #56	@ 0x38
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f003 f942 	bl	800425c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd8:	1d3b      	adds	r3, r7, #4
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fea:	f000 fe07 	bl	8001bfc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ff2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ff8:	2340      	movs	r3, #64	@ 0x40
 8000ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001000:	2302      	movs	r3, #2
 8001002:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001004:	2301      	movs	r3, #1
 8001006:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001008:	230a      	movs	r3, #10
 800100a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800100c:	2302      	movs	r3, #2
 800100e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001010:	2302      	movs	r3, #2
 8001012:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001014:	2302      	movs	r3, #2
 8001016:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001018:	f107 0318 	add.w	r3, r7, #24
 800101c:	4618      	mov	r0, r3
 800101e:	f000 fea1 	bl	8001d64 <HAL_RCC_OscConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001028:	f000 f92c 	bl	8001284 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102c:	230f      	movs	r3, #15
 800102e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001030:	2303      	movs	r3, #3
 8001032:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	2102      	movs	r1, #2
 8001044:	4618      	mov	r0, r3
 8001046:	f001 f99f 	bl	8002388 <HAL_RCC_ClockConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001050:	f000 f918 	bl	8001284 <Error_Handler>
  }
}
 8001054:	bf00      	nop
 8001056:	3750      	adds	r7, #80	@ 0x50
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001060:	4b1b      	ldr	r3, [pc, #108]	@ (80010d0 <MX_SPI1_Init+0x74>)
 8001062:	4a1c      	ldr	r2, [pc, #112]	@ (80010d4 <MX_SPI1_Init+0x78>)
 8001064:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001066:	4b1a      	ldr	r3, [pc, #104]	@ (80010d0 <MX_SPI1_Init+0x74>)
 8001068:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800106c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800106e:	4b18      	ldr	r3, [pc, #96]	@ (80010d0 <MX_SPI1_Init+0x74>)
 8001070:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001074:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001076:	4b16      	ldr	r3, [pc, #88]	@ (80010d0 <MX_SPI1_Init+0x74>)
 8001078:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800107c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800107e:	4b14      	ldr	r3, [pc, #80]	@ (80010d0 <MX_SPI1_Init+0x74>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001084:	4b12      	ldr	r3, [pc, #72]	@ (80010d0 <MX_SPI1_Init+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800108a:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <MX_SPI1_Init+0x74>)
 800108c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001090:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001092:	4b0f      	ldr	r3, [pc, #60]	@ (80010d0 <MX_SPI1_Init+0x74>)
 8001094:	2220      	movs	r2, #32
 8001096:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001098:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <MX_SPI1_Init+0x74>)
 800109a:	2200      	movs	r2, #0
 800109c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800109e:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <MX_SPI1_Init+0x74>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010a4:	4b0a      	ldr	r3, [pc, #40]	@ (80010d0 <MX_SPI1_Init+0x74>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80010aa:	4b09      	ldr	r3, [pc, #36]	@ (80010d0 <MX_SPI1_Init+0x74>)
 80010ac:	2207      	movs	r2, #7
 80010ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010b0:	4b07      	ldr	r3, [pc, #28]	@ (80010d0 <MX_SPI1_Init+0x74>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010b6:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <MX_SPI1_Init+0x74>)
 80010b8:	2208      	movs	r2, #8
 80010ba:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010bc:	4804      	ldr	r0, [pc, #16]	@ (80010d0 <MX_SPI1_Init+0x74>)
 80010be:	f001 fd6f 	bl	8002ba0 <HAL_SPI_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80010c8:	f000 f8dc 	bl	8001284 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000064 	.word	0x20000064
 80010d4:	40013000 	.word	0x40013000

080010d8 <MX_USART2_UART_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80010dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001188 <MX_USART2_UART_Init+0xb0>)
 80010de:	4a2b      	ldr	r2, [pc, #172]	@ (800118c <MX_USART2_UART_Init+0xb4>)
 80010e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80010e2:	4b29      	ldr	r3, [pc, #164]	@ (8001188 <MX_USART2_UART_Init+0xb0>)
 80010e4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80010e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ea:	4b27      	ldr	r3, [pc, #156]	@ (8001188 <MX_USART2_UART_Init+0xb0>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010f0:	4b25      	ldr	r3, [pc, #148]	@ (8001188 <MX_USART2_UART_Init+0xb0>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010f6:	4b24      	ldr	r3, [pc, #144]	@ (8001188 <MX_USART2_UART_Init+0xb0>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010fc:	4b22      	ldr	r3, [pc, #136]	@ (8001188 <MX_USART2_UART_Init+0xb0>)
 80010fe:	220c      	movs	r2, #12
 8001100:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001102:	4b21      	ldr	r3, [pc, #132]	@ (8001188 <MX_USART2_UART_Init+0xb0>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001108:	4b1f      	ldr	r3, [pc, #124]	@ (8001188 <MX_USART2_UART_Init+0xb0>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800110e:	4b1e      	ldr	r3, [pc, #120]	@ (8001188 <MX_USART2_UART_Init+0xb0>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001114:	4b1c      	ldr	r3, [pc, #112]	@ (8001188 <MX_USART2_UART_Init+0xb0>)
 8001116:	2200      	movs	r2, #0
 8001118:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800111a:	4b1b      	ldr	r3, [pc, #108]	@ (8001188 <MX_USART2_UART_Init+0xb0>)
 800111c:	2200      	movs	r2, #0
 800111e:	629a      	str	r2, [r3, #40]	@ 0x28

  // Assign Tx and Rx buffer pointers
  huart2.pTxBuffPtr = TxBuffer;
 8001120:	4b19      	ldr	r3, [pc, #100]	@ (8001188 <MX_USART2_UART_Init+0xb0>)
 8001122:	4a1b      	ldr	r2, [pc, #108]	@ (8001190 <MX_USART2_UART_Init+0xb8>)
 8001124:	651a      	str	r2, [r3, #80]	@ 0x50
  huart2.TxXferSize = TX_BUFFER_SIZE;
 8001126:	4b18      	ldr	r3, [pc, #96]	@ (8001188 <MX_USART2_UART_Init+0xb0>)
 8001128:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800112c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  huart2.pRxBuffPtr = RxBuffer;
 8001130:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <MX_USART2_UART_Init+0xb0>)
 8001132:	4a18      	ldr	r2, [pc, #96]	@ (8001194 <MX_USART2_UART_Init+0xbc>)
 8001134:	659a      	str	r2, [r3, #88]	@ 0x58
  huart2.RxXferSize = RX_BUFFER_SIZE;
 8001136:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <MX_USART2_UART_Init+0xb0>)
 8001138:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800113c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001140:	4811      	ldr	r0, [pc, #68]	@ (8001188 <MX_USART2_UART_Init+0xb0>)
 8001142:	f002 f8b1 	bl	80032a8 <HAL_UART_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_USART2_UART_Init+0x78>
  {
    Error_Handler();
 800114c:	f000 f89a 	bl	8001284 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001150:	2100      	movs	r1, #0
 8001152:	480d      	ldr	r0, [pc, #52]	@ (8001188 <MX_USART2_UART_Init+0xb0>)
 8001154:	f002 ffb8 	bl	80040c8 <HAL_UARTEx_SetTxFifoThreshold>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 800115e:	f000 f891 	bl	8001284 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001162:	2100      	movs	r1, #0
 8001164:	4808      	ldr	r0, [pc, #32]	@ (8001188 <MX_USART2_UART_Init+0xb0>)
 8001166:	f002 ffed 	bl	8004144 <HAL_UARTEx_SetRxFifoThreshold>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_USART2_UART_Init+0x9c>
  {
    Error_Handler();
 8001170:	f000 f888 	bl	8001284 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001174:	4804      	ldr	r0, [pc, #16]	@ (8001188 <MX_USART2_UART_Init+0xb0>)
 8001176:	f002 ff6e 	bl	8004056 <HAL_UARTEx_DisableFifoMode>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_USART2_UART_Init+0xac>
  {
    Error_Handler();
 8001180:	f000 f880 	bl	8001284 <Error_Handler>
  }
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}
 8001188:	200000c8 	.word	0x200000c8
 800118c:	40004400 	.word	0x40004400
 8001190:	2000025c 	.word	0x2000025c
 8001194:	2000015c 	.word	0x2000015c

08001198 <MX_GPIO_Init>:
static void MX_GPIO_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119e:	f107 030c 	add.w	r3, r7, #12
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
 80011ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ae:	4b32      	ldr	r3, [pc, #200]	@ (8001278 <MX_GPIO_Init+0xe0>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b2:	4a31      	ldr	r2, [pc, #196]	@ (8001278 <MX_GPIO_Init+0xe0>)
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001278 <MX_GPIO_Init+0xe0>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001278 <MX_GPIO_Init+0xe0>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ca:	4a2b      	ldr	r2, [pc, #172]	@ (8001278 <MX_GPIO_Init+0xe0>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d2:	4b29      	ldr	r3, [pc, #164]	@ (8001278 <MX_GPIO_Init+0xe0>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011de:	4b26      	ldr	r3, [pc, #152]	@ (8001278 <MX_GPIO_Init+0xe0>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e2:	4a25      	ldr	r2, [pc, #148]	@ (8001278 <MX_GPIO_Init+0xe0>)
 80011e4:	f043 0302 	orr.w	r3, r3, #2
 80011e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ea:	4b23      	ldr	r3, [pc, #140]	@ (8001278 <MX_GPIO_Init+0xe0>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2110      	movs	r1, #16
 80011fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011fe:	f000 fce5 	bl	8001bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SENSOR1_Pin */
  GPIO_InitStruct.Pin = SENSOR1_Pin;
 8001202:	2302      	movs	r3, #2
 8001204:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800120a:	2302      	movs	r3, #2
 800120c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SENSOR1_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	4619      	mov	r1, r3
 8001214:	4819      	ldr	r0, [pc, #100]	@ (800127c <MX_GPIO_Init+0xe4>)
 8001216:	f000 fb3f 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800121a:	2310      	movs	r3, #16
 800121c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121e:	2301      	movs	r3, #1
 8001220:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122a:	f107 030c 	add.w	r3, r7, #12
 800122e:	4619      	mov	r1, r3
 8001230:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001234:	f000 fb30 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR5_Pin SENSOR6_Pin SENSOR7_Pin SENSOR13_Pin
                           SENSOR14_Pin SENSOR15_Pin SENSOR8_Pin SENSOR9_Pin
                           SENSOR10_Pin SENSOR11_Pin SENSOR12_Pin */
  GPIO_InitStruct.Pin = SENSOR5_Pin|SENSOR6_Pin|SENSOR7_Pin|SENSOR13_Pin
 8001238:	f641 63f7 	movw	r3, #7927	@ 0x1ef7
 800123c:	60fb      	str	r3, [r7, #12]
                          |SENSOR14_Pin|SENSOR15_Pin|SENSOR8_Pin|SENSOR9_Pin
                          |SENSOR10_Pin|SENSOR11_Pin|SENSOR12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001242:	2302      	movs	r3, #2
 8001244:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	4619      	mov	r1, r3
 800124c:	480c      	ldr	r0, [pc, #48]	@ (8001280 <MX_GPIO_Init+0xe8>)
 800124e:	f000 fb23 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR2_Pin SENSOR3_Pin SENSOR4_Pin */
  GPIO_InitStruct.Pin = SENSOR2_Pin|SENSOR3_Pin|SENSOR4_Pin;
 8001252:	f44f 4318 	mov.w	r3, #38912	@ 0x9800
 8001256:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800125c:	2302      	movs	r3, #2
 800125e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	4619      	mov	r1, r3
 8001266:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800126a:	f000 fb15 	bl	8001898 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800126e:	bf00      	nop
 8001270:	3720      	adds	r7, #32
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40021000 	.word	0x40021000
 800127c:	48000800 	.word	0x48000800
 8001280:	48000400 	.word	0x48000400

08001284 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001288:	b672      	cpsid	i
}
 800128a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <Error_Handler+0x8>

08001290 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001296:	4b0f      	ldr	r3, [pc, #60]	@ (80012d4 <HAL_MspInit+0x44>)
 8001298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800129a:	4a0e      	ldr	r2, [pc, #56]	@ (80012d4 <HAL_MspInit+0x44>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80012a2:	4b0c      	ldr	r3, [pc, #48]	@ (80012d4 <HAL_MspInit+0x44>)
 80012a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <HAL_MspInit+0x44>)
 80012b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b2:	4a08      	ldr	r2, [pc, #32]	@ (80012d4 <HAL_MspInit+0x44>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80012ba:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <HAL_MspInit+0x44>)
 80012bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012c6:	f000 fd3d 	bl	8001d44 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40021000 	.word	0x40021000

080012d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	@ 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a17      	ldr	r2, [pc, #92]	@ (8001354 <HAL_SPI_MspInit+0x7c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d128      	bne.n	800134c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012fa:	4b17      	ldr	r3, [pc, #92]	@ (8001358 <HAL_SPI_MspInit+0x80>)
 80012fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012fe:	4a16      	ldr	r2, [pc, #88]	@ (8001358 <HAL_SPI_MspInit+0x80>)
 8001300:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001304:	6613      	str	r3, [r2, #96]	@ 0x60
 8001306:	4b14      	ldr	r3, [pc, #80]	@ (8001358 <HAL_SPI_MspInit+0x80>)
 8001308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800130a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <HAL_SPI_MspInit+0x80>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001316:	4a10      	ldr	r2, [pc, #64]	@ (8001358 <HAL_SPI_MspInit+0x80>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800131e:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <HAL_SPI_MspInit+0x80>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800132a:	23a0      	movs	r3, #160	@ 0xa0
 800132c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800133a:	2305      	movs	r3, #5
 800133c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001348:	f000 faa6 	bl	8001898 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800134c:	bf00      	nop
 800134e:	3728      	adds	r7, #40	@ 0x28
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40013000 	.word	0x40013000
 8001358:	40021000 	.word	0x40021000

0800135c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b09a      	sub	sp, #104	@ 0x68
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001374:	f107 0310 	add.w	r3, r7, #16
 8001378:	2244      	movs	r2, #68	@ 0x44
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f002 ff6d 	bl	800425c <memset>
  if(huart->Instance==USART2)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a1f      	ldr	r2, [pc, #124]	@ (8001404 <HAL_UART_MspInit+0xa8>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d136      	bne.n	80013fa <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800138c:	2302      	movs	r3, #2
 800138e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001390:	2300      	movs	r3, #0
 8001392:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001394:	f107 0310 	add.w	r3, r7, #16
 8001398:	4618      	mov	r0, r3
 800139a:	f001 fa11 	bl	80027c0 <HAL_RCCEx_PeriphCLKConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013a4:	f7ff ff6e 	bl	8001284 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013a8:	4b17      	ldr	r3, [pc, #92]	@ (8001408 <HAL_UART_MspInit+0xac>)
 80013aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ac:	4a16      	ldr	r2, [pc, #88]	@ (8001408 <HAL_UART_MspInit+0xac>)
 80013ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80013b4:	4b14      	ldr	r3, [pc, #80]	@ (8001408 <HAL_UART_MspInit+0xac>)
 80013b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c0:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <HAL_UART_MspInit+0xac>)
 80013c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c4:	4a10      	ldr	r2, [pc, #64]	@ (8001408 <HAL_UART_MspInit+0xac>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <HAL_UART_MspInit+0xac>)
 80013ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013d8:	230c      	movs	r3, #12
 80013da:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	2300      	movs	r3, #0
 80013e6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013e8:	2307      	movs	r3, #7
 80013ea:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013f0:	4619      	mov	r1, r3
 80013f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013f6:	f000 fa4f 	bl	8001898 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	3768      	adds	r7, #104	@ 0x68
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40004400 	.word	0x40004400
 8001408:	40021000 	.word	0x40021000

0800140c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <NMI_Handler+0x4>

08001414 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <HardFault_Handler+0x4>

0800141c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <MemManage_Handler+0x4>

08001424 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001428:	bf00      	nop
 800142a:	e7fd      	b.n	8001428 <BusFault_Handler+0x4>

0800142c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <UsageFault_Handler+0x4>

08001434 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001462:	f000 f891 	bl	8001588 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001470:	4b06      	ldr	r3, [pc, #24]	@ (800148c <SystemInit+0x20>)
 8001472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001476:	4a05      	ldr	r2, [pc, #20]	@ (800148c <SystemInit+0x20>)
 8001478:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800147c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001490:	480d      	ldr	r0, [pc, #52]	@ (80014c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001492:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001494:	f7ff ffea 	bl	800146c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001498:	480c      	ldr	r0, [pc, #48]	@ (80014cc <LoopForever+0x6>)
  ldr r1, =_edata
 800149a:	490d      	ldr	r1, [pc, #52]	@ (80014d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800149c:	4a0d      	ldr	r2, [pc, #52]	@ (80014d4 <LoopForever+0xe>)
  movs r3, #0
 800149e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80014a0:	e002      	b.n	80014a8 <LoopCopyDataInit>

080014a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a6:	3304      	adds	r3, #4

080014a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ac:	d3f9      	bcc.n	80014a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ae:	4a0a      	ldr	r2, [pc, #40]	@ (80014d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014b0:	4c0a      	ldr	r4, [pc, #40]	@ (80014dc <LoopForever+0x16>)
  movs r3, #0
 80014b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b4:	e001      	b.n	80014ba <LoopFillZerobss>

080014b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b8:	3204      	adds	r2, #4

080014ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014bc:	d3fb      	bcc.n	80014b6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80014be:	f002 fed5 	bl	800426c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014c2:	f7ff f8db 	bl	800067c <main>

080014c6 <LoopForever>:

LoopForever:
    b LoopForever
 80014c6:	e7fe      	b.n	80014c6 <LoopForever>
  ldr   r0, =_estack
 80014c8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80014cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014d4:	08004394 	.word	0x08004394
  ldr r2, =_sbss
 80014d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014dc:	20000360 	.word	0x20000360

080014e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014e0:	e7fe      	b.n	80014e0 <ADC1_2_IRQHandler>

080014e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014e8:	2300      	movs	r3, #0
 80014ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ec:	2003      	movs	r0, #3
 80014ee:	f000 f93d 	bl	800176c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014f2:	200f      	movs	r0, #15
 80014f4:	f000 f80e 	bl	8001514 <HAL_InitTick>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d002      	beq.n	8001504 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	71fb      	strb	r3, [r7, #7]
 8001502:	e001      	b.n	8001508 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001504:	f7ff fec4 	bl	8001290 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001508:	79fb      	ldrb	r3, [r7, #7]

}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800151c:	2300      	movs	r3, #0
 800151e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001520:	4b16      	ldr	r3, [pc, #88]	@ (800157c <HAL_InitTick+0x68>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d022      	beq.n	800156e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001528:	4b15      	ldr	r3, [pc, #84]	@ (8001580 <HAL_InitTick+0x6c>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	4b13      	ldr	r3, [pc, #76]	@ (800157c <HAL_InitTick+0x68>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001534:	fbb1 f3f3 	udiv	r3, r1, r3
 8001538:	fbb2 f3f3 	udiv	r3, r2, r3
 800153c:	4618      	mov	r0, r3
 800153e:	f000 f93a 	bl	80017b6 <HAL_SYSTICK_Config>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d10f      	bne.n	8001568 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b0f      	cmp	r3, #15
 800154c:	d809      	bhi.n	8001562 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800154e:	2200      	movs	r2, #0
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	f04f 30ff 	mov.w	r0, #4294967295
 8001556:	f000 f914 	bl	8001782 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800155a:	4a0a      	ldr	r2, [pc, #40]	@ (8001584 <HAL_InitTick+0x70>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	e007      	b.n	8001572 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	73fb      	strb	r3, [r7, #15]
 8001566:	e004      	b.n	8001572 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	73fb      	strb	r3, [r7, #15]
 800156c:	e001      	b.n	8001572 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001572:	7bfb      	ldrb	r3, [r7, #15]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000008 	.word	0x20000008
 8001580:	20000000 	.word	0x20000000
 8001584:	20000004 	.word	0x20000004

08001588 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800158c:	4b05      	ldr	r3, [pc, #20]	@ (80015a4 <HAL_IncTick+0x1c>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b05      	ldr	r3, [pc, #20]	@ (80015a8 <HAL_IncTick+0x20>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4413      	add	r3, r2
 8001596:	4a03      	ldr	r2, [pc, #12]	@ (80015a4 <HAL_IncTick+0x1c>)
 8001598:	6013      	str	r3, [r2, #0]
}
 800159a:	bf00      	nop
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	2000035c 	.word	0x2000035c
 80015a8:	20000008 	.word	0x20000008

080015ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return uwTick;
 80015b0:	4b03      	ldr	r3, [pc, #12]	@ (80015c0 <HAL_GetTick+0x14>)
 80015b2:	681b      	ldr	r3, [r3, #0]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	2000035c 	.word	0x2000035c

080015c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015cc:	f7ff ffee 	bl	80015ac <HAL_GetTick>
 80015d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015dc:	d004      	beq.n	80015e8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80015de:	4b09      	ldr	r3, [pc, #36]	@ (8001604 <HAL_Delay+0x40>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	4413      	add	r3, r2
 80015e6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015e8:	bf00      	nop
 80015ea:	f7ff ffdf 	bl	80015ac <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d8f7      	bhi.n	80015ea <HAL_Delay+0x26>
  {
  }
}
 80015fa:	bf00      	nop
 80015fc:	bf00      	nop
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20000008 	.word	0x20000008

08001608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001618:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001624:	4013      	ands	r3, r2
 8001626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001630:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163a:	4a04      	ldr	r2, [pc, #16]	@ (800164c <__NVIC_SetPriorityGrouping+0x44>)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	60d3      	str	r3, [r2, #12]
}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001654:	4b04      	ldr	r3, [pc, #16]	@ (8001668 <__NVIC_GetPriorityGrouping+0x18>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	0a1b      	lsrs	r3, r3, #8
 800165a:	f003 0307 	and.w	r3, r3, #7
}
 800165e:	4618      	mov	r0, r3
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	6039      	str	r1, [r7, #0]
 8001676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	2b00      	cmp	r3, #0
 800167e:	db0a      	blt.n	8001696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	b2da      	uxtb	r2, r3
 8001684:	490c      	ldr	r1, [pc, #48]	@ (80016b8 <__NVIC_SetPriority+0x4c>)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	0112      	lsls	r2, r2, #4
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	440b      	add	r3, r1
 8001690:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001694:	e00a      	b.n	80016ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4908      	ldr	r1, [pc, #32]	@ (80016bc <__NVIC_SetPriority+0x50>)
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	3b04      	subs	r3, #4
 80016a4:	0112      	lsls	r2, r2, #4
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	440b      	add	r3, r1
 80016aa:	761a      	strb	r2, [r3, #24]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000e100 	.word	0xe000e100
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b089      	sub	sp, #36	@ 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f1c3 0307 	rsb	r3, r3, #7
 80016da:	2b04      	cmp	r3, #4
 80016dc:	bf28      	it	cs
 80016de:	2304      	movcs	r3, #4
 80016e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3304      	adds	r3, #4
 80016e6:	2b06      	cmp	r3, #6
 80016e8:	d902      	bls.n	80016f0 <NVIC_EncodePriority+0x30>
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3b03      	subs	r3, #3
 80016ee:	e000      	b.n	80016f2 <NVIC_EncodePriority+0x32>
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	f04f 32ff 	mov.w	r2, #4294967295
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43da      	mvns	r2, r3
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	401a      	ands	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001708:	f04f 31ff 	mov.w	r1, #4294967295
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	43d9      	mvns	r1, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	4313      	orrs	r3, r2
         );
}
 800171a:	4618      	mov	r0, r3
 800171c:	3724      	adds	r7, #36	@ 0x24
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3b01      	subs	r3, #1
 8001734:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001738:	d301      	bcc.n	800173e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800173a:	2301      	movs	r3, #1
 800173c:	e00f      	b.n	800175e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173e:	4a0a      	ldr	r2, [pc, #40]	@ (8001768 <SysTick_Config+0x40>)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001746:	210f      	movs	r1, #15
 8001748:	f04f 30ff 	mov.w	r0, #4294967295
 800174c:	f7ff ff8e 	bl	800166c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001750:	4b05      	ldr	r3, [pc, #20]	@ (8001768 <SysTick_Config+0x40>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001756:	4b04      	ldr	r3, [pc, #16]	@ (8001768 <SysTick_Config+0x40>)
 8001758:	2207      	movs	r2, #7
 800175a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	e000e010 	.word	0xe000e010

0800176c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff ff47 	bl	8001608 <__NVIC_SetPriorityGrouping>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b086      	sub	sp, #24
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
 800178e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001790:	f7ff ff5e 	bl	8001650 <__NVIC_GetPriorityGrouping>
 8001794:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	68b9      	ldr	r1, [r7, #8]
 800179a:	6978      	ldr	r0, [r7, #20]
 800179c:	f7ff ff90 	bl	80016c0 <NVIC_EncodePriority>
 80017a0:	4602      	mov	r2, r0
 80017a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a6:	4611      	mov	r1, r2
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff5f 	bl	800166c <__NVIC_SetPriority>
}
 80017ae:	bf00      	nop
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff ffb2 	bl	8001728 <SysTick_Config>
 80017c4:	4603      	mov	r3, r0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b085      	sub	sp, #20
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017d6:	2300      	movs	r3, #0
 80017d8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d005      	beq.n	80017f2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2204      	movs	r2, #4
 80017ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
 80017f0:	e037      	b.n	8001862 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 020e 	bic.w	r2, r2, #14
 8001800:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800180c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001810:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 0201 	bic.w	r2, r2, #1
 8001820:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001826:	f003 021f 	and.w	r2, r3, #31
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182e:	2101      	movs	r1, #1
 8001830:	fa01 f202 	lsl.w	r2, r1, r2
 8001834:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800183e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001844:	2b00      	cmp	r3, #0
 8001846:	d00c      	beq.n	8001862 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001852:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001856:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001860:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001872:	7bfb      	ldrb	r3, [r7, #15]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800188c:	4618      	mov	r0, r3
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001898:	b480      	push	{r7}
 800189a:	b087      	sub	sp, #28
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80018a6:	e15a      	b.n	8001b5e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	2101      	movs	r1, #1
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	fa01 f303 	lsl.w	r3, r1, r3
 80018b4:	4013      	ands	r3, r2
 80018b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 814c 	beq.w	8001b58 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 0303 	and.w	r3, r3, #3
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d005      	beq.n	80018d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d130      	bne.n	800193a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	2203      	movs	r2, #3
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	68da      	ldr	r2, [r3, #12]
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4313      	orrs	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800190e:	2201      	movs	r2, #1
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	091b      	lsrs	r3, r3, #4
 8001924:	f003 0201 	and.w	r2, r3, #1
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	2b03      	cmp	r3, #3
 8001944:	d017      	beq.n	8001976 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	2203      	movs	r2, #3
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d123      	bne.n	80019ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	08da      	lsrs	r2, r3, #3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3208      	adds	r2, #8
 800198a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800198e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	220f      	movs	r2, #15
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4013      	ands	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	691a      	ldr	r2, [r3, #16]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	08da      	lsrs	r2, r3, #3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3208      	adds	r2, #8
 80019c4:	6939      	ldr	r1, [r7, #16]
 80019c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	2203      	movs	r2, #3
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4013      	ands	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 0203 	and.w	r2, r3, #3
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 80a6 	beq.w	8001b58 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0c:	4b5b      	ldr	r3, [pc, #364]	@ (8001b7c <HAL_GPIO_Init+0x2e4>)
 8001a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a10:	4a5a      	ldr	r2, [pc, #360]	@ (8001b7c <HAL_GPIO_Init+0x2e4>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a18:	4b58      	ldr	r3, [pc, #352]	@ (8001b7c <HAL_GPIO_Init+0x2e4>)
 8001a1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a24:	4a56      	ldr	r2, [pc, #344]	@ (8001b80 <HAL_GPIO_Init+0x2e8>)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	089b      	lsrs	r3, r3, #2
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	220f      	movs	r2, #15
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a4e:	d01f      	beq.n	8001a90 <HAL_GPIO_Init+0x1f8>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a4c      	ldr	r2, [pc, #304]	@ (8001b84 <HAL_GPIO_Init+0x2ec>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d019      	beq.n	8001a8c <HAL_GPIO_Init+0x1f4>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a4b      	ldr	r2, [pc, #300]	@ (8001b88 <HAL_GPIO_Init+0x2f0>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d013      	beq.n	8001a88 <HAL_GPIO_Init+0x1f0>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a4a      	ldr	r2, [pc, #296]	@ (8001b8c <HAL_GPIO_Init+0x2f4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d00d      	beq.n	8001a84 <HAL_GPIO_Init+0x1ec>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a49      	ldr	r2, [pc, #292]	@ (8001b90 <HAL_GPIO_Init+0x2f8>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d007      	beq.n	8001a80 <HAL_GPIO_Init+0x1e8>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a48      	ldr	r2, [pc, #288]	@ (8001b94 <HAL_GPIO_Init+0x2fc>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d101      	bne.n	8001a7c <HAL_GPIO_Init+0x1e4>
 8001a78:	2305      	movs	r3, #5
 8001a7a:	e00a      	b.n	8001a92 <HAL_GPIO_Init+0x1fa>
 8001a7c:	2306      	movs	r3, #6
 8001a7e:	e008      	b.n	8001a92 <HAL_GPIO_Init+0x1fa>
 8001a80:	2304      	movs	r3, #4
 8001a82:	e006      	b.n	8001a92 <HAL_GPIO_Init+0x1fa>
 8001a84:	2303      	movs	r3, #3
 8001a86:	e004      	b.n	8001a92 <HAL_GPIO_Init+0x1fa>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e002      	b.n	8001a92 <HAL_GPIO_Init+0x1fa>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <HAL_GPIO_Init+0x1fa>
 8001a90:	2300      	movs	r3, #0
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	f002 0203 	and.w	r2, r2, #3
 8001a98:	0092      	lsls	r2, r2, #2
 8001a9a:	4093      	lsls	r3, r2
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aa2:	4937      	ldr	r1, [pc, #220]	@ (8001b80 <HAL_GPIO_Init+0x2e8>)
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	089b      	lsrs	r3, r3, #2
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ab0:	4b39      	ldr	r3, [pc, #228]	@ (8001b98 <HAL_GPIO_Init+0x300>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4013      	ands	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ad4:	4a30      	ldr	r2, [pc, #192]	@ (8001b98 <HAL_GPIO_Init+0x300>)
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ada:	4b2f      	ldr	r3, [pc, #188]	@ (8001b98 <HAL_GPIO_Init+0x300>)
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001afe:	4a26      	ldr	r2, [pc, #152]	@ (8001b98 <HAL_GPIO_Init+0x300>)
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001b04:	4b24      	ldr	r3, [pc, #144]	@ (8001b98 <HAL_GPIO_Init+0x300>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4013      	ands	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b28:	4a1b      	ldr	r2, [pc, #108]	@ (8001b98 <HAL_GPIO_Init+0x300>)
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b98 <HAL_GPIO_Init+0x300>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b52:	4a11      	ldr	r2, [pc, #68]	@ (8001b98 <HAL_GPIO_Init+0x300>)
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	fa22 f303 	lsr.w	r3, r2, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	f47f ae9d 	bne.w	80018a8 <HAL_GPIO_Init+0x10>
  }
}
 8001b6e:	bf00      	nop
 8001b70:	bf00      	nop
 8001b72:	371c      	adds	r7, #28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40010000 	.word	0x40010000
 8001b84:	48000400 	.word	0x48000400
 8001b88:	48000800 	.word	0x48000800
 8001b8c:	48000c00 	.word	0x48000c00
 8001b90:	48001000 	.word	0x48001000
 8001b94:	48001400 	.word	0x48001400
 8001b98:	40010400 	.word	0x40010400

08001b9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691a      	ldr	r2, [r3, #16]
 8001bac:	887b      	ldrh	r3, [r7, #2]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d002      	beq.n	8001bba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	73fb      	strb	r3, [r7, #15]
 8001bb8:	e001      	b.n	8001bbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	807b      	strh	r3, [r7, #2]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bdc:	787b      	ldrb	r3, [r7, #1]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001be2:	887a      	ldrh	r2, [r7, #2]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001be8:	e002      	b.n	8001bf0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bea:	887a      	ldrh	r2, [r7, #2]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d141      	bne.n	8001c8e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c0a:	4b4b      	ldr	r3, [pc, #300]	@ (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c16:	d131      	bne.n	8001c7c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c18:	4b47      	ldr	r3, [pc, #284]	@ (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c1e:	4a46      	ldr	r2, [pc, #280]	@ (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c28:	4b43      	ldr	r3, [pc, #268]	@ (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c30:	4a41      	ldr	r2, [pc, #260]	@ (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c36:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c38:	4b40      	ldr	r3, [pc, #256]	@ (8001d3c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2232      	movs	r2, #50	@ 0x32
 8001c3e:	fb02 f303 	mul.w	r3, r2, r3
 8001c42:	4a3f      	ldr	r2, [pc, #252]	@ (8001d40 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c44:	fba2 2303 	umull	r2, r3, r2, r3
 8001c48:	0c9b      	lsrs	r3, r3, #18
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c4e:	e002      	b.n	8001c56 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c56:	4b38      	ldr	r3, [pc, #224]	@ (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c62:	d102      	bne.n	8001c6a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f2      	bne.n	8001c50 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c6a:	4b33      	ldr	r3, [pc, #204]	@ (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c76:	d158      	bne.n	8001d2a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e057      	b.n	8001d2c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c7c:	4b2e      	ldr	r3, [pc, #184]	@ (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c82:	4a2d      	ldr	r2, [pc, #180]	@ (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c8c:	e04d      	b.n	8001d2a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c94:	d141      	bne.n	8001d1a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c96:	4b28      	ldr	r3, [pc, #160]	@ (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ca2:	d131      	bne.n	8001d08 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ca4:	4b24      	ldr	r3, [pc, #144]	@ (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001caa:	4a23      	ldr	r2, [pc, #140]	@ (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cb0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cb4:	4b20      	ldr	r3, [pc, #128]	@ (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001cbc:	4a1e      	ldr	r2, [pc, #120]	@ (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cc2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d3c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2232      	movs	r2, #50	@ 0x32
 8001cca:	fb02 f303 	mul.w	r3, r2, r3
 8001cce:	4a1c      	ldr	r2, [pc, #112]	@ (8001d40 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd4:	0c9b      	lsrs	r3, r3, #18
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cda:	e002      	b.n	8001ce2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ce2:	4b15      	ldr	r3, [pc, #84]	@ (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cee:	d102      	bne.n	8001cf6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f2      	bne.n	8001cdc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cf6:	4b10      	ldr	r3, [pc, #64]	@ (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d02:	d112      	bne.n	8001d2a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e011      	b.n	8001d2c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d08:	4b0b      	ldr	r3, [pc, #44]	@ (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001d18:	e007      	b.n	8001d2a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d1a:	4b07      	ldr	r3, [pc, #28]	@ (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d22:	4a05      	ldr	r2, [pc, #20]	@ (8001d38 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d24:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d28:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	40007000 	.word	0x40007000
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	431bde83 	.word	0x431bde83

08001d44 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001d48:	4b05      	ldr	r3, [pc, #20]	@ (8001d60 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	4a04      	ldr	r2, [pc, #16]	@ (8001d60 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d52:	6093      	str	r3, [r2, #8]
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40007000 	.word	0x40007000

08001d64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e2fe      	b.n	8002374 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d075      	beq.n	8001e6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d82:	4b97      	ldr	r3, [pc, #604]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d8c:	4b94      	ldr	r3, [pc, #592]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	2b0c      	cmp	r3, #12
 8001d9a:	d102      	bne.n	8001da2 <HAL_RCC_OscConfig+0x3e>
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	2b03      	cmp	r3, #3
 8001da0:	d002      	beq.n	8001da8 <HAL_RCC_OscConfig+0x44>
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d10b      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da8:	4b8d      	ldr	r3, [pc, #564]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d05b      	beq.n	8001e6c <HAL_RCC_OscConfig+0x108>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d157      	bne.n	8001e6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e2d9      	b.n	8002374 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dc8:	d106      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x74>
 8001dca:	4b85      	ldr	r3, [pc, #532]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a84      	ldr	r2, [pc, #528]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001dd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	e01d      	b.n	8001e14 <HAL_RCC_OscConfig+0xb0>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001de0:	d10c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x98>
 8001de2:	4b7f      	ldr	r3, [pc, #508]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a7e      	ldr	r2, [pc, #504]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001de8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	4b7c      	ldr	r3, [pc, #496]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a7b      	ldr	r2, [pc, #492]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001df4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	e00b      	b.n	8001e14 <HAL_RCC_OscConfig+0xb0>
 8001dfc:	4b78      	ldr	r3, [pc, #480]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a77      	ldr	r2, [pc, #476]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001e02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	4b75      	ldr	r3, [pc, #468]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a74      	ldr	r2, [pc, #464]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001e0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d013      	beq.n	8001e44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1c:	f7ff fbc6 	bl	80015ac <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e24:	f7ff fbc2 	bl	80015ac <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b64      	cmp	r3, #100	@ 0x64
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e29e      	b.n	8002374 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e36:	4b6a      	ldr	r3, [pc, #424]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0f0      	beq.n	8001e24 <HAL_RCC_OscConfig+0xc0>
 8001e42:	e014      	b.n	8001e6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7ff fbb2 	bl	80015ac <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e4c:	f7ff fbae 	bl	80015ac <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b64      	cmp	r3, #100	@ 0x64
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e28a      	b.n	8002374 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e5e:	4b60      	ldr	r3, [pc, #384]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0xe8>
 8001e6a:	e000      	b.n	8001e6e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d075      	beq.n	8001f66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e7a:	4b59      	ldr	r3, [pc, #356]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
 8001e82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e84:	4b56      	ldr	r3, [pc, #344]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f003 0303 	and.w	r3, r3, #3
 8001e8c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	2b0c      	cmp	r3, #12
 8001e92:	d102      	bne.n	8001e9a <HAL_RCC_OscConfig+0x136>
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d002      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x13c>
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	d11f      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ea0:	4b4f      	ldr	r3, [pc, #316]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x154>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e25d      	b.n	8002374 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb8:	4b49      	ldr	r3, [pc, #292]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	061b      	lsls	r3, r3, #24
 8001ec6:	4946      	ldr	r1, [pc, #280]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ecc:	4b45      	ldr	r3, [pc, #276]	@ (8001fe4 <HAL_RCC_OscConfig+0x280>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fb1f 	bl	8001514 <HAL_InitTick>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d043      	beq.n	8001f64 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e249      	b.n	8002374 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d023      	beq.n	8001f30 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ee8:	4b3d      	ldr	r3, [pc, #244]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a3c      	ldr	r2, [pc, #240]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001eee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ef2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef4:	f7ff fb5a 	bl	80015ac <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001efc:	f7ff fb56 	bl	80015ac <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e232      	b.n	8002374 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f0e:	4b34      	ldr	r3, [pc, #208]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f0      	beq.n	8001efc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1a:	4b31      	ldr	r3, [pc, #196]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	061b      	lsls	r3, r3, #24
 8001f28:	492d      	ldr	r1, [pc, #180]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	604b      	str	r3, [r1, #4]
 8001f2e:	e01a      	b.n	8001f66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f30:	4b2b      	ldr	r3, [pc, #172]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a2a      	ldr	r2, [pc, #168]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001f36:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3c:	f7ff fb36 	bl	80015ac <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f44:	f7ff fb32 	bl	80015ac <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e20e      	b.n	8002374 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f56:	4b22      	ldr	r3, [pc, #136]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x1e0>
 8001f62:	e000      	b.n	8001f66 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f64:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d041      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d01c      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f7a:	4b19      	ldr	r3, [pc, #100]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f80:	4a17      	ldr	r2, [pc, #92]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8a:	f7ff fb0f 	bl	80015ac <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f92:	f7ff fb0b 	bl	80015ac <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e1e7      	b.n	8002374 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001fa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0ef      	beq.n	8001f92 <HAL_RCC_OscConfig+0x22e>
 8001fb2:	e020      	b.n	8001ff6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fba:	4a09      	ldr	r2, [pc, #36]	@ (8001fe0 <HAL_RCC_OscConfig+0x27c>)
 8001fbc:	f023 0301 	bic.w	r3, r3, #1
 8001fc0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc4:	f7ff faf2 	bl	80015ac <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fca:	e00d      	b.n	8001fe8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fcc:	f7ff faee 	bl	80015ac <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d906      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e1ca      	b.n	8002374 <HAL_RCC_OscConfig+0x610>
 8001fde:	bf00      	nop
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fe8:	4b8c      	ldr	r3, [pc, #560]	@ (800221c <HAL_RCC_OscConfig+0x4b8>)
 8001fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1ea      	bne.n	8001fcc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0304 	and.w	r3, r3, #4
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 80a6 	beq.w	8002150 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002004:	2300      	movs	r3, #0
 8002006:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002008:	4b84      	ldr	r3, [pc, #528]	@ (800221c <HAL_RCC_OscConfig+0x4b8>)
 800200a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <HAL_RCC_OscConfig+0x2b4>
 8002014:	2301      	movs	r3, #1
 8002016:	e000      	b.n	800201a <HAL_RCC_OscConfig+0x2b6>
 8002018:	2300      	movs	r3, #0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00d      	beq.n	800203a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800201e:	4b7f      	ldr	r3, [pc, #508]	@ (800221c <HAL_RCC_OscConfig+0x4b8>)
 8002020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002022:	4a7e      	ldr	r2, [pc, #504]	@ (800221c <HAL_RCC_OscConfig+0x4b8>)
 8002024:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002028:	6593      	str	r3, [r2, #88]	@ 0x58
 800202a:	4b7c      	ldr	r3, [pc, #496]	@ (800221c <HAL_RCC_OscConfig+0x4b8>)
 800202c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002036:	2301      	movs	r3, #1
 8002038:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800203a:	4b79      	ldr	r3, [pc, #484]	@ (8002220 <HAL_RCC_OscConfig+0x4bc>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002042:	2b00      	cmp	r3, #0
 8002044:	d118      	bne.n	8002078 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002046:	4b76      	ldr	r3, [pc, #472]	@ (8002220 <HAL_RCC_OscConfig+0x4bc>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a75      	ldr	r2, [pc, #468]	@ (8002220 <HAL_RCC_OscConfig+0x4bc>)
 800204c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002050:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002052:	f7ff faab 	bl	80015ac <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800205a:	f7ff faa7 	bl	80015ac <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e183      	b.n	8002374 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800206c:	4b6c      	ldr	r3, [pc, #432]	@ (8002220 <HAL_RCC_OscConfig+0x4bc>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d108      	bne.n	8002092 <HAL_RCC_OscConfig+0x32e>
 8002080:	4b66      	ldr	r3, [pc, #408]	@ (800221c <HAL_RCC_OscConfig+0x4b8>)
 8002082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002086:	4a65      	ldr	r2, [pc, #404]	@ (800221c <HAL_RCC_OscConfig+0x4b8>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002090:	e024      	b.n	80020dc <HAL_RCC_OscConfig+0x378>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2b05      	cmp	r3, #5
 8002098:	d110      	bne.n	80020bc <HAL_RCC_OscConfig+0x358>
 800209a:	4b60      	ldr	r3, [pc, #384]	@ (800221c <HAL_RCC_OscConfig+0x4b8>)
 800209c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a0:	4a5e      	ldr	r2, [pc, #376]	@ (800221c <HAL_RCC_OscConfig+0x4b8>)
 80020a2:	f043 0304 	orr.w	r3, r3, #4
 80020a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020aa:	4b5c      	ldr	r3, [pc, #368]	@ (800221c <HAL_RCC_OscConfig+0x4b8>)
 80020ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020b0:	4a5a      	ldr	r2, [pc, #360]	@ (800221c <HAL_RCC_OscConfig+0x4b8>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020ba:	e00f      	b.n	80020dc <HAL_RCC_OscConfig+0x378>
 80020bc:	4b57      	ldr	r3, [pc, #348]	@ (800221c <HAL_RCC_OscConfig+0x4b8>)
 80020be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c2:	4a56      	ldr	r2, [pc, #344]	@ (800221c <HAL_RCC_OscConfig+0x4b8>)
 80020c4:	f023 0301 	bic.w	r3, r3, #1
 80020c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020cc:	4b53      	ldr	r3, [pc, #332]	@ (800221c <HAL_RCC_OscConfig+0x4b8>)
 80020ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d2:	4a52      	ldr	r2, [pc, #328]	@ (800221c <HAL_RCC_OscConfig+0x4b8>)
 80020d4:	f023 0304 	bic.w	r3, r3, #4
 80020d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d016      	beq.n	8002112 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e4:	f7ff fa62 	bl	80015ac <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ea:	e00a      	b.n	8002102 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ec:	f7ff fa5e 	bl	80015ac <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e138      	b.n	8002374 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002102:	4b46      	ldr	r3, [pc, #280]	@ (800221c <HAL_RCC_OscConfig+0x4b8>)
 8002104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0ed      	beq.n	80020ec <HAL_RCC_OscConfig+0x388>
 8002110:	e015      	b.n	800213e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002112:	f7ff fa4b 	bl	80015ac <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002118:	e00a      	b.n	8002130 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800211a:	f7ff fa47 	bl	80015ac <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002128:	4293      	cmp	r3, r2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e121      	b.n	8002374 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002130:	4b3a      	ldr	r3, [pc, #232]	@ (800221c <HAL_RCC_OscConfig+0x4b8>)
 8002132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1ed      	bne.n	800211a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800213e:	7ffb      	ldrb	r3, [r7, #31]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d105      	bne.n	8002150 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002144:	4b35      	ldr	r3, [pc, #212]	@ (800221c <HAL_RCC_OscConfig+0x4b8>)
 8002146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002148:	4a34      	ldr	r2, [pc, #208]	@ (800221c <HAL_RCC_OscConfig+0x4b8>)
 800214a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800214e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0320 	and.w	r3, r3, #32
 8002158:	2b00      	cmp	r3, #0
 800215a:	d03c      	beq.n	80021d6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d01c      	beq.n	800219e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002164:	4b2d      	ldr	r3, [pc, #180]	@ (800221c <HAL_RCC_OscConfig+0x4b8>)
 8002166:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800216a:	4a2c      	ldr	r2, [pc, #176]	@ (800221c <HAL_RCC_OscConfig+0x4b8>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002174:	f7ff fa1a 	bl	80015ac <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800217c:	f7ff fa16 	bl	80015ac <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e0f2      	b.n	8002374 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800218e:	4b23      	ldr	r3, [pc, #140]	@ (800221c <HAL_RCC_OscConfig+0x4b8>)
 8002190:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0ef      	beq.n	800217c <HAL_RCC_OscConfig+0x418>
 800219c:	e01b      	b.n	80021d6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800219e:	4b1f      	ldr	r3, [pc, #124]	@ (800221c <HAL_RCC_OscConfig+0x4b8>)
 80021a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021a4:	4a1d      	ldr	r2, [pc, #116]	@ (800221c <HAL_RCC_OscConfig+0x4b8>)
 80021a6:	f023 0301 	bic.w	r3, r3, #1
 80021aa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ae:	f7ff f9fd 	bl	80015ac <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021b6:	f7ff f9f9 	bl	80015ac <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e0d5      	b.n	8002374 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021c8:	4b14      	ldr	r3, [pc, #80]	@ (800221c <HAL_RCC_OscConfig+0x4b8>)
 80021ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1ef      	bne.n	80021b6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 80c9 	beq.w	8002372 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021e0:	4b0e      	ldr	r3, [pc, #56]	@ (800221c <HAL_RCC_OscConfig+0x4b8>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 030c 	and.w	r3, r3, #12
 80021e8:	2b0c      	cmp	r3, #12
 80021ea:	f000 8083 	beq.w	80022f4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d15e      	bne.n	80022b4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f6:	4b09      	ldr	r3, [pc, #36]	@ (800221c <HAL_RCC_OscConfig+0x4b8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a08      	ldr	r2, [pc, #32]	@ (800221c <HAL_RCC_OscConfig+0x4b8>)
 80021fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002200:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002202:	f7ff f9d3 	bl	80015ac <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002208:	e00c      	b.n	8002224 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800220a:	f7ff f9cf 	bl	80015ac <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d905      	bls.n	8002224 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e0ab      	b.n	8002374 <HAL_RCC_OscConfig+0x610>
 800221c:	40021000 	.word	0x40021000
 8002220:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002224:	4b55      	ldr	r3, [pc, #340]	@ (800237c <HAL_RCC_OscConfig+0x618>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1ec      	bne.n	800220a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002230:	4b52      	ldr	r3, [pc, #328]	@ (800237c <HAL_RCC_OscConfig+0x618>)
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	4b52      	ldr	r3, [pc, #328]	@ (8002380 <HAL_RCC_OscConfig+0x61c>)
 8002236:	4013      	ands	r3, r2
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6a11      	ldr	r1, [r2, #32]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002240:	3a01      	subs	r2, #1
 8002242:	0112      	lsls	r2, r2, #4
 8002244:	4311      	orrs	r1, r2
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800224a:	0212      	lsls	r2, r2, #8
 800224c:	4311      	orrs	r1, r2
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002252:	0852      	lsrs	r2, r2, #1
 8002254:	3a01      	subs	r2, #1
 8002256:	0552      	lsls	r2, r2, #21
 8002258:	4311      	orrs	r1, r2
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800225e:	0852      	lsrs	r2, r2, #1
 8002260:	3a01      	subs	r2, #1
 8002262:	0652      	lsls	r2, r2, #25
 8002264:	4311      	orrs	r1, r2
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800226a:	06d2      	lsls	r2, r2, #27
 800226c:	430a      	orrs	r2, r1
 800226e:	4943      	ldr	r1, [pc, #268]	@ (800237c <HAL_RCC_OscConfig+0x618>)
 8002270:	4313      	orrs	r3, r2
 8002272:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002274:	4b41      	ldr	r3, [pc, #260]	@ (800237c <HAL_RCC_OscConfig+0x618>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a40      	ldr	r2, [pc, #256]	@ (800237c <HAL_RCC_OscConfig+0x618>)
 800227a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800227e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002280:	4b3e      	ldr	r3, [pc, #248]	@ (800237c <HAL_RCC_OscConfig+0x618>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	4a3d      	ldr	r2, [pc, #244]	@ (800237c <HAL_RCC_OscConfig+0x618>)
 8002286:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800228a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228c:	f7ff f98e 	bl	80015ac <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002294:	f7ff f98a 	bl	80015ac <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e066      	b.n	8002374 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022a6:	4b35      	ldr	r3, [pc, #212]	@ (800237c <HAL_RCC_OscConfig+0x618>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0f0      	beq.n	8002294 <HAL_RCC_OscConfig+0x530>
 80022b2:	e05e      	b.n	8002372 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b4:	4b31      	ldr	r3, [pc, #196]	@ (800237c <HAL_RCC_OscConfig+0x618>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a30      	ldr	r2, [pc, #192]	@ (800237c <HAL_RCC_OscConfig+0x618>)
 80022ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7ff f974 	bl	80015ac <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c8:	f7ff f970 	bl	80015ac <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e04c      	b.n	8002374 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022da:	4b28      	ldr	r3, [pc, #160]	@ (800237c <HAL_RCC_OscConfig+0x618>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80022e6:	4b25      	ldr	r3, [pc, #148]	@ (800237c <HAL_RCC_OscConfig+0x618>)
 80022e8:	68da      	ldr	r2, [r3, #12]
 80022ea:	4924      	ldr	r1, [pc, #144]	@ (800237c <HAL_RCC_OscConfig+0x618>)
 80022ec:	4b25      	ldr	r3, [pc, #148]	@ (8002384 <HAL_RCC_OscConfig+0x620>)
 80022ee:	4013      	ands	r3, r2
 80022f0:	60cb      	str	r3, [r1, #12]
 80022f2:	e03e      	b.n	8002372 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e039      	b.n	8002374 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002300:	4b1e      	ldr	r3, [pc, #120]	@ (800237c <HAL_RCC_OscConfig+0x618>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f003 0203 	and.w	r2, r3, #3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	429a      	cmp	r2, r3
 8002312:	d12c      	bne.n	800236e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231e:	3b01      	subs	r3, #1
 8002320:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002322:	429a      	cmp	r2, r3
 8002324:	d123      	bne.n	800236e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002330:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002332:	429a      	cmp	r2, r3
 8002334:	d11b      	bne.n	800236e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002340:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002342:	429a      	cmp	r2, r3
 8002344:	d113      	bne.n	800236e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002350:	085b      	lsrs	r3, r3, #1
 8002352:	3b01      	subs	r3, #1
 8002354:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002356:	429a      	cmp	r2, r3
 8002358:	d109      	bne.n	800236e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002364:	085b      	lsrs	r3, r3, #1
 8002366:	3b01      	subs	r3, #1
 8002368:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800236a:	429a      	cmp	r2, r3
 800236c:	d001      	beq.n	8002372 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	3720      	adds	r7, #32
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40021000 	.word	0x40021000
 8002380:	019f800c 	.word	0x019f800c
 8002384:	feeefffc 	.word	0xfeeefffc

08002388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e11e      	b.n	80025de <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023a0:	4b91      	ldr	r3, [pc, #580]	@ (80025e8 <HAL_RCC_ClockConfig+0x260>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d910      	bls.n	80023d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ae:	4b8e      	ldr	r3, [pc, #568]	@ (80025e8 <HAL_RCC_ClockConfig+0x260>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f023 020f 	bic.w	r2, r3, #15
 80023b6:	498c      	ldr	r1, [pc, #560]	@ (80025e8 <HAL_RCC_ClockConfig+0x260>)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023be:	4b8a      	ldr	r3, [pc, #552]	@ (80025e8 <HAL_RCC_ClockConfig+0x260>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d001      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e106      	b.n	80025de <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d073      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d129      	bne.n	8002438 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023e4:	4b81      	ldr	r3, [pc, #516]	@ (80025ec <HAL_RCC_ClockConfig+0x264>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0f4      	b.n	80025de <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80023f4:	f000 f99e 	bl	8002734 <RCC_GetSysClockFreqFromPLLSource>
 80023f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4a7c      	ldr	r2, [pc, #496]	@ (80025f0 <HAL_RCC_ClockConfig+0x268>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d93f      	bls.n	8002482 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002402:	4b7a      	ldr	r3, [pc, #488]	@ (80025ec <HAL_RCC_ClockConfig+0x264>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d009      	beq.n	8002422 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002416:	2b00      	cmp	r3, #0
 8002418:	d033      	beq.n	8002482 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800241e:	2b00      	cmp	r3, #0
 8002420:	d12f      	bne.n	8002482 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002422:	4b72      	ldr	r3, [pc, #456]	@ (80025ec <HAL_RCC_ClockConfig+0x264>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800242a:	4a70      	ldr	r2, [pc, #448]	@ (80025ec <HAL_RCC_ClockConfig+0x264>)
 800242c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002430:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002432:	2380      	movs	r3, #128	@ 0x80
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	e024      	b.n	8002482 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b02      	cmp	r3, #2
 800243e:	d107      	bne.n	8002450 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002440:	4b6a      	ldr	r3, [pc, #424]	@ (80025ec <HAL_RCC_ClockConfig+0x264>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d109      	bne.n	8002460 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e0c6      	b.n	80025de <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002450:	4b66      	ldr	r3, [pc, #408]	@ (80025ec <HAL_RCC_ClockConfig+0x264>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0be      	b.n	80025de <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002460:	f000 f8ce 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 8002464:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4a61      	ldr	r2, [pc, #388]	@ (80025f0 <HAL_RCC_ClockConfig+0x268>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d909      	bls.n	8002482 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800246e:	4b5f      	ldr	r3, [pc, #380]	@ (80025ec <HAL_RCC_ClockConfig+0x264>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002476:	4a5d      	ldr	r2, [pc, #372]	@ (80025ec <HAL_RCC_ClockConfig+0x264>)
 8002478:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800247c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800247e:	2380      	movs	r3, #128	@ 0x80
 8002480:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002482:	4b5a      	ldr	r3, [pc, #360]	@ (80025ec <HAL_RCC_ClockConfig+0x264>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f023 0203 	bic.w	r2, r3, #3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	4957      	ldr	r1, [pc, #348]	@ (80025ec <HAL_RCC_ClockConfig+0x264>)
 8002490:	4313      	orrs	r3, r2
 8002492:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002494:	f7ff f88a 	bl	80015ac <HAL_GetTick>
 8002498:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249a:	e00a      	b.n	80024b2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800249c:	f7ff f886 	bl	80015ac <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e095      	b.n	80025de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b2:	4b4e      	ldr	r3, [pc, #312]	@ (80025ec <HAL_RCC_ClockConfig+0x264>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 020c 	and.w	r2, r3, #12
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d1eb      	bne.n	800249c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d023      	beq.n	8002518 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024dc:	4b43      	ldr	r3, [pc, #268]	@ (80025ec <HAL_RCC_ClockConfig+0x264>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	4a42      	ldr	r2, [pc, #264]	@ (80025ec <HAL_RCC_ClockConfig+0x264>)
 80024e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024e6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0308 	and.w	r3, r3, #8
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d007      	beq.n	8002504 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80024f4:	4b3d      	ldr	r3, [pc, #244]	@ (80025ec <HAL_RCC_ClockConfig+0x264>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80024fc:	4a3b      	ldr	r2, [pc, #236]	@ (80025ec <HAL_RCC_ClockConfig+0x264>)
 80024fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002502:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002504:	4b39      	ldr	r3, [pc, #228]	@ (80025ec <HAL_RCC_ClockConfig+0x264>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	4936      	ldr	r1, [pc, #216]	@ (80025ec <HAL_RCC_ClockConfig+0x264>)
 8002512:	4313      	orrs	r3, r2
 8002514:	608b      	str	r3, [r1, #8]
 8002516:	e008      	b.n	800252a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	2b80      	cmp	r3, #128	@ 0x80
 800251c:	d105      	bne.n	800252a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800251e:	4b33      	ldr	r3, [pc, #204]	@ (80025ec <HAL_RCC_ClockConfig+0x264>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	4a32      	ldr	r2, [pc, #200]	@ (80025ec <HAL_RCC_ClockConfig+0x264>)
 8002524:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002528:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800252a:	4b2f      	ldr	r3, [pc, #188]	@ (80025e8 <HAL_RCC_ClockConfig+0x260>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 030f 	and.w	r3, r3, #15
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	429a      	cmp	r2, r3
 8002536:	d21d      	bcs.n	8002574 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002538:	4b2b      	ldr	r3, [pc, #172]	@ (80025e8 <HAL_RCC_ClockConfig+0x260>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f023 020f 	bic.w	r2, r3, #15
 8002540:	4929      	ldr	r1, [pc, #164]	@ (80025e8 <HAL_RCC_ClockConfig+0x260>)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	4313      	orrs	r3, r2
 8002546:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002548:	f7ff f830 	bl	80015ac <HAL_GetTick>
 800254c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800254e:	e00a      	b.n	8002566 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002550:	f7ff f82c 	bl	80015ac <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800255e:	4293      	cmp	r3, r2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e03b      	b.n	80025de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002566:	4b20      	ldr	r3, [pc, #128]	@ (80025e8 <HAL_RCC_ClockConfig+0x260>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	429a      	cmp	r2, r3
 8002572:	d1ed      	bne.n	8002550 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002580:	4b1a      	ldr	r3, [pc, #104]	@ (80025ec <HAL_RCC_ClockConfig+0x264>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4917      	ldr	r1, [pc, #92]	@ (80025ec <HAL_RCC_ClockConfig+0x264>)
 800258e:	4313      	orrs	r3, r2
 8002590:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d009      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800259e:	4b13      	ldr	r3, [pc, #76]	@ (80025ec <HAL_RCC_ClockConfig+0x264>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	490f      	ldr	r1, [pc, #60]	@ (80025ec <HAL_RCC_ClockConfig+0x264>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025b2:	f000 f825 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 80025b6:	4602      	mov	r2, r0
 80025b8:	4b0c      	ldr	r3, [pc, #48]	@ (80025ec <HAL_RCC_ClockConfig+0x264>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	490c      	ldr	r1, [pc, #48]	@ (80025f4 <HAL_RCC_ClockConfig+0x26c>)
 80025c4:	5ccb      	ldrb	r3, [r1, r3]
 80025c6:	f003 031f 	and.w	r3, r3, #31
 80025ca:	fa22 f303 	lsr.w	r3, r2, r3
 80025ce:	4a0a      	ldr	r2, [pc, #40]	@ (80025f8 <HAL_RCC_ClockConfig+0x270>)
 80025d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80025d2:	4b0a      	ldr	r3, [pc, #40]	@ (80025fc <HAL_RCC_ClockConfig+0x274>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fe ff9c 	bl	8001514 <HAL_InitTick>
 80025dc:	4603      	mov	r3, r0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40022000 	.word	0x40022000
 80025ec:	40021000 	.word	0x40021000
 80025f0:	04c4b400 	.word	0x04c4b400
 80025f4:	08004344 	.word	0x08004344
 80025f8:	20000000 	.word	0x20000000
 80025fc:	20000004 	.word	0x20000004

08002600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002600:	b480      	push	{r7}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002606:	4b2c      	ldr	r3, [pc, #176]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 030c 	and.w	r3, r3, #12
 800260e:	2b04      	cmp	r3, #4
 8002610:	d102      	bne.n	8002618 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002612:	4b2a      	ldr	r3, [pc, #168]	@ (80026bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	e047      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002618:	4b27      	ldr	r3, [pc, #156]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 030c 	and.w	r3, r3, #12
 8002620:	2b08      	cmp	r3, #8
 8002622:	d102      	bne.n	800262a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002624:	4b26      	ldr	r3, [pc, #152]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002626:	613b      	str	r3, [r7, #16]
 8002628:	e03e      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800262a:	4b23      	ldr	r3, [pc, #140]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	2b0c      	cmp	r3, #12
 8002634:	d136      	bne.n	80026a4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002636:	4b20      	ldr	r3, [pc, #128]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002640:	4b1d      	ldr	r3, [pc, #116]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	3301      	adds	r3, #1
 800264c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2b03      	cmp	r3, #3
 8002652:	d10c      	bne.n	800266e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002654:	4a1a      	ldr	r2, [pc, #104]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	fbb2 f3f3 	udiv	r3, r2, r3
 800265c:	4a16      	ldr	r2, [pc, #88]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800265e:	68d2      	ldr	r2, [r2, #12]
 8002660:	0a12      	lsrs	r2, r2, #8
 8002662:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002666:	fb02 f303 	mul.w	r3, r2, r3
 800266a:	617b      	str	r3, [r7, #20]
      break;
 800266c:	e00c      	b.n	8002688 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800266e:	4a13      	ldr	r2, [pc, #76]	@ (80026bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	fbb2 f3f3 	udiv	r3, r2, r3
 8002676:	4a10      	ldr	r2, [pc, #64]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002678:	68d2      	ldr	r2, [r2, #12]
 800267a:	0a12      	lsrs	r2, r2, #8
 800267c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002680:	fb02 f303 	mul.w	r3, r2, r3
 8002684:	617b      	str	r3, [r7, #20]
      break;
 8002686:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002688:	4b0b      	ldr	r3, [pc, #44]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	0e5b      	lsrs	r3, r3, #25
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	3301      	adds	r3, #1
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	e001      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80026a8:	693b      	ldr	r3, [r7, #16]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	371c      	adds	r7, #28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40021000 	.word	0x40021000
 80026bc:	00f42400 	.word	0x00f42400
 80026c0:	007a1200 	.word	0x007a1200

080026c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026c8:	4b03      	ldr	r3, [pc, #12]	@ (80026d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026ca:	681b      	ldr	r3, [r3, #0]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	20000000 	.word	0x20000000

080026dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026e0:	f7ff fff0 	bl	80026c4 <HAL_RCC_GetHCLKFreq>
 80026e4:	4602      	mov	r2, r0
 80026e6:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	0a1b      	lsrs	r3, r3, #8
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	4904      	ldr	r1, [pc, #16]	@ (8002704 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026f2:	5ccb      	ldrb	r3, [r1, r3]
 80026f4:	f003 031f 	and.w	r3, r3, #31
 80026f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40021000 	.word	0x40021000
 8002704:	08004354 	.word	0x08004354

08002708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800270c:	f7ff ffda 	bl	80026c4 <HAL_RCC_GetHCLKFreq>
 8002710:	4602      	mov	r2, r0
 8002712:	4b06      	ldr	r3, [pc, #24]	@ (800272c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	0adb      	lsrs	r3, r3, #11
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	4904      	ldr	r1, [pc, #16]	@ (8002730 <HAL_RCC_GetPCLK2Freq+0x28>)
 800271e:	5ccb      	ldrb	r3, [r1, r3]
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002728:	4618      	mov	r0, r3
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40021000 	.word	0x40021000
 8002730:	08004354 	.word	0x08004354

08002734 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002734:	b480      	push	{r7}
 8002736:	b087      	sub	sp, #28
 8002738:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800273a:	4b1e      	ldr	r3, [pc, #120]	@ (80027b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002744:	4b1b      	ldr	r3, [pc, #108]	@ (80027b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	091b      	lsrs	r3, r3, #4
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	3301      	adds	r3, #1
 8002750:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	2b03      	cmp	r3, #3
 8002756:	d10c      	bne.n	8002772 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002758:	4a17      	ldr	r2, [pc, #92]	@ (80027b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002760:	4a14      	ldr	r2, [pc, #80]	@ (80027b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002762:	68d2      	ldr	r2, [r2, #12]
 8002764:	0a12      	lsrs	r2, r2, #8
 8002766:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800276a:	fb02 f303 	mul.w	r3, r2, r3
 800276e:	617b      	str	r3, [r7, #20]
    break;
 8002770:	e00c      	b.n	800278c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002772:	4a12      	ldr	r2, [pc, #72]	@ (80027bc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	fbb2 f3f3 	udiv	r3, r2, r3
 800277a:	4a0e      	ldr	r2, [pc, #56]	@ (80027b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800277c:	68d2      	ldr	r2, [r2, #12]
 800277e:	0a12      	lsrs	r2, r2, #8
 8002780:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002784:	fb02 f303 	mul.w	r3, r2, r3
 8002788:	617b      	str	r3, [r7, #20]
    break;
 800278a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800278c:	4b09      	ldr	r3, [pc, #36]	@ (80027b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	0e5b      	lsrs	r3, r3, #25
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	3301      	adds	r3, #1
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80027a6:	687b      	ldr	r3, [r7, #4]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	371c      	adds	r7, #28
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	40021000 	.word	0x40021000
 80027b8:	007a1200 	.word	0x007a1200
 80027bc:	00f42400 	.word	0x00f42400

080027c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027c8:	2300      	movs	r3, #0
 80027ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027cc:	2300      	movs	r3, #0
 80027ce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 8098 	beq.w	800290e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027de:	2300      	movs	r3, #0
 80027e0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027e2:	4b43      	ldr	r3, [pc, #268]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10d      	bne.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ee:	4b40      	ldr	r3, [pc, #256]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f2:	4a3f      	ldr	r2, [pc, #252]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80027fa:	4b3d      	ldr	r3, [pc, #244]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002802:	60bb      	str	r3, [r7, #8]
 8002804:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002806:	2301      	movs	r3, #1
 8002808:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800280a:	4b3a      	ldr	r3, [pc, #232]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a39      	ldr	r2, [pc, #228]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002810:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002814:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002816:	f7fe fec9 	bl	80015ac <HAL_GetTick>
 800281a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800281c:	e009      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800281e:	f7fe fec5 	bl	80015ac <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d902      	bls.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	74fb      	strb	r3, [r7, #19]
        break;
 8002830:	e005      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002832:	4b30      	ldr	r3, [pc, #192]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0ef      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800283e:	7cfb      	ldrb	r3, [r7, #19]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d159      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002844:	4b2a      	ldr	r3, [pc, #168]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002846:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800284a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800284e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d01e      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	429a      	cmp	r2, r3
 800285e:	d019      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002860:	4b23      	ldr	r3, [pc, #140]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002866:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800286a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800286c:	4b20      	ldr	r3, [pc, #128]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800286e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002872:	4a1f      	ldr	r2, [pc, #124]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002874:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002878:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800287c:	4b1c      	ldr	r3, [pc, #112]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800287e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002882:	4a1b      	ldr	r2, [pc, #108]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002884:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002888:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800288c:	4a18      	ldr	r2, [pc, #96]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d016      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289e:	f7fe fe85 	bl	80015ac <HAL_GetTick>
 80028a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a4:	e00b      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a6:	f7fe fe81 	bl	80015ac <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d902      	bls.n	80028be <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	74fb      	strb	r3, [r7, #19]
            break;
 80028bc:	e006      	b.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028be:	4b0c      	ldr	r3, [pc, #48]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0ec      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80028cc:	7cfb      	ldrb	r3, [r7, #19]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10b      	bne.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028d2:	4b07      	ldr	r3, [pc, #28]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e0:	4903      	ldr	r1, [pc, #12]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80028e8:	e008      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028ea:	7cfb      	ldrb	r3, [r7, #19]
 80028ec:	74bb      	strb	r3, [r7, #18]
 80028ee:	e005      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80028f0:	40021000 	.word	0x40021000
 80028f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f8:	7cfb      	ldrb	r3, [r7, #19]
 80028fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028fc:	7c7b      	ldrb	r3, [r7, #17]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d105      	bne.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002902:	4ba6      	ldr	r3, [pc, #664]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002906:	4aa5      	ldr	r2, [pc, #660]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002908:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800290c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800291a:	4ba0      	ldr	r3, [pc, #640]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800291c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002920:	f023 0203 	bic.w	r2, r3, #3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	499c      	ldr	r1, [pc, #624]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800293c:	4b97      	ldr	r3, [pc, #604]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800293e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002942:	f023 020c 	bic.w	r2, r3, #12
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	4994      	ldr	r1, [pc, #592]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800295e:	4b8f      	ldr	r3, [pc, #572]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002964:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	498b      	ldr	r1, [pc, #556]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00a      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002980:	4b86      	ldr	r3, [pc, #536]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002986:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	4983      	ldr	r1, [pc, #524]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0320 	and.w	r3, r3, #32
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029a2:	4b7e      	ldr	r3, [pc, #504]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	497a      	ldr	r1, [pc, #488]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00a      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029c4:	4b75      	ldr	r3, [pc, #468]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ca:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	4972      	ldr	r1, [pc, #456]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00a      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029e6:	4b6d      	ldr	r3, [pc, #436]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	4969      	ldr	r1, [pc, #420]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00a      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a08:	4b64      	ldr	r3, [pc, #400]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a0e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	4961      	ldr	r1, [pc, #388]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00a      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a2a:	4b5c      	ldr	r3, [pc, #368]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a30:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a38:	4958      	ldr	r1, [pc, #352]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d015      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a4c:	4b53      	ldr	r3, [pc, #332]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a52:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a5a:	4950      	ldr	r1, [pc, #320]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a6a:	d105      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a6c:	4b4b      	ldr	r3, [pc, #300]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	4a4a      	ldr	r2, [pc, #296]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a76:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d015      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a84:	4b45      	ldr	r3, [pc, #276]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a8a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a92:	4942      	ldr	r1, [pc, #264]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002aa2:	d105      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aa4:	4b3d      	ldr	r3, [pc, #244]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	4a3c      	ldr	r2, [pc, #240]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002aae:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d015      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002abc:	4b37      	ldr	r3, [pc, #220]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aca:	4934      	ldr	r1, [pc, #208]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ada:	d105      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002adc:	4b2f      	ldr	r3, [pc, #188]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	4a2e      	ldr	r2, [pc, #184]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ae2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ae6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d015      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002af4:	4b29      	ldr	r3, [pc, #164]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002afa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b02:	4926      	ldr	r1, [pc, #152]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b12:	d105      	bne.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b14:	4b21      	ldr	r3, [pc, #132]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	4a20      	ldr	r2, [pc, #128]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b1e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d015      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b32:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b3a:	4918      	ldr	r1, [pc, #96]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b4a:	d105      	bne.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b4c:	4b13      	ldr	r3, [pc, #76]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	4a12      	ldr	r2, [pc, #72]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b56:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d015      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b64:	4b0d      	ldr	r3, [pc, #52]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b6a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b72:	490a      	ldr	r1, [pc, #40]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b82:	d105      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b84:	4b05      	ldr	r3, [pc, #20]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	4a04      	ldr	r2, [pc, #16]	@ (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b8e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002b90:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3718      	adds	r7, #24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40021000 	.word	0x40021000

08002ba0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e09d      	b.n	8002cee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d108      	bne.n	8002bcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bc2:	d009      	beq.n	8002bd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	61da      	str	r2, [r3, #28]
 8002bca:	e005      	b.n	8002bd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d106      	bne.n	8002bf8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7fe fb70 	bl	80012d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c18:	d902      	bls.n	8002c20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60fb      	str	r3, [r7, #12]
 8002c1e:	e002      	b.n	8002c26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002c2e:	d007      	beq.n	8002c40 <HAL_SPI_Init+0xa0>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c38:	d002      	beq.n	8002c40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	431a      	orrs	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c82:	ea42 0103 	orr.w	r1, r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c8a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	0c1b      	lsrs	r3, r3, #16
 8002c9c:	f003 0204 	and.w	r2, r3, #4
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002cbc:	ea42 0103 	orr.w	r1, r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	69da      	ldr	r2, [r3, #28]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cdc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b088      	sub	sp, #32
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	603b      	str	r3, [r7, #0]
 8002d02:	4613      	mov	r3, r2
 8002d04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d06:	2300      	movs	r3, #0
 8002d08:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_SPI_Transmit+0x22>
 8002d14:	2302      	movs	r3, #2
 8002d16:	e15f      	b.n	8002fd8 <HAL_SPI_Transmit+0x2e2>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d20:	f7fe fc44 	bl	80015ac <HAL_GetTick>
 8002d24:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d26:	88fb      	ldrh	r3, [r7, #6]
 8002d28:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d002      	beq.n	8002d3c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d36:	2302      	movs	r3, #2
 8002d38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d3a:	e148      	b.n	8002fce <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <HAL_SPI_Transmit+0x52>
 8002d42:	88fb      	ldrh	r3, [r7, #6]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d102      	bne.n	8002d4e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d4c:	e13f      	b.n	8002fce <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2203      	movs	r2, #3
 8002d52:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	88fa      	ldrh	r2, [r7, #6]
 8002d66:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	88fa      	ldrh	r2, [r7, #6]
 8002d6c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d98:	d10f      	bne.n	8002dba <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002da8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002db8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc4:	2b40      	cmp	r3, #64	@ 0x40
 8002dc6:	d007      	beq.n	8002dd8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002dd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002de0:	d94f      	bls.n	8002e82 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d002      	beq.n	8002df0 <HAL_SPI_Transmit+0xfa>
 8002dea:	8afb      	ldrh	r3, [r7, #22]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d142      	bne.n	8002e76 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df4:	881a      	ldrh	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e00:	1c9a      	adds	r2, r3, #2
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e14:	e02f      	b.n	8002e76 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d112      	bne.n	8002e4a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e28:	881a      	ldrh	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e34:	1c9a      	adds	r2, r3, #2
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e48:	e015      	b.n	8002e76 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e4a:	f7fe fbaf 	bl	80015ac <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d803      	bhi.n	8002e62 <HAL_SPI_Transmit+0x16c>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e60:	d102      	bne.n	8002e68 <HAL_SPI_Transmit+0x172>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d106      	bne.n	8002e76 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002e74:	e0ab      	b.n	8002fce <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1ca      	bne.n	8002e16 <HAL_SPI_Transmit+0x120>
 8002e80:	e080      	b.n	8002f84 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <HAL_SPI_Transmit+0x19a>
 8002e8a:	8afb      	ldrh	r3, [r7, #22]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d174      	bne.n	8002f7a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d912      	bls.n	8002ec0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e9e:	881a      	ldrh	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eaa:	1c9a      	adds	r2, r3, #2
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	3b02      	subs	r3, #2
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ebe:	e05c      	b.n	8002f7a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	330c      	adds	r3, #12
 8002eca:	7812      	ldrb	r2, [r2, #0]
 8002ecc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed2:	1c5a      	adds	r2, r3, #1
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002ee6:	e048      	b.n	8002f7a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d12b      	bne.n	8002f4e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d912      	bls.n	8002f26 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f04:	881a      	ldrh	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f10:	1c9a      	adds	r2, r3, #2
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	3b02      	subs	r3, #2
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f24:	e029      	b.n	8002f7a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	330c      	adds	r3, #12
 8002f30:	7812      	ldrb	r2, [r2, #0]
 8002f32:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f4c:	e015      	b.n	8002f7a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f4e:	f7fe fb2d 	bl	80015ac <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d803      	bhi.n	8002f66 <HAL_SPI_Transmit+0x270>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f64:	d102      	bne.n	8002f6c <HAL_SPI_Transmit+0x276>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d106      	bne.n	8002f7a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002f78:	e029      	b.n	8002fce <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1b1      	bne.n	8002ee8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	6839      	ldr	r1, [r7, #0]
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 f947 	bl	800321c <SPI_EndRxTxTransaction>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2220      	movs	r2, #32
 8002f98:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10a      	bne.n	8002fb8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d002      	beq.n	8002fc6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	77fb      	strb	r3, [r7, #31]
 8002fc4:	e003      	b.n	8002fce <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002fd6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3720      	adds	r7, #32
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b088      	sub	sp, #32
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	603b      	str	r3, [r7, #0]
 8002fec:	4613      	mov	r3, r2
 8002fee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ff0:	f7fe fadc 	bl	80015ac <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff8:	1a9b      	subs	r3, r3, r2
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003000:	f7fe fad4 	bl	80015ac <HAL_GetTick>
 8003004:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003006:	4b39      	ldr	r3, [pc, #228]	@ (80030ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	015b      	lsls	r3, r3, #5
 800300c:	0d1b      	lsrs	r3, r3, #20
 800300e:	69fa      	ldr	r2, [r7, #28]
 8003010:	fb02 f303 	mul.w	r3, r2, r3
 8003014:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003016:	e054      	b.n	80030c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301e:	d050      	beq.n	80030c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003020:	f7fe fac4 	bl	80015ac <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	429a      	cmp	r2, r3
 800302e:	d902      	bls.n	8003036 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d13d      	bne.n	80030b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003044:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800304e:	d111      	bne.n	8003074 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003058:	d004      	beq.n	8003064 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003062:	d107      	bne.n	8003074 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003072:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003078:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800307c:	d10f      	bne.n	800309e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800309c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e017      	b.n	80030e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	3b01      	subs	r3, #1
 80030c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	4013      	ands	r3, r2
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	bf0c      	ite	eq
 80030d2:	2301      	moveq	r3, #1
 80030d4:	2300      	movne	r3, #0
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	461a      	mov	r2, r3
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d19b      	bne.n	8003018 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3720      	adds	r7, #32
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20000000 	.word	0x20000000

080030f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08a      	sub	sp, #40	@ 0x28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
 80030fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80030fe:	2300      	movs	r3, #0
 8003100:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003102:	f7fe fa53 	bl	80015ac <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800310a:	1a9b      	subs	r3, r3, r2
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	4413      	add	r3, r2
 8003110:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003112:	f7fe fa4b 	bl	80015ac <HAL_GetTick>
 8003116:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	330c      	adds	r3, #12
 800311e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003120:	4b3d      	ldr	r3, [pc, #244]	@ (8003218 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	00da      	lsls	r2, r3, #3
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	0d1b      	lsrs	r3, r3, #20
 8003130:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003132:	fb02 f303 	mul.w	r3, r2, r3
 8003136:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003138:	e060      	b.n	80031fc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003140:	d107      	bne.n	8003152 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d104      	bne.n	8003152 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	b2db      	uxtb	r3, r3
 800314e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003150:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003158:	d050      	beq.n	80031fc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800315a:	f7fe fa27 	bl	80015ac <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003166:	429a      	cmp	r2, r3
 8003168:	d902      	bls.n	8003170 <SPI_WaitFifoStateUntilTimeout+0x80>
 800316a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316c:	2b00      	cmp	r3, #0
 800316e:	d13d      	bne.n	80031ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800317e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003188:	d111      	bne.n	80031ae <SPI_WaitFifoStateUntilTimeout+0xbe>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003192:	d004      	beq.n	800319e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800319c:	d107      	bne.n	80031ae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031b6:	d10f      	bne.n	80031d8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e010      	b.n	800320e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	3b01      	subs	r3, #1
 80031fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	4013      	ands	r3, r2
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	429a      	cmp	r2, r3
 800320a:	d196      	bne.n	800313a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3728      	adds	r7, #40	@ 0x28
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	20000000 	.word	0x20000000

0800321c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af02      	add	r7, sp, #8
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2200      	movs	r2, #0
 8003230:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f7ff ff5b 	bl	80030f0 <SPI_WaitFifoStateUntilTimeout>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d007      	beq.n	8003250 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003244:	f043 0220 	orr.w	r2, r3, #32
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e027      	b.n	80032a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2200      	movs	r2, #0
 8003258:	2180      	movs	r1, #128	@ 0x80
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f7ff fec0 	bl	8002fe0 <SPI_WaitFlagStateUntilTimeout>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d007      	beq.n	8003276 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800326a:	f043 0220 	orr.w	r2, r3, #32
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e014      	b.n	80032a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2200      	movs	r2, #0
 800327e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f7ff ff34 	bl	80030f0 <SPI_WaitFifoStateUntilTimeout>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d007      	beq.n	800329e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003292:	f043 0220 	orr.w	r2, r3, #32
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e000      	b.n	80032a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e042      	b.n	8003340 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d106      	bne.n	80032d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7fe f845 	bl	800135c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2224      	movs	r2, #36	@ 0x24
 80032d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0201 	bic.w	r2, r2, #1
 80032e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 fc90 	bl	8003c18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f9c1 	bl	8003680 <UART_SetConfig>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e01b      	b.n	8003340 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003316:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003326:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 fd0f 	bl	8003d5c <UART_CheckIdleState>
 800333e:	4603      	mov	r3, r0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08a      	sub	sp, #40	@ 0x28
 800334c:	af02      	add	r7, sp, #8
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	603b      	str	r3, [r7, #0]
 8003354:	4613      	mov	r3, r2
 8003356:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800335e:	2b20      	cmp	r3, #32
 8003360:	d17b      	bne.n	800345a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d002      	beq.n	800336e <HAL_UART_Transmit+0x26>
 8003368:	88fb      	ldrh	r3, [r7, #6]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e074      	b.n	800345c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2221      	movs	r2, #33	@ 0x21
 800337e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003382:	f7fe f913 	bl	80015ac <HAL_GetTick>
 8003386:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	88fa      	ldrh	r2, [r7, #6]
 800338c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	88fa      	ldrh	r2, [r7, #6]
 8003394:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033a0:	d108      	bne.n	80033b4 <HAL_UART_Transmit+0x6c>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d104      	bne.n	80033b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80033aa:	2300      	movs	r3, #0
 80033ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	61bb      	str	r3, [r7, #24]
 80033b2:	e003      	b.n	80033bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033bc:	e030      	b.n	8003420 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2200      	movs	r2, #0
 80033c6:	2180      	movs	r1, #128	@ 0x80
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 fd71 	bl	8003eb0 <UART_WaitOnFlagUntilTimeout>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d005      	beq.n	80033e0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2220      	movs	r2, #32
 80033d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e03d      	b.n	800345c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10b      	bne.n	80033fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	461a      	mov	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033f4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	3302      	adds	r3, #2
 80033fa:	61bb      	str	r3, [r7, #24]
 80033fc:	e007      	b.n	800340e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	781a      	ldrb	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	3301      	adds	r3, #1
 800340c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003414:	b29b      	uxth	r3, r3
 8003416:	3b01      	subs	r3, #1
 8003418:	b29a      	uxth	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003426:	b29b      	uxth	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1c8      	bne.n	80033be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	2200      	movs	r2, #0
 8003434:	2140      	movs	r1, #64	@ 0x40
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 fd3a 	bl	8003eb0 <UART_WaitOnFlagUntilTimeout>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d005      	beq.n	800344e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2220      	movs	r2, #32
 8003446:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e006      	b.n	800345c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2220      	movs	r2, #32
 8003452:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	e000      	b.n	800345c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800345a:	2302      	movs	r3, #2
  }
}
 800345c:	4618      	mov	r0, r3
 800345e:	3720      	adds	r7, #32
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b0a0      	sub	sp, #128	@ 0x80
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	65fb      	str	r3, [r7, #92]	@ 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003472:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003474:	e853 3f00 	ldrex	r3, [r3]
 8003478:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800347a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800347c:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8003480:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	461a      	mov	r2, r3
 8003488:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800348a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800348c:	667a      	str	r2, [r7, #100]	@ 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003490:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003492:	e841 2300 	strex	r3, r2, [r1]
 8003496:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8003498:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1e6      	bne.n	800346c <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	3308      	adds	r3, #8
 80034a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034a8:	e853 3f00 	ldrex	r3, [r3]
 80034ac:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80034ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034b0:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 80034b4:	f023 0301 	bic.w	r3, r3, #1
 80034b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	3308      	adds	r3, #8
 80034c0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80034c2:	657a      	str	r2, [r7, #84]	@ 0x54
 80034c4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80034c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80034ca:	e841 2300 	strex	r3, r2, [r1]
 80034ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80034d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1e3      	bne.n	800349e <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d118      	bne.n	8003510 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034e6:	e853 3f00 	ldrex	r3, [r3]
 80034ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80034ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ee:	f023 0310 	bic.w	r3, r3, #16
 80034f2:	677b      	str	r3, [r7, #116]	@ 0x74
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	461a      	mov	r2, r3
 80034fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80034fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003500:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003502:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003504:	e841 2300 	strex	r3, r2, [r1]
 8003508:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800350a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1e6      	bne.n	80034de <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800351a:	2b80      	cmp	r3, #128	@ 0x80
 800351c:	d137      	bne.n	800358e <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	3308      	adds	r3, #8
 8003524:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	e853 3f00 	ldrex	r3, [r3]
 800352c:	61fb      	str	r3, [r7, #28]
   return(result);
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003534:	673b      	str	r3, [r7, #112]	@ 0x70
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	3308      	adds	r3, #8
 800353c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800353e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003540:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003542:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003544:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003546:	e841 2300 	strex	r3, r2, [r1]
 800354a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800354c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1e5      	bne.n	800351e <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003556:	2b00      	cmp	r3, #0
 8003558:	d019      	beq.n	800358e <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800355e:	2200      	movs	r2, #0
 8003560:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003566:	4618      	mov	r0, r3
 8003568:	f7fe f931 	bl	80017ce <HAL_DMA_Abort>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00d      	beq.n	800358e <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003576:	4618      	mov	r0, r3
 8003578:	f7fe f982 	bl	8001880 <HAL_DMA_GetError>
 800357c:	4603      	mov	r3, r0
 800357e:	2b20      	cmp	r3, #32
 8003580:	d105      	bne.n	800358e <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2210      	movs	r2, #16
 8003586:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e073      	b.n	8003676 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003598:	2b40      	cmp	r3, #64	@ 0x40
 800359a:	d13b      	bne.n	8003614 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3308      	adds	r3, #8
 80035a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	e853 3f00 	ldrex	r3, [r3]
 80035aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	3308      	adds	r3, #8
 80035ba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80035bc:	61ba      	str	r2, [r7, #24]
 80035be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c0:	6979      	ldr	r1, [r7, #20]
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	e841 2300 	strex	r3, r2, [r1]
 80035c8:	613b      	str	r3, [r7, #16]
   return(result);
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1e5      	bne.n	800359c <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d01c      	beq.n	8003614 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035e0:	2200      	movs	r2, #0
 80035e2:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fe f8ef 	bl	80017ce <HAL_DMA_Abort>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00e      	beq.n	8003614 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fe f93f 	bl	8001880 <HAL_DMA_GetError>
 8003602:	4603      	mov	r3, r0
 8003604:	2b20      	cmp	r3, #32
 8003606:	d105      	bne.n	8003614 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2210      	movs	r2, #16
 800360c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e030      	b.n	8003676 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	220f      	movs	r2, #15
 800362a:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003630:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003634:	d107      	bne.n	8003646 <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	699a      	ldr	r2, [r3, #24]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f042 0210 	orr.w	r2, r2, #16
 8003644:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	699a      	ldr	r2, [r3, #24]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 0208 	orr.w	r2, r2, #8
 8003654:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2220      	movs	r2, #32
 800365a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2220      	movs	r2, #32
 8003662:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3780      	adds	r7, #128	@ 0x80
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003684:	b08c      	sub	sp, #48	@ 0x30
 8003686:	af00      	add	r7, sp, #0
 8003688:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	431a      	orrs	r2, r3
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	431a      	orrs	r2, r3
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	4bab      	ldr	r3, [pc, #684]	@ (800395c <UART_SetConfig+0x2dc>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	6812      	ldr	r2, [r2, #0]
 80036b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036b8:	430b      	orrs	r3, r1
 80036ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4aa0      	ldr	r2, [pc, #640]	@ (8003960 <UART_SetConfig+0x2e0>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d004      	beq.n	80036ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036e8:	4313      	orrs	r3, r2
 80036ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80036f6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	6812      	ldr	r2, [r2, #0]
 80036fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003700:	430b      	orrs	r3, r1
 8003702:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800370a:	f023 010f 	bic.w	r1, r3, #15
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a91      	ldr	r2, [pc, #580]	@ (8003964 <UART_SetConfig+0x2e4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d125      	bne.n	8003770 <UART_SetConfig+0xf0>
 8003724:	4b90      	ldr	r3, [pc, #576]	@ (8003968 <UART_SetConfig+0x2e8>)
 8003726:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	2b03      	cmp	r3, #3
 8003730:	d81a      	bhi.n	8003768 <UART_SetConfig+0xe8>
 8003732:	a201      	add	r2, pc, #4	@ (adr r2, 8003738 <UART_SetConfig+0xb8>)
 8003734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003738:	08003749 	.word	0x08003749
 800373c:	08003759 	.word	0x08003759
 8003740:	08003751 	.word	0x08003751
 8003744:	08003761 	.word	0x08003761
 8003748:	2301      	movs	r3, #1
 800374a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800374e:	e0d6      	b.n	80038fe <UART_SetConfig+0x27e>
 8003750:	2302      	movs	r3, #2
 8003752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003756:	e0d2      	b.n	80038fe <UART_SetConfig+0x27e>
 8003758:	2304      	movs	r3, #4
 800375a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800375e:	e0ce      	b.n	80038fe <UART_SetConfig+0x27e>
 8003760:	2308      	movs	r3, #8
 8003762:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003766:	e0ca      	b.n	80038fe <UART_SetConfig+0x27e>
 8003768:	2310      	movs	r3, #16
 800376a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800376e:	e0c6      	b.n	80038fe <UART_SetConfig+0x27e>
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a7d      	ldr	r2, [pc, #500]	@ (800396c <UART_SetConfig+0x2ec>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d138      	bne.n	80037ec <UART_SetConfig+0x16c>
 800377a:	4b7b      	ldr	r3, [pc, #492]	@ (8003968 <UART_SetConfig+0x2e8>)
 800377c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003780:	f003 030c 	and.w	r3, r3, #12
 8003784:	2b0c      	cmp	r3, #12
 8003786:	d82d      	bhi.n	80037e4 <UART_SetConfig+0x164>
 8003788:	a201      	add	r2, pc, #4	@ (adr r2, 8003790 <UART_SetConfig+0x110>)
 800378a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378e:	bf00      	nop
 8003790:	080037c5 	.word	0x080037c5
 8003794:	080037e5 	.word	0x080037e5
 8003798:	080037e5 	.word	0x080037e5
 800379c:	080037e5 	.word	0x080037e5
 80037a0:	080037d5 	.word	0x080037d5
 80037a4:	080037e5 	.word	0x080037e5
 80037a8:	080037e5 	.word	0x080037e5
 80037ac:	080037e5 	.word	0x080037e5
 80037b0:	080037cd 	.word	0x080037cd
 80037b4:	080037e5 	.word	0x080037e5
 80037b8:	080037e5 	.word	0x080037e5
 80037bc:	080037e5 	.word	0x080037e5
 80037c0:	080037dd 	.word	0x080037dd
 80037c4:	2300      	movs	r3, #0
 80037c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037ca:	e098      	b.n	80038fe <UART_SetConfig+0x27e>
 80037cc:	2302      	movs	r3, #2
 80037ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037d2:	e094      	b.n	80038fe <UART_SetConfig+0x27e>
 80037d4:	2304      	movs	r3, #4
 80037d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037da:	e090      	b.n	80038fe <UART_SetConfig+0x27e>
 80037dc:	2308      	movs	r3, #8
 80037de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037e2:	e08c      	b.n	80038fe <UART_SetConfig+0x27e>
 80037e4:	2310      	movs	r3, #16
 80037e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037ea:	e088      	b.n	80038fe <UART_SetConfig+0x27e>
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a5f      	ldr	r2, [pc, #380]	@ (8003970 <UART_SetConfig+0x2f0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d125      	bne.n	8003842 <UART_SetConfig+0x1c2>
 80037f6:	4b5c      	ldr	r3, [pc, #368]	@ (8003968 <UART_SetConfig+0x2e8>)
 80037f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003800:	2b30      	cmp	r3, #48	@ 0x30
 8003802:	d016      	beq.n	8003832 <UART_SetConfig+0x1b2>
 8003804:	2b30      	cmp	r3, #48	@ 0x30
 8003806:	d818      	bhi.n	800383a <UART_SetConfig+0x1ba>
 8003808:	2b20      	cmp	r3, #32
 800380a:	d00a      	beq.n	8003822 <UART_SetConfig+0x1a2>
 800380c:	2b20      	cmp	r3, #32
 800380e:	d814      	bhi.n	800383a <UART_SetConfig+0x1ba>
 8003810:	2b00      	cmp	r3, #0
 8003812:	d002      	beq.n	800381a <UART_SetConfig+0x19a>
 8003814:	2b10      	cmp	r3, #16
 8003816:	d008      	beq.n	800382a <UART_SetConfig+0x1aa>
 8003818:	e00f      	b.n	800383a <UART_SetConfig+0x1ba>
 800381a:	2300      	movs	r3, #0
 800381c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003820:	e06d      	b.n	80038fe <UART_SetConfig+0x27e>
 8003822:	2302      	movs	r3, #2
 8003824:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003828:	e069      	b.n	80038fe <UART_SetConfig+0x27e>
 800382a:	2304      	movs	r3, #4
 800382c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003830:	e065      	b.n	80038fe <UART_SetConfig+0x27e>
 8003832:	2308      	movs	r3, #8
 8003834:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003838:	e061      	b.n	80038fe <UART_SetConfig+0x27e>
 800383a:	2310      	movs	r3, #16
 800383c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003840:	e05d      	b.n	80038fe <UART_SetConfig+0x27e>
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a4b      	ldr	r2, [pc, #300]	@ (8003974 <UART_SetConfig+0x2f4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d125      	bne.n	8003898 <UART_SetConfig+0x218>
 800384c:	4b46      	ldr	r3, [pc, #280]	@ (8003968 <UART_SetConfig+0x2e8>)
 800384e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003852:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003856:	2bc0      	cmp	r3, #192	@ 0xc0
 8003858:	d016      	beq.n	8003888 <UART_SetConfig+0x208>
 800385a:	2bc0      	cmp	r3, #192	@ 0xc0
 800385c:	d818      	bhi.n	8003890 <UART_SetConfig+0x210>
 800385e:	2b80      	cmp	r3, #128	@ 0x80
 8003860:	d00a      	beq.n	8003878 <UART_SetConfig+0x1f8>
 8003862:	2b80      	cmp	r3, #128	@ 0x80
 8003864:	d814      	bhi.n	8003890 <UART_SetConfig+0x210>
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <UART_SetConfig+0x1f0>
 800386a:	2b40      	cmp	r3, #64	@ 0x40
 800386c:	d008      	beq.n	8003880 <UART_SetConfig+0x200>
 800386e:	e00f      	b.n	8003890 <UART_SetConfig+0x210>
 8003870:	2300      	movs	r3, #0
 8003872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003876:	e042      	b.n	80038fe <UART_SetConfig+0x27e>
 8003878:	2302      	movs	r3, #2
 800387a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800387e:	e03e      	b.n	80038fe <UART_SetConfig+0x27e>
 8003880:	2304      	movs	r3, #4
 8003882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003886:	e03a      	b.n	80038fe <UART_SetConfig+0x27e>
 8003888:	2308      	movs	r3, #8
 800388a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800388e:	e036      	b.n	80038fe <UART_SetConfig+0x27e>
 8003890:	2310      	movs	r3, #16
 8003892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003896:	e032      	b.n	80038fe <UART_SetConfig+0x27e>
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a30      	ldr	r2, [pc, #192]	@ (8003960 <UART_SetConfig+0x2e0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d12a      	bne.n	80038f8 <UART_SetConfig+0x278>
 80038a2:	4b31      	ldr	r3, [pc, #196]	@ (8003968 <UART_SetConfig+0x2e8>)
 80038a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80038ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038b0:	d01a      	beq.n	80038e8 <UART_SetConfig+0x268>
 80038b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038b6:	d81b      	bhi.n	80038f0 <UART_SetConfig+0x270>
 80038b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038bc:	d00c      	beq.n	80038d8 <UART_SetConfig+0x258>
 80038be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038c2:	d815      	bhi.n	80038f0 <UART_SetConfig+0x270>
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <UART_SetConfig+0x250>
 80038c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038cc:	d008      	beq.n	80038e0 <UART_SetConfig+0x260>
 80038ce:	e00f      	b.n	80038f0 <UART_SetConfig+0x270>
 80038d0:	2300      	movs	r3, #0
 80038d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038d6:	e012      	b.n	80038fe <UART_SetConfig+0x27e>
 80038d8:	2302      	movs	r3, #2
 80038da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038de:	e00e      	b.n	80038fe <UART_SetConfig+0x27e>
 80038e0:	2304      	movs	r3, #4
 80038e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038e6:	e00a      	b.n	80038fe <UART_SetConfig+0x27e>
 80038e8:	2308      	movs	r3, #8
 80038ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038ee:	e006      	b.n	80038fe <UART_SetConfig+0x27e>
 80038f0:	2310      	movs	r3, #16
 80038f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038f6:	e002      	b.n	80038fe <UART_SetConfig+0x27e>
 80038f8:	2310      	movs	r3, #16
 80038fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a17      	ldr	r2, [pc, #92]	@ (8003960 <UART_SetConfig+0x2e0>)
 8003904:	4293      	cmp	r3, r2
 8003906:	f040 80a8 	bne.w	8003a5a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800390a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800390e:	2b08      	cmp	r3, #8
 8003910:	d834      	bhi.n	800397c <UART_SetConfig+0x2fc>
 8003912:	a201      	add	r2, pc, #4	@ (adr r2, 8003918 <UART_SetConfig+0x298>)
 8003914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003918:	0800393d 	.word	0x0800393d
 800391c:	0800397d 	.word	0x0800397d
 8003920:	08003945 	.word	0x08003945
 8003924:	0800397d 	.word	0x0800397d
 8003928:	0800394b 	.word	0x0800394b
 800392c:	0800397d 	.word	0x0800397d
 8003930:	0800397d 	.word	0x0800397d
 8003934:	0800397d 	.word	0x0800397d
 8003938:	08003953 	.word	0x08003953
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800393c:	f7fe fece 	bl	80026dc <HAL_RCC_GetPCLK1Freq>
 8003940:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003942:	e021      	b.n	8003988 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003944:	4b0c      	ldr	r3, [pc, #48]	@ (8003978 <UART_SetConfig+0x2f8>)
 8003946:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003948:	e01e      	b.n	8003988 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800394a:	f7fe fe59 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 800394e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003950:	e01a      	b.n	8003988 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003952:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003956:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003958:	e016      	b.n	8003988 <UART_SetConfig+0x308>
 800395a:	bf00      	nop
 800395c:	cfff69f3 	.word	0xcfff69f3
 8003960:	40008000 	.word	0x40008000
 8003964:	40013800 	.word	0x40013800
 8003968:	40021000 	.word	0x40021000
 800396c:	40004400 	.word	0x40004400
 8003970:	40004800 	.word	0x40004800
 8003974:	40004c00 	.word	0x40004c00
 8003978:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003986:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 812a 	beq.w	8003be4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003994:	4a9e      	ldr	r2, [pc, #632]	@ (8003c10 <UART_SetConfig+0x590>)
 8003996:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800399a:	461a      	mov	r2, r3
 800399c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399e:	fbb3 f3f2 	udiv	r3, r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	4613      	mov	r3, r2
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	4413      	add	r3, r2
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d305      	bcc.n	80039c0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d903      	bls.n	80039c8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80039c6:	e10d      	b.n	8003be4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ca:	2200      	movs	r2, #0
 80039cc:	60bb      	str	r3, [r7, #8]
 80039ce:	60fa      	str	r2, [r7, #12]
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d4:	4a8e      	ldr	r2, [pc, #568]	@ (8003c10 <UART_SetConfig+0x590>)
 80039d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	2200      	movs	r2, #0
 80039de:	603b      	str	r3, [r7, #0]
 80039e0:	607a      	str	r2, [r7, #4]
 80039e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039ea:	f7fc fc15 	bl	8000218 <__aeabi_uldivmod>
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	4610      	mov	r0, r2
 80039f4:	4619      	mov	r1, r3
 80039f6:	f04f 0200 	mov.w	r2, #0
 80039fa:	f04f 0300 	mov.w	r3, #0
 80039fe:	020b      	lsls	r3, r1, #8
 8003a00:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003a04:	0202      	lsls	r2, r0, #8
 8003a06:	6979      	ldr	r1, [r7, #20]
 8003a08:	6849      	ldr	r1, [r1, #4]
 8003a0a:	0849      	lsrs	r1, r1, #1
 8003a0c:	2000      	movs	r0, #0
 8003a0e:	460c      	mov	r4, r1
 8003a10:	4605      	mov	r5, r0
 8003a12:	eb12 0804 	adds.w	r8, r2, r4
 8003a16:	eb43 0905 	adc.w	r9, r3, r5
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	469a      	mov	sl, r3
 8003a22:	4693      	mov	fp, r2
 8003a24:	4652      	mov	r2, sl
 8003a26:	465b      	mov	r3, fp
 8003a28:	4640      	mov	r0, r8
 8003a2a:	4649      	mov	r1, r9
 8003a2c:	f7fc fbf4 	bl	8000218 <__aeabi_uldivmod>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4613      	mov	r3, r2
 8003a36:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a3e:	d308      	bcc.n	8003a52 <UART_SetConfig+0x3d2>
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a46:	d204      	bcs.n	8003a52 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6a3a      	ldr	r2, [r7, #32]
 8003a4e:	60da      	str	r2, [r3, #12]
 8003a50:	e0c8      	b.n	8003be4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003a58:	e0c4      	b.n	8003be4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a62:	d167      	bne.n	8003b34 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003a64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d828      	bhi.n	8003abe <UART_SetConfig+0x43e>
 8003a6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a74 <UART_SetConfig+0x3f4>)
 8003a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a72:	bf00      	nop
 8003a74:	08003a99 	.word	0x08003a99
 8003a78:	08003aa1 	.word	0x08003aa1
 8003a7c:	08003aa9 	.word	0x08003aa9
 8003a80:	08003abf 	.word	0x08003abf
 8003a84:	08003aaf 	.word	0x08003aaf
 8003a88:	08003abf 	.word	0x08003abf
 8003a8c:	08003abf 	.word	0x08003abf
 8003a90:	08003abf 	.word	0x08003abf
 8003a94:	08003ab7 	.word	0x08003ab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a98:	f7fe fe20 	bl	80026dc <HAL_RCC_GetPCLK1Freq>
 8003a9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a9e:	e014      	b.n	8003aca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003aa0:	f7fe fe32 	bl	8002708 <HAL_RCC_GetPCLK2Freq>
 8003aa4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003aa6:	e010      	b.n	8003aca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aa8:	4b5a      	ldr	r3, [pc, #360]	@ (8003c14 <UART_SetConfig+0x594>)
 8003aaa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003aac:	e00d      	b.n	8003aca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aae:	f7fe fda7 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 8003ab2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ab4:	e009      	b.n	8003aca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ab6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003aba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003abc:	e005      	b.n	8003aca <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003ac8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 8089 	beq.w	8003be4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad6:	4a4e      	ldr	r2, [pc, #312]	@ (8003c10 <UART_SetConfig+0x590>)
 8003ad8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003adc:	461a      	mov	r2, r3
 8003ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ae4:	005a      	lsls	r2, r3, #1
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	085b      	lsrs	r3, r3, #1
 8003aec:	441a      	add	r2, r3
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	2b0f      	cmp	r3, #15
 8003afc:	d916      	bls.n	8003b2c <UART_SetConfig+0x4ac>
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b04:	d212      	bcs.n	8003b2c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	f023 030f 	bic.w	r3, r3, #15
 8003b0e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	085b      	lsrs	r3, r3, #1
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	8bfb      	ldrh	r3, [r7, #30]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	8bfa      	ldrh	r2, [r7, #30]
 8003b28:	60da      	str	r2, [r3, #12]
 8003b2a:	e05b      	b.n	8003be4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003b32:	e057      	b.n	8003be4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b34:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	d828      	bhi.n	8003b8e <UART_SetConfig+0x50e>
 8003b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b44 <UART_SetConfig+0x4c4>)
 8003b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b42:	bf00      	nop
 8003b44:	08003b69 	.word	0x08003b69
 8003b48:	08003b71 	.word	0x08003b71
 8003b4c:	08003b79 	.word	0x08003b79
 8003b50:	08003b8f 	.word	0x08003b8f
 8003b54:	08003b7f 	.word	0x08003b7f
 8003b58:	08003b8f 	.word	0x08003b8f
 8003b5c:	08003b8f 	.word	0x08003b8f
 8003b60:	08003b8f 	.word	0x08003b8f
 8003b64:	08003b87 	.word	0x08003b87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b68:	f7fe fdb8 	bl	80026dc <HAL_RCC_GetPCLK1Freq>
 8003b6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b6e:	e014      	b.n	8003b9a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b70:	f7fe fdca 	bl	8002708 <HAL_RCC_GetPCLK2Freq>
 8003b74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b76:	e010      	b.n	8003b9a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b78:	4b26      	ldr	r3, [pc, #152]	@ (8003c14 <UART_SetConfig+0x594>)
 8003b7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b7c:	e00d      	b.n	8003b9a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b7e:	f7fe fd3f 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 8003b82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b84:	e009      	b.n	8003b9a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b8c:	e005      	b.n	8003b9a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003b98:	bf00      	nop
    }

    if (pclk != 0U)
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d021      	beq.n	8003be4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	4a1a      	ldr	r2, [pc, #104]	@ (8003c10 <UART_SetConfig+0x590>)
 8003ba6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003baa:	461a      	mov	r2, r3
 8003bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bae:	fbb3 f2f2 	udiv	r2, r3, r2
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	085b      	lsrs	r3, r3, #1
 8003bb8:	441a      	add	r2, r3
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	2b0f      	cmp	r3, #15
 8003bc8:	d909      	bls.n	8003bde <UART_SetConfig+0x55e>
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bd0:	d205      	bcs.n	8003bde <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003bd2:	6a3b      	ldr	r3, [r7, #32]
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	60da      	str	r2, [r3, #12]
 8003bdc:	e002      	b.n	8003be4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003c00:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3730      	adds	r7, #48	@ 0x30
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c0e:	bf00      	nop
 8003c10:	0800435c 	.word	0x0800435c
 8003c14:	00f42400 	.word	0x00f42400

08003c18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c24:	f003 0308 	and.w	r3, r3, #8
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00a      	beq.n	8003c42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00a      	beq.n	8003c86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8a:	f003 0304 	and.w	r3, r3, #4
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00a      	beq.n	8003ca8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cac:	f003 0310 	and.w	r3, r3, #16
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cce:	f003 0320 	and.w	r3, r3, #32
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d01a      	beq.n	8003d2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d16:	d10a      	bne.n	8003d2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	605a      	str	r2, [r3, #4]
  }
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b098      	sub	sp, #96	@ 0x60
 8003d60:	af02      	add	r7, sp, #8
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d6c:	f7fd fc1e 	bl	80015ac <HAL_GetTick>
 8003d70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0308 	and.w	r3, r3, #8
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	d12f      	bne.n	8003de0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f88e 	bl	8003eb0 <UART_WaitOnFlagUntilTimeout>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d022      	beq.n	8003de0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003da2:	e853 3f00 	ldrex	r3, [r3]
 8003da6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003daa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dae:	653b      	str	r3, [r7, #80]	@ 0x50
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	461a      	mov	r2, r3
 8003db6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003db8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dba:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003dbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003dc0:	e841 2300 	strex	r3, r2, [r1]
 8003dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003dc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1e6      	bne.n	8003d9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e063      	b.n	8003ea8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d149      	bne.n	8003e82 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003df2:	9300      	str	r3, [sp, #0]
 8003df4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003df6:	2200      	movs	r2, #0
 8003df8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f857 	bl	8003eb0 <UART_WaitOnFlagUntilTimeout>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d03c      	beq.n	8003e82 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e10:	e853 3f00 	ldrex	r3, [r3]
 8003e14:	623b      	str	r3, [r7, #32]
   return(result);
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	461a      	mov	r2, r3
 8003e24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e26:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e28:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e2e:	e841 2300 	strex	r3, r2, [r1]
 8003e32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1e6      	bne.n	8003e08 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3308      	adds	r3, #8
 8003e40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	e853 3f00 	ldrex	r3, [r3]
 8003e48:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f023 0301 	bic.w	r3, r3, #1
 8003e50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3308      	adds	r3, #8
 8003e58:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e5a:	61fa      	str	r2, [r7, #28]
 8003e5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5e:	69b9      	ldr	r1, [r7, #24]
 8003e60:	69fa      	ldr	r2, [r7, #28]
 8003e62:	e841 2300 	strex	r3, r2, [r1]
 8003e66:	617b      	str	r3, [r7, #20]
   return(result);
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1e5      	bne.n	8003e3a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e012      	b.n	8003ea8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2220      	movs	r2, #32
 8003e86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3758      	adds	r7, #88	@ 0x58
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	603b      	str	r3, [r7, #0]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ec0:	e04f      	b.n	8003f62 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec8:	d04b      	beq.n	8003f62 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eca:	f7fd fb6f 	bl	80015ac <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d302      	bcc.n	8003ee0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e04e      	b.n	8003f82 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d037      	beq.n	8003f62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2b80      	cmp	r3, #128	@ 0x80
 8003ef6:	d034      	beq.n	8003f62 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	2b40      	cmp	r3, #64	@ 0x40
 8003efc:	d031      	beq.n	8003f62 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	69db      	ldr	r3, [r3, #28]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d110      	bne.n	8003f2e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2208      	movs	r2, #8
 8003f12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 f838 	bl	8003f8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2208      	movs	r2, #8
 8003f1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e029      	b.n	8003f82 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f3c:	d111      	bne.n	8003f62 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f000 f81e 	bl	8003f8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2220      	movs	r2, #32
 8003f52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e00f      	b.n	8003f82 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	69da      	ldr	r2, [r3, #28]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	bf0c      	ite	eq
 8003f72:	2301      	moveq	r3, #1
 8003f74:	2300      	movne	r3, #0
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	461a      	mov	r2, r3
 8003f7a:	79fb      	ldrb	r3, [r7, #7]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d0a0      	beq.n	8003ec2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b095      	sub	sp, #84	@ 0x54
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f9a:	e853 3f00 	ldrex	r3, [r3]
 8003f9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	461a      	mov	r2, r3
 8003fae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fb2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003fb6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003fb8:	e841 2300 	strex	r3, r2, [r1]
 8003fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1e6      	bne.n	8003f92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3308      	adds	r3, #8
 8003fca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
 8003fce:	e853 3f00 	ldrex	r3, [r3]
 8003fd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fda:	f023 0301 	bic.w	r3, r3, #1
 8003fde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	3308      	adds	r3, #8
 8003fe6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fe8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ff0:	e841 2300 	strex	r3, r2, [r1]
 8003ff4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1e3      	bne.n	8003fc4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004000:	2b01      	cmp	r3, #1
 8004002:	d118      	bne.n	8004036 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	e853 3f00 	ldrex	r3, [r3]
 8004010:	60bb      	str	r3, [r7, #8]
   return(result);
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	f023 0310 	bic.w	r3, r3, #16
 8004018:	647b      	str	r3, [r7, #68]	@ 0x44
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	461a      	mov	r2, r3
 8004020:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004022:	61bb      	str	r3, [r7, #24]
 8004024:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004026:	6979      	ldr	r1, [r7, #20]
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	e841 2300 	strex	r3, r2, [r1]
 800402e:	613b      	str	r3, [r7, #16]
   return(result);
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1e6      	bne.n	8004004 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2220      	movs	r2, #32
 800403a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800404a:	bf00      	nop
 800404c:	3754      	adds	r7, #84	@ 0x54
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004056:	b480      	push	{r7}
 8004058:	b085      	sub	sp, #20
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_UARTEx_DisableFifoMode+0x16>
 8004068:	2302      	movs	r3, #2
 800406a:	e027      	b.n	80040bc <HAL_UARTEx_DisableFifoMode+0x66>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2224      	movs	r2, #36	@ 0x24
 8004078:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 0201 	bic.w	r2, r2, #1
 8004092:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800409a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2220      	movs	r2, #32
 80040ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d101      	bne.n	80040e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80040dc:	2302      	movs	r3, #2
 80040de:	e02d      	b.n	800413c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2224      	movs	r2, #36	@ 0x24
 80040ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0201 	bic.w	r2, r2, #1
 8004106:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f84f 	bl	80041c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2220      	movs	r2, #32
 800412e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004154:	2b01      	cmp	r3, #1
 8004156:	d101      	bne.n	800415c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004158:	2302      	movs	r3, #2
 800415a:	e02d      	b.n	80041b8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2224      	movs	r2, #36	@ 0x24
 8004168:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0201 	bic.w	r2, r2, #1
 8004182:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f811 	bl	80041c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2220      	movs	r2, #32
 80041aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d108      	bne.n	80041e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80041e0:	e031      	b.n	8004246 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80041e2:	2308      	movs	r3, #8
 80041e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80041e6:	2308      	movs	r3, #8
 80041e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	0e5b      	lsrs	r3, r3, #25
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	0f5b      	lsrs	r3, r3, #29
 8004202:	b2db      	uxtb	r3, r3
 8004204:	f003 0307 	and.w	r3, r3, #7
 8004208:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800420a:	7bbb      	ldrb	r3, [r7, #14]
 800420c:	7b3a      	ldrb	r2, [r7, #12]
 800420e:	4911      	ldr	r1, [pc, #68]	@ (8004254 <UARTEx_SetNbDataToProcess+0x94>)
 8004210:	5c8a      	ldrb	r2, [r1, r2]
 8004212:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004216:	7b3a      	ldrb	r2, [r7, #12]
 8004218:	490f      	ldr	r1, [pc, #60]	@ (8004258 <UARTEx_SetNbDataToProcess+0x98>)
 800421a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800421c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004220:	b29a      	uxth	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004228:	7bfb      	ldrb	r3, [r7, #15]
 800422a:	7b7a      	ldrb	r2, [r7, #13]
 800422c:	4909      	ldr	r1, [pc, #36]	@ (8004254 <UARTEx_SetNbDataToProcess+0x94>)
 800422e:	5c8a      	ldrb	r2, [r1, r2]
 8004230:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004234:	7b7a      	ldrb	r2, [r7, #13]
 8004236:	4908      	ldr	r1, [pc, #32]	@ (8004258 <UARTEx_SetNbDataToProcess+0x98>)
 8004238:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800423a:	fb93 f3f2 	sdiv	r3, r3, r2
 800423e:	b29a      	uxth	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004246:	bf00      	nop
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	08004374 	.word	0x08004374
 8004258:	0800437c 	.word	0x0800437c

0800425c <memset>:
 800425c:	4402      	add	r2, r0
 800425e:	4603      	mov	r3, r0
 8004260:	4293      	cmp	r3, r2
 8004262:	d100      	bne.n	8004266 <memset+0xa>
 8004264:	4770      	bx	lr
 8004266:	f803 1b01 	strb.w	r1, [r3], #1
 800426a:	e7f9      	b.n	8004260 <memset+0x4>

0800426c <__libc_init_array>:
 800426c:	b570      	push	{r4, r5, r6, lr}
 800426e:	4d0d      	ldr	r5, [pc, #52]	@ (80042a4 <__libc_init_array+0x38>)
 8004270:	4c0d      	ldr	r4, [pc, #52]	@ (80042a8 <__libc_init_array+0x3c>)
 8004272:	1b64      	subs	r4, r4, r5
 8004274:	10a4      	asrs	r4, r4, #2
 8004276:	2600      	movs	r6, #0
 8004278:	42a6      	cmp	r6, r4
 800427a:	d109      	bne.n	8004290 <__libc_init_array+0x24>
 800427c:	4d0b      	ldr	r5, [pc, #44]	@ (80042ac <__libc_init_array+0x40>)
 800427e:	4c0c      	ldr	r4, [pc, #48]	@ (80042b0 <__libc_init_array+0x44>)
 8004280:	f000 f818 	bl	80042b4 <_init>
 8004284:	1b64      	subs	r4, r4, r5
 8004286:	10a4      	asrs	r4, r4, #2
 8004288:	2600      	movs	r6, #0
 800428a:	42a6      	cmp	r6, r4
 800428c:	d105      	bne.n	800429a <__libc_init_array+0x2e>
 800428e:	bd70      	pop	{r4, r5, r6, pc}
 8004290:	f855 3b04 	ldr.w	r3, [r5], #4
 8004294:	4798      	blx	r3
 8004296:	3601      	adds	r6, #1
 8004298:	e7ee      	b.n	8004278 <__libc_init_array+0xc>
 800429a:	f855 3b04 	ldr.w	r3, [r5], #4
 800429e:	4798      	blx	r3
 80042a0:	3601      	adds	r6, #1
 80042a2:	e7f2      	b.n	800428a <__libc_init_array+0x1e>
 80042a4:	0800438c 	.word	0x0800438c
 80042a8:	0800438c 	.word	0x0800438c
 80042ac:	0800438c 	.word	0x0800438c
 80042b0:	08004390 	.word	0x08004390

080042b4 <_init>:
 80042b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b6:	bf00      	nop
 80042b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ba:	bc08      	pop	{r3}
 80042bc:	469e      	mov	lr, r3
 80042be:	4770      	bx	lr

080042c0 <_fini>:
 80042c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c2:	bf00      	nop
 80042c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042c6:	bc08      	pop	{r3}
 80042c8:	469e      	mov	lr, r3
 80042ca:	4770      	bx	lr

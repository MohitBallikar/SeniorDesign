
Gameinator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005248  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  08005428  08005428  00006428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800568c  0800568c  00007078  2**0
                  CONTENTS
  4 .ARM          00000008  0800568c  0800568c  0000668c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005694  08005694  00007078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005694  08005694  00006694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005698  08005698  00006698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800569c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f0  20000078  08005714  00007078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  08005714  00007568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f65c  00000000  00000000  000070a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002498  00000000  00000000  00016704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  00018ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f7  00000000  00000000  000198a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e6f9  00000000  00000000  0001a297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b38  00000000  00000000  00038990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bab28  00000000  00000000  000494c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00103ff0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ec8  00000000  00000000  00104034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00107efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005410 	.word	0x08005410

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	08005410 	.word	0x08005410

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <interpreter>:
char command[MAX_COMMAND_LEN];
char field1[MAX_FIELD_LEN];
char field2[MAX_FIELD_LEN];

void interpreter(uint8_t *Rx_Data)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	char *data = (char *)Rx_Data;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	60fb      	str	r3, [r7, #12]
	char *token;
	int tokenIndex = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]

	token = strtok(data, " ");
 80005e0:	4921      	ldr	r1, [pc, #132]	@ (8000668 <interpreter+0x98>)
 80005e2:	68f8      	ldr	r0, [r7, #12]
 80005e4:	f004 f826 	bl	8004634 <strtok>
 80005e8:	6178      	str	r0, [r7, #20]
	while (token!=NULL)
 80005ea:	e030      	b.n	800064e <interpreter+0x7e>
	{
		switch (tokenIndex)
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	2b02      	cmp	r3, #2
 80005f0:	d01b      	beq.n	800062a <interpreter+0x5a>
 80005f2:	693b      	ldr	r3, [r7, #16]
 80005f4:	2b02      	cmp	r3, #2
 80005f6:	dc21      	bgt.n	800063c <interpreter+0x6c>
 80005f8:	693b      	ldr	r3, [r7, #16]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d003      	beq.n	8000606 <interpreter+0x36>
 80005fe:	693b      	ldr	r3, [r7, #16]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d009      	beq.n	8000618 <interpreter+0x48>
			case 2:
				strncpy(field2, token, MAX_FIELD_LEN -1);
				field2[MAX_FIELD_LEN-1]='\0';
				break;
			default:
				break;
 8000604:	e01a      	b.n	800063c <interpreter+0x6c>
				strncpy(command, token, MAX_COMMAND_LEN - 1);
 8000606:	2213      	movs	r2, #19
 8000608:	6979      	ldr	r1, [r7, #20]
 800060a:	4818      	ldr	r0, [pc, #96]	@ (800066c <interpreter+0x9c>)
 800060c:	f003 ffff 	bl	800460e <strncpy>
				command[MAX_COMMAND_LEN-1]='\0';
 8000610:	4b16      	ldr	r3, [pc, #88]	@ (800066c <interpreter+0x9c>)
 8000612:	2200      	movs	r2, #0
 8000614:	74da      	strb	r2, [r3, #19]
				break;
 8000616:	e012      	b.n	800063e <interpreter+0x6e>
				strncpy(field1, token, MAX_FIELD_LEN -1);
 8000618:	2213      	movs	r2, #19
 800061a:	6979      	ldr	r1, [r7, #20]
 800061c:	4814      	ldr	r0, [pc, #80]	@ (8000670 <interpreter+0xa0>)
 800061e:	f003 fff6 	bl	800460e <strncpy>
				field1[MAX_FIELD_LEN-1]='\0';
 8000622:	4b13      	ldr	r3, [pc, #76]	@ (8000670 <interpreter+0xa0>)
 8000624:	2200      	movs	r2, #0
 8000626:	74da      	strb	r2, [r3, #19]
				break;
 8000628:	e009      	b.n	800063e <interpreter+0x6e>
				strncpy(field2, token, MAX_FIELD_LEN -1);
 800062a:	2213      	movs	r2, #19
 800062c:	6979      	ldr	r1, [r7, #20]
 800062e:	4811      	ldr	r0, [pc, #68]	@ (8000674 <interpreter+0xa4>)
 8000630:	f003 ffed 	bl	800460e <strncpy>
				field2[MAX_FIELD_LEN-1]='\0';
 8000634:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <interpreter+0xa4>)
 8000636:	2200      	movs	r2, #0
 8000638:	74da      	strb	r2, [r3, #19]
				break;
 800063a:	e000      	b.n	800063e <interpreter+0x6e>
				break;
 800063c:	bf00      	nop
		}
		token = strtok(NULL," ");
 800063e:	490a      	ldr	r1, [pc, #40]	@ (8000668 <interpreter+0x98>)
 8000640:	2000      	movs	r0, #0
 8000642:	f003 fff7 	bl	8004634 <strtok>
 8000646:	6178      	str	r0, [r7, #20]
		tokenIndex++;
 8000648:	693b      	ldr	r3, [r7, #16]
 800064a:	3301      	adds	r3, #1
 800064c:	613b      	str	r3, [r7, #16]
	while (token!=NULL)
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d1cb      	bne.n	80005ec <interpreter+0x1c>
	}
	decider(command,field1,field2);
 8000654:	4a07      	ldr	r2, [pc, #28]	@ (8000674 <interpreter+0xa4>)
 8000656:	4906      	ldr	r1, [pc, #24]	@ (8000670 <interpreter+0xa0>)
 8000658:	4804      	ldr	r0, [pc, #16]	@ (800066c <interpreter+0x9c>)
 800065a:	f000 f80d 	bl	8000678 <decider>
}
 800065e:	bf00      	nop
 8000660:	3718      	adds	r7, #24
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	08005428 	.word	0x08005428
 800066c:	20000094 	.word	0x20000094
 8000670:	200000a8 	.word	0x200000a8
 8000674:	200000bc 	.word	0x200000bc

08000678 <decider>:

void decider(char *command,char *field1,char *field2)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
	if(strcmp(command,"SETLED")==0)
 8000684:	4907      	ldr	r1, [pc, #28]	@ (80006a4 <decider+0x2c>)
 8000686:	68f8      	ldr	r0, [r7, #12]
 8000688:	f7ff fdca 	bl	8000220 <strcmp>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d103      	bne.n	800069a <decider+0x22>
	{
		ledsetter(field1, field2);
 8000692:	6879      	ldr	r1, [r7, #4]
 8000694:	68b8      	ldr	r0, [r7, #8]
 8000696:	f000 f807 	bl	80006a8 <ledsetter>
	}
}
 800069a:	bf00      	nop
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	0800542c 	.word	0x0800542c

080006a8 <ledsetter>:

void ledsetter(char *field1,char *field2)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
	int index = atoi(field1);
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f003 fe16 	bl	80042e4 <atoi>
 80006b8:	60f8      	str	r0, [r7, #12]

	if(strcmp(field2,"R")==0)
 80006ba:	4921      	ldr	r1, [pc, #132]	@ (8000740 <ledsetter+0x98>)
 80006bc:	6838      	ldr	r0, [r7, #0]
 80006be:	f7ff fdaf 	bl	8000220 <strcmp>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d108      	bne.n	80006da <ledsetter+0x32>
	{
		setLED(index, 80, 0, 0);
 80006c8:	2300      	movs	r3, #0
 80006ca:	2200      	movs	r2, #0
 80006cc:	2150      	movs	r1, #80	@ 0x50
 80006ce:	68f8      	ldr	r0, [r7, #12]
 80006d0:	f000 f83e 	bl	8000750 <setLED>
		WS2812_Send();
 80006d4:	f000 f8aa 	bl	800082c <WS2812_Send>
	{
		setLED(index, 80, 80, 0);
		WS2812_Send();
	}

}
 80006d8:	e02e      	b.n	8000738 <ledsetter+0x90>
	else if(strcmp(field2,"G")==0)
 80006da:	491a      	ldr	r1, [pc, #104]	@ (8000744 <ledsetter+0x9c>)
 80006dc:	6838      	ldr	r0, [r7, #0]
 80006de:	f7ff fd9f 	bl	8000220 <strcmp>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d108      	bne.n	80006fa <ledsetter+0x52>
		setLED(index, 0, 80, 0);
 80006e8:	2300      	movs	r3, #0
 80006ea:	2250      	movs	r2, #80	@ 0x50
 80006ec:	2100      	movs	r1, #0
 80006ee:	68f8      	ldr	r0, [r7, #12]
 80006f0:	f000 f82e 	bl	8000750 <setLED>
		WS2812_Send();
 80006f4:	f000 f89a 	bl	800082c <WS2812_Send>
}
 80006f8:	e01e      	b.n	8000738 <ledsetter+0x90>
	else if(strcmp(field2,"B")==0)
 80006fa:	4913      	ldr	r1, [pc, #76]	@ (8000748 <ledsetter+0xa0>)
 80006fc:	6838      	ldr	r0, [r7, #0]
 80006fe:	f7ff fd8f 	bl	8000220 <strcmp>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d108      	bne.n	800071a <ledsetter+0x72>
		setLED(index, 0, 0, 80);
 8000708:	2350      	movs	r3, #80	@ 0x50
 800070a:	2200      	movs	r2, #0
 800070c:	2100      	movs	r1, #0
 800070e:	68f8      	ldr	r0, [r7, #12]
 8000710:	f000 f81e 	bl	8000750 <setLED>
		WS2812_Send();
 8000714:	f000 f88a 	bl	800082c <WS2812_Send>
}
 8000718:	e00e      	b.n	8000738 <ledsetter+0x90>
	else if(strcmp(field2,"Y")==0)
 800071a:	490c      	ldr	r1, [pc, #48]	@ (800074c <ledsetter+0xa4>)
 800071c:	6838      	ldr	r0, [r7, #0]
 800071e:	f7ff fd7f 	bl	8000220 <strcmp>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d107      	bne.n	8000738 <ledsetter+0x90>
		setLED(index, 80, 80, 0);
 8000728:	2300      	movs	r3, #0
 800072a:	2250      	movs	r2, #80	@ 0x50
 800072c:	2150      	movs	r1, #80	@ 0x50
 800072e:	68f8      	ldr	r0, [r7, #12]
 8000730:	f000 f80e 	bl	8000750 <setLED>
		WS2812_Send();
 8000734:	f000 f87a 	bl	800082c <WS2812_Send>
}
 8000738:	bf00      	nop
 800073a:	3710      	adds	r7, #16
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	08005434 	.word	0x08005434
 8000744:	08005438 	.word	0x08005438
 8000748:	0800543c 	.word	0x0800543c
 800074c:	08005440 	.word	0x08005440

08000750 <setLED>:

extern SPI_HandleTypeDef hspi1;


void setLED (int led, int RED, int GREEN, int BLUE)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
 800075c:	603b      	str	r3, [r7, #0]
	LED_Data[led][0] = led;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	b2d9      	uxtb	r1, r3
 8000762:	4a11      	ldr	r2, [pc, #68]	@ (80007a8 <setLED+0x58>)
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[led][1] = GREEN;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	b2d9      	uxtb	r1, r3
 800076e:	4a0e      	ldr	r2, [pc, #56]	@ (80007a8 <setLED+0x58>)
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	4413      	add	r3, r2
 8000776:	460a      	mov	r2, r1
 8000778:	705a      	strb	r2, [r3, #1]
	LED_Data[led][2] = RED;
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	b2d9      	uxtb	r1, r3
 800077e:	4a0a      	ldr	r2, [pc, #40]	@ (80007a8 <setLED+0x58>)
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	4413      	add	r3, r2
 8000786:	460a      	mov	r2, r1
 8000788:	709a      	strb	r2, [r3, #2]
	LED_Data[led][3] = BLUE;
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	b2d9      	uxtb	r1, r3
 800078e:	4a06      	ldr	r2, [pc, #24]	@ (80007a8 <setLED+0x58>)
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	4413      	add	r3, r2
 8000796:	460a      	mov	r2, r1
 8000798:	70da      	strb	r2, [r3, #3]
}
 800079a:	bf00      	nop
 800079c:	3714      	adds	r7, #20
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	200000d0 	.word	0x200000d0

080007ac <ws2812_spi>:


void ws2812_spi (int GREEN, int RED, int BLUE)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08e      	sub	sp, #56	@ 0x38
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
	uint32_t color = GREEN<<16 | RED<<8 | BLUE;
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	041a      	lsls	r2, r3, #16
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	021b      	lsls	r3, r3, #8
 80007c0:	431a      	orrs	r2, r3
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint8_t sendData[24];
	int indx = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	637b      	str	r3, [r7, #52]	@ 0x34

	for (int i = 23; i>=0; i--)
 80007cc:	2317      	movs	r3, #23
 80007ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80007d0:	e01b      	b.n	800080a <ws2812_spi+0x5e>
	{
		if (((color>>i)&0x01) == 1) sendData[indx++] = 0b110;
 80007d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80007d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007d6:	fa22 f303 	lsr.w	r3, r2, r3
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d008      	beq.n	80007f4 <ws2812_spi+0x48>
 80007e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007e4:	1c5a      	adds	r2, r3, #1
 80007e6:	637a      	str	r2, [r7, #52]	@ 0x34
 80007e8:	3338      	adds	r3, #56	@ 0x38
 80007ea:	443b      	add	r3, r7
 80007ec:	2206      	movs	r2, #6
 80007ee:	f803 2c24 	strb.w	r2, [r3, #-36]
 80007f2:	e007      	b.n	8000804 <ws2812_spi+0x58>
		else sendData[indx++] = 0b100;
 80007f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007f6:	1c5a      	adds	r2, r3, #1
 80007f8:	637a      	str	r2, [r7, #52]	@ 0x34
 80007fa:	3338      	adds	r3, #56	@ 0x38
 80007fc:	443b      	add	r3, r7
 80007fe:	2204      	movs	r2, #4
 8000800:	f803 2c24 	strb.w	r2, [r3, #-36]
	for (int i = 23; i>=0; i--)
 8000804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000806:	3b01      	subs	r3, #1
 8000808:	633b      	str	r3, [r7, #48]	@ 0x30
 800080a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800080c:	2b00      	cmp	r3, #0
 800080e:	dae0      	bge.n	80007d2 <ws2812_spi+0x26>
	}

	HAL_SPI_Transmit(&hspi1, sendData, 24, 1000);
 8000810:	f107 0114 	add.w	r1, r7, #20
 8000814:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000818:	2218      	movs	r2, #24
 800081a:	4803      	ldr	r0, [pc, #12]	@ (8000828 <ws2812_spi+0x7c>)
 800081c:	f002 f9e7 	bl	8002bee <HAL_SPI_Transmit>
}
 8000820:	bf00      	nop
 8000822:	3738      	adds	r7, #56	@ 0x38
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	2000010c 	.word	0x2000010c

0800082c <WS2812_Send>:

void WS2812_Send (void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
	for (int i=0; i<NUM_LED; i++)
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	e016      	b.n	8000866 <WS2812_Send+0x3a>
	{
		ws2812_spi(LED_Data[i][1],LED_Data[i][2],LED_Data[i][3]);
 8000838:	4a10      	ldr	r2, [pc, #64]	@ (800087c <WS2812_Send+0x50>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	4413      	add	r3, r2
 8000840:	785b      	ldrb	r3, [r3, #1]
 8000842:	4618      	mov	r0, r3
 8000844:	4a0d      	ldr	r2, [pc, #52]	@ (800087c <WS2812_Send+0x50>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	4413      	add	r3, r2
 800084c:	789b      	ldrb	r3, [r3, #2]
 800084e:	4619      	mov	r1, r3
 8000850:	4a0a      	ldr	r2, [pc, #40]	@ (800087c <WS2812_Send+0x50>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	4413      	add	r3, r2
 8000858:	78db      	ldrb	r3, [r3, #3]
 800085a:	461a      	mov	r2, r3
 800085c:	f7ff ffa6 	bl	80007ac <ws2812_spi>
	for (int i=0; i<NUM_LED; i++)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3301      	adds	r3, #1
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2b0e      	cmp	r3, #14
 800086a:	dde5      	ble.n	8000838 <WS2812_Send+0xc>
	}
	HAL_Delay (1);
 800086c:	2001      	movs	r0, #1
 800086e:	f000 fe25 	bl	80014bc <HAL_Delay>
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200000d0 	.word	0x200000d0

08000880 <FreeUARTBuffer>:
  * @brief  The application entry point.
  * @retval int
  */

void FreeUARTBuffer(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
    // Step 1: Abort UART communication
    HAL_UART_Abort(&huart2);
 8000884:	4809      	ldr	r0, [pc, #36]	@ (80008ac <FreeUARTBuffer+0x2c>)
 8000886:	f002 fe31 	bl	80034ec <HAL_UART_Abort>

    // Step 2: Clear any application-level buffers
    // Example: Assuming you have an Rx buffer
    memset(RxBuffer, 0, sizeof(RxBuffer));
 800088a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800088e:	2100      	movs	r1, #0
 8000890:	4807      	ldr	r0, [pc, #28]	@ (80008b0 <FreeUARTBuffer+0x30>)
 8000892:	f003 feb4 	bl	80045fe <memset>

    // Step 3: Reinitialize UART (optional)
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	@ (80008ac <FreeUARTBuffer+0x2c>)
 8000898:	f002 fc82 	bl	80031a0 <HAL_UART_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <FreeUARTBuffer+0x26>
    {
        // Initialization Error
        Error_Handler();
 80008a2:	f000 fba5 	bl	8000ff0 <Error_Handler>
    }
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000170 	.word	0x20000170
 80008b0:	20000214 	.word	0x20000214

080008b4 <main>:

int main(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b090      	sub	sp, #64	@ 0x40
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ba:	f000 fd8e 	bl	80013da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008be:	f000 fa37 	bl	8000d30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c2:	f000 fb1f 	bl	8000f04 <MX_GPIO_Init>
  MX_SPI1_Init();
 80008c6:	f000 fa7f 	bl	8000dc8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80008ca:	f000 fabb 	bl	8000e44 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  setLED(0, 0, 0, 0);
 80008ce:	2300      	movs	r3, #0
 80008d0:	2200      	movs	r2, #0
 80008d2:	2100      	movs	r1, #0
 80008d4:	2000      	movs	r0, #0
 80008d6:	f7ff ff3b 	bl	8000750 <setLED>
  setLED(1, 0, 0, 0);
 80008da:	2300      	movs	r3, #0
 80008dc:	2200      	movs	r2, #0
 80008de:	2100      	movs	r1, #0
 80008e0:	2001      	movs	r0, #1
 80008e2:	f7ff ff35 	bl	8000750 <setLED>
  setLED(2, 0, 0, 0);
 80008e6:	2300      	movs	r3, #0
 80008e8:	2200      	movs	r2, #0
 80008ea:	2100      	movs	r1, #0
 80008ec:	2002      	movs	r0, #2
 80008ee:	f7ff ff2f 	bl	8000750 <setLED>
  setLED(3, 0, 0, 0);
 80008f2:	2300      	movs	r3, #0
 80008f4:	2200      	movs	r2, #0
 80008f6:	2100      	movs	r1, #0
 80008f8:	2003      	movs	r0, #3
 80008fa:	f7ff ff29 	bl	8000750 <setLED>
  setLED(4, 0, 0, 0);
 80008fe:	2300      	movs	r3, #0
 8000900:	2200      	movs	r2, #0
 8000902:	2100      	movs	r1, #0
 8000904:	2004      	movs	r0, #4
 8000906:	f7ff ff23 	bl	8000750 <setLED>
  setLED(5, 0, 0, 0);
 800090a:	2300      	movs	r3, #0
 800090c:	2200      	movs	r2, #0
 800090e:	2100      	movs	r1, #0
 8000910:	2005      	movs	r0, #5
 8000912:	f7ff ff1d 	bl	8000750 <setLED>
  setLED(6, 0, 0, 0);
 8000916:	2300      	movs	r3, #0
 8000918:	2200      	movs	r2, #0
 800091a:	2100      	movs	r1, #0
 800091c:	2006      	movs	r0, #6
 800091e:	f7ff ff17 	bl	8000750 <setLED>
  setLED(7, 0, 0, 0);
 8000922:	2300      	movs	r3, #0
 8000924:	2200      	movs	r2, #0
 8000926:	2100      	movs	r1, #0
 8000928:	2007      	movs	r0, #7
 800092a:	f7ff ff11 	bl	8000750 <setLED>
  setLED(8, 0, 0, 0);
 800092e:	2300      	movs	r3, #0
 8000930:	2200      	movs	r2, #0
 8000932:	2100      	movs	r1, #0
 8000934:	2008      	movs	r0, #8
 8000936:	f7ff ff0b 	bl	8000750 <setLED>
  setLED(9, 0, 0, 0);
 800093a:	2300      	movs	r3, #0
 800093c:	2200      	movs	r2, #0
 800093e:	2100      	movs	r1, #0
 8000940:	2009      	movs	r0, #9
 8000942:	f7ff ff05 	bl	8000750 <setLED>
  setLED(10, 0, 0, 0);
 8000946:	2300      	movs	r3, #0
 8000948:	2200      	movs	r2, #0
 800094a:	2100      	movs	r1, #0
 800094c:	200a      	movs	r0, #10
 800094e:	f7ff feff 	bl	8000750 <setLED>
  setLED(11, 0, 0, 0);
 8000952:	2300      	movs	r3, #0
 8000954:	2200      	movs	r2, #0
 8000956:	2100      	movs	r1, #0
 8000958:	200b      	movs	r0, #11
 800095a:	f7ff fef9 	bl	8000750 <setLED>
  setLED(12, 0, 0, 0);
 800095e:	2300      	movs	r3, #0
 8000960:	2200      	movs	r2, #0
 8000962:	2100      	movs	r1, #0
 8000964:	200c      	movs	r0, #12
 8000966:	f7ff fef3 	bl	8000750 <setLED>
  setLED(13, 0, 0, 0);
 800096a:	2300      	movs	r3, #0
 800096c:	2200      	movs	r2, #0
 800096e:	2100      	movs	r1, #0
 8000970:	200d      	movs	r0, #13
 8000972:	f7ff feed 	bl	8000750 <setLED>
  setLED(14, 0, 0, 0);
 8000976:	2300      	movs	r3, #0
 8000978:	2200      	movs	r2, #0
 800097a:	2100      	movs	r1, #0
 800097c:	200e      	movs	r0, #14
 800097e:	f7ff fee7 	bl	8000750 <setLED>
  WS2812_Send();
 8000982:	f7ff ff53 	bl	800082c <WS2812_Send>

  for(int i=0; i<=14; i++)
 8000986:	2300      	movs	r3, #0
 8000988:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800098a:	e00a      	b.n	80009a2 <main+0xee>
  {
	  setLED(i, 80, 0, 0);
 800098c:	2300      	movs	r3, #0
 800098e:	2200      	movs	r2, #0
 8000990:	2150      	movs	r1, #80	@ 0x50
 8000992:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000994:	f7ff fedc 	bl	8000750 <setLED>
	  WS2812_Send();
 8000998:	f7ff ff48 	bl	800082c <WS2812_Send>
  for(int i=0; i<=14; i++)
 800099c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800099e:	3301      	adds	r3, #1
 80009a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80009a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80009a4:	2b0e      	cmp	r3, #14
 80009a6:	ddf1      	ble.n	800098c <main+0xd8>
  /* USER CODE BEGIN WHILE */
  while (1)
   {
    /* USER CODE END WHILE */

	  if(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_RXNE))
 80009a8:	4bc8      	ldr	r3, [pc, #800]	@ (8000ccc <main+0x418>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	f003 0320 	and.w	r3, r3, #32
 80009b2:	2b20      	cmp	r3, #32
 80009b4:	d11c      	bne.n	80009f0 <main+0x13c>
	  {
		  HAL_UART_Receive(&huart2, Rx_data, 20, 10);
 80009b6:	230a      	movs	r3, #10
 80009b8:	2214      	movs	r2, #20
 80009ba:	49c5      	ldr	r1, [pc, #788]	@ (8000cd0 <main+0x41c>)
 80009bc:	48c3      	ldr	r0, [pc, #780]	@ (8000ccc <main+0x418>)
 80009be:	f002 fccd 	bl	800335c <HAL_UART_Receive>
		  HAL_Delay(50);
 80009c2:	2032      	movs	r0, #50	@ 0x32
 80009c4:	f000 fd7a 	bl	80014bc <HAL_Delay>
		  interpreter(Rx_data);
 80009c8:	48c1      	ldr	r0, [pc, #772]	@ (8000cd0 <main+0x41c>)
 80009ca:	f7ff fe01 	bl	80005d0 <interpreter>
		  HAL_Delay(50);
 80009ce:	2032      	movs	r0, #50	@ 0x32
 80009d0:	f000 fd74 	bl	80014bc <HAL_Delay>
		  FreeUARTBuffer();
 80009d4:	f7ff ff54 	bl	8000880 <FreeUARTBuffer>
		  HAL_UART_Transmit(&huart2,reply,12,1000);
 80009d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009dc:	220c      	movs	r2, #12
 80009de:	49bd      	ldr	r1, [pc, #756]	@ (8000cd4 <main+0x420>)
 80009e0:	48ba      	ldr	r0, [pc, #744]	@ (8000ccc <main+0x418>)
 80009e2:	f002 fc2d 	bl	8003240 <HAL_UART_Transmit>
		  HAL_Delay(50);
 80009e6:	2032      	movs	r0, #50	@ 0x32
 80009e8:	f000 fd68 	bl	80014bc <HAL_Delay>
		  FreeUARTBuffer();
 80009ec:	f7ff ff48 	bl	8000880 <FreeUARTBuffer>
	  }
	  if(HAL_GPIO_ReadPin(SENSOR1_GPIO_Port, SENSOR1_Pin)) // Doesn't work
 80009f0:	2102      	movs	r1, #2
 80009f2:	48b9      	ldr	r0, [pc, #740]	@ (8000cd8 <main+0x424>)
 80009f4:	f001 f84e 	bl	8001a94 <HAL_GPIO_ReadPin>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d013      	beq.n	8000a26 <main+0x172>
	  {
		  uint8_t data[] = "S1";
 80009fe:	4ab7      	ldr	r2, [pc, #732]	@ (8000cdc <main+0x428>)
 8000a00:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a04:	6812      	ldr	r2, [r2, #0]
 8000a06:	4611      	mov	r1, r2
 8000a08:	8019      	strh	r1, [r3, #0]
 8000a0a:	3302      	adds	r3, #2
 8000a0c:	0c12      	lsrs	r2, r2, #16
 8000a0e:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2,data,2,10);
 8000a10:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8000a14:	230a      	movs	r3, #10
 8000a16:	2202      	movs	r2, #2
 8000a18:	48ac      	ldr	r0, [pc, #688]	@ (8000ccc <main+0x418>)
 8000a1a:	f002 fc11 	bl	8003240 <HAL_UART_Transmit>
		  HAL_Delay(1500);
 8000a1e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000a22:	f000 fd4b 	bl	80014bc <HAL_Delay>
	  }
	  if(HAL_GPIO_ReadPin(SENSOR2_GPIO_Port, SENSOR2_Pin)) // Doesn't work
 8000a26:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a2e:	f001 f831 	bl	8001a94 <HAL_GPIO_ReadPin>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d013      	beq.n	8000a60 <main+0x1ac>
	  {
		  uint8_t data[] = "S2";
 8000a38:	4aa9      	ldr	r2, [pc, #676]	@ (8000ce0 <main+0x42c>)
 8000a3a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000a3e:	6812      	ldr	r2, [r2, #0]
 8000a40:	4611      	mov	r1, r2
 8000a42:	8019      	strh	r1, [r3, #0]
 8000a44:	3302      	adds	r3, #2
 8000a46:	0c12      	lsrs	r2, r2, #16
 8000a48:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2,data,2,10);
 8000a4a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8000a4e:	230a      	movs	r3, #10
 8000a50:	2202      	movs	r2, #2
 8000a52:	489e      	ldr	r0, [pc, #632]	@ (8000ccc <main+0x418>)
 8000a54:	f002 fbf4 	bl	8003240 <HAL_UART_Transmit>
		  HAL_Delay(1500);
 8000a58:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000a5c:	f000 fd2e 	bl	80014bc <HAL_Delay>
	  }
	  if(HAL_GPIO_ReadPin(SENSOR3_GPIO_Port, SENSOR3_Pin))
 8000a60:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a68:	f001 f814 	bl	8001a94 <HAL_GPIO_ReadPin>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d013      	beq.n	8000a9a <main+0x1e6>
	  {
		  uint8_t data[] = "S3";
 8000a72:	4a9c      	ldr	r2, [pc, #624]	@ (8000ce4 <main+0x430>)
 8000a74:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a78:	6812      	ldr	r2, [r2, #0]
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	8019      	strh	r1, [r3, #0]
 8000a7e:	3302      	adds	r3, #2
 8000a80:	0c12      	lsrs	r2, r2, #16
 8000a82:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2,data,2,10);
 8000a84:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000a88:	230a      	movs	r3, #10
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	488f      	ldr	r0, [pc, #572]	@ (8000ccc <main+0x418>)
 8000a8e:	f002 fbd7 	bl	8003240 <HAL_UART_Transmit>
		  HAL_Delay(1500);
 8000a92:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000a96:	f000 fd11 	bl	80014bc <HAL_Delay>
	  }
	  if(HAL_GPIO_ReadPin(SENSOR4_GPIO_Port, SENSOR4_Pin))
 8000a9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa2:	f000 fff7 	bl	8001a94 <HAL_GPIO_ReadPin>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d013      	beq.n	8000ad4 <main+0x220>
	  {
		  uint8_t data[] = "S4";
 8000aac:	4a8e      	ldr	r2, [pc, #568]	@ (8000ce8 <main+0x434>)
 8000aae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ab2:	6812      	ldr	r2, [r2, #0]
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	8019      	strh	r1, [r3, #0]
 8000ab8:	3302      	adds	r3, #2
 8000aba:	0c12      	lsrs	r2, r2, #16
 8000abc:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2,data,2,10);
 8000abe:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8000ac2:	230a      	movs	r3, #10
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	4881      	ldr	r0, [pc, #516]	@ (8000ccc <main+0x418>)
 8000ac8:	f002 fbba 	bl	8003240 <HAL_UART_Transmit>
		  HAL_Delay(1500);
 8000acc:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000ad0:	f000 fcf4 	bl	80014bc <HAL_Delay>
	  }
	  if(HAL_GPIO_ReadPin(SENSOR5_GPIO_Port, SENSOR5_Pin))
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	4885      	ldr	r0, [pc, #532]	@ (8000cec <main+0x438>)
 8000ad8:	f000 ffdc 	bl	8001a94 <HAL_GPIO_ReadPin>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d013      	beq.n	8000b0a <main+0x256>
	  {
		  uint8_t data[] = "S5";
 8000ae2:	4a83      	ldr	r2, [pc, #524]	@ (8000cf0 <main+0x43c>)
 8000ae4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ae8:	6812      	ldr	r2, [r2, #0]
 8000aea:	4611      	mov	r1, r2
 8000aec:	8019      	strh	r1, [r3, #0]
 8000aee:	3302      	adds	r3, #2
 8000af0:	0c12      	lsrs	r2, r2, #16
 8000af2:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2,data,2,10);
 8000af4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000af8:	230a      	movs	r3, #10
 8000afa:	2202      	movs	r2, #2
 8000afc:	4873      	ldr	r0, [pc, #460]	@ (8000ccc <main+0x418>)
 8000afe:	f002 fb9f 	bl	8003240 <HAL_UART_Transmit>
		  HAL_Delay(1500);
 8000b02:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000b06:	f000 fcd9 	bl	80014bc <HAL_Delay>
	  }
	  if(HAL_GPIO_ReadPin(SENSOR6_GPIO_Port, SENSOR6_Pin))
 8000b0a:	2102      	movs	r1, #2
 8000b0c:	4877      	ldr	r0, [pc, #476]	@ (8000cec <main+0x438>)
 8000b0e:	f000 ffc1 	bl	8001a94 <HAL_GPIO_ReadPin>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d013      	beq.n	8000b40 <main+0x28c>
	  {
		  uint8_t data[] = "S6";
 8000b18:	4a76      	ldr	r2, [pc, #472]	@ (8000cf4 <main+0x440>)
 8000b1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b1e:	6812      	ldr	r2, [r2, #0]
 8000b20:	4611      	mov	r1, r2
 8000b22:	8019      	strh	r1, [r3, #0]
 8000b24:	3302      	adds	r3, #2
 8000b26:	0c12      	lsrs	r2, r2, #16
 8000b28:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2,data,2,10);
 8000b2a:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000b2e:	230a      	movs	r3, #10
 8000b30:	2202      	movs	r2, #2
 8000b32:	4866      	ldr	r0, [pc, #408]	@ (8000ccc <main+0x418>)
 8000b34:	f002 fb84 	bl	8003240 <HAL_UART_Transmit>
		  HAL_Delay(1500);
 8000b38:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000b3c:	f000 fcbe 	bl	80014bc <HAL_Delay>
	  }
	  if(HAL_GPIO_ReadPin(SENSOR7_GPIO_Port, SENSOR7_Pin))
 8000b40:	2104      	movs	r1, #4
 8000b42:	486a      	ldr	r0, [pc, #424]	@ (8000cec <main+0x438>)
 8000b44:	f000 ffa6 	bl	8001a94 <HAL_GPIO_ReadPin>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d013      	beq.n	8000b76 <main+0x2c2>
	  {
		  uint8_t data[] = "S7";
 8000b4e:	4a6a      	ldr	r2, [pc, #424]	@ (8000cf8 <main+0x444>)
 8000b50:	f107 0320 	add.w	r3, r7, #32
 8000b54:	6812      	ldr	r2, [r2, #0]
 8000b56:	4611      	mov	r1, r2
 8000b58:	8019      	strh	r1, [r3, #0]
 8000b5a:	3302      	adds	r3, #2
 8000b5c:	0c12      	lsrs	r2, r2, #16
 8000b5e:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2,data,2,10);
 8000b60:	f107 0120 	add.w	r1, r7, #32
 8000b64:	230a      	movs	r3, #10
 8000b66:	2202      	movs	r2, #2
 8000b68:	4858      	ldr	r0, [pc, #352]	@ (8000ccc <main+0x418>)
 8000b6a:	f002 fb69 	bl	8003240 <HAL_UART_Transmit>
		  HAL_Delay(1500);
 8000b6e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000b72:	f000 fca3 	bl	80014bc <HAL_Delay>
	  }
	  if(HAL_GPIO_ReadPin(SENSOR8_GPIO_Port, SENSOR8_Pin))
 8000b76:	2110      	movs	r1, #16
 8000b78:	485c      	ldr	r0, [pc, #368]	@ (8000cec <main+0x438>)
 8000b7a:	f000 ff8b 	bl	8001a94 <HAL_GPIO_ReadPin>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d013      	beq.n	8000bac <main+0x2f8>
	  {
		  uint8_t data[] = "S8";
 8000b84:	4a5d      	ldr	r2, [pc, #372]	@ (8000cfc <main+0x448>)
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	6812      	ldr	r2, [r2, #0]
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	8019      	strh	r1, [r3, #0]
 8000b90:	3302      	adds	r3, #2
 8000b92:	0c12      	lsrs	r2, r2, #16
 8000b94:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2,data,2,10);
 8000b96:	f107 011c 	add.w	r1, r7, #28
 8000b9a:	230a      	movs	r3, #10
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	484b      	ldr	r0, [pc, #300]	@ (8000ccc <main+0x418>)
 8000ba0:	f002 fb4e 	bl	8003240 <HAL_UART_Transmit>
		  HAL_Delay(1500);
 8000ba4:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000ba8:	f000 fc88 	bl	80014bc <HAL_Delay>
	  }
	  if(HAL_GPIO_ReadPin(SENSOR9_GPIO_Port, SENSOR9_Pin)) // Doesn't work
 8000bac:	2120      	movs	r1, #32
 8000bae:	484f      	ldr	r0, [pc, #316]	@ (8000cec <main+0x438>)
 8000bb0:	f000 ff70 	bl	8001a94 <HAL_GPIO_ReadPin>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d013      	beq.n	8000be2 <main+0x32e>
	  {
		  uint8_t data[] = "S9";
 8000bba:	4a51      	ldr	r2, [pc, #324]	@ (8000d00 <main+0x44c>)
 8000bbc:	f107 0318 	add.w	r3, r7, #24
 8000bc0:	6812      	ldr	r2, [r2, #0]
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	8019      	strh	r1, [r3, #0]
 8000bc6:	3302      	adds	r3, #2
 8000bc8:	0c12      	lsrs	r2, r2, #16
 8000bca:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart2,data,2,10);
 8000bcc:	f107 0118 	add.w	r1, r7, #24
 8000bd0:	230a      	movs	r3, #10
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	483d      	ldr	r0, [pc, #244]	@ (8000ccc <main+0x418>)
 8000bd6:	f002 fb33 	bl	8003240 <HAL_UART_Transmit>
		  HAL_Delay(1500);
 8000bda:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000bde:	f000 fc6d 	bl	80014bc <HAL_Delay>
	  }
	  if(HAL_GPIO_ReadPin(SENSOR10_GPIO_Port, SENSOR10_Pin))
 8000be2:	2140      	movs	r1, #64	@ 0x40
 8000be4:	4841      	ldr	r0, [pc, #260]	@ (8000cec <main+0x438>)
 8000be6:	f000 ff55 	bl	8001a94 <HAL_GPIO_ReadPin>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d00c      	beq.n	8000c0a <main+0x356>
	  {
		  uint8_t data[] = "S10";
 8000bf0:	4b44      	ldr	r3, [pc, #272]	@ (8000d04 <main+0x450>)
 8000bf2:	617b      	str	r3, [r7, #20]
		  HAL_UART_Transmit(&huart2,data,3,10);
 8000bf4:	f107 0114 	add.w	r1, r7, #20
 8000bf8:	230a      	movs	r3, #10
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	4833      	ldr	r0, [pc, #204]	@ (8000ccc <main+0x418>)
 8000bfe:	f002 fb1f 	bl	8003240 <HAL_UART_Transmit>
		  HAL_Delay(1500);
 8000c02:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000c06:	f000 fc59 	bl	80014bc <HAL_Delay>
	  }
	  if(HAL_GPIO_ReadPin(SENSOR11_GPIO_Port, SENSOR11_Pin))
 8000c0a:	2180      	movs	r1, #128	@ 0x80
 8000c0c:	4837      	ldr	r0, [pc, #220]	@ (8000cec <main+0x438>)
 8000c0e:	f000 ff41 	bl	8001a94 <HAL_GPIO_ReadPin>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d00c      	beq.n	8000c32 <main+0x37e>
	  {
		  uint8_t data[] = "S11";
 8000c18:	4b3b      	ldr	r3, [pc, #236]	@ (8000d08 <main+0x454>)
 8000c1a:	613b      	str	r3, [r7, #16]
		  HAL_UART_Transmit(&huart2,data,3,10);
 8000c1c:	f107 0110 	add.w	r1, r7, #16
 8000c20:	230a      	movs	r3, #10
 8000c22:	2203      	movs	r2, #3
 8000c24:	4829      	ldr	r0, [pc, #164]	@ (8000ccc <main+0x418>)
 8000c26:	f002 fb0b 	bl	8003240 <HAL_UART_Transmit>
		  HAL_Delay(1500);
 8000c2a:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000c2e:	f000 fc45 	bl	80014bc <HAL_Delay>
	  }
	  if(HAL_GPIO_ReadPin(SENSOR12_GPIO_Port, SENSOR12_Pin)) // Doesn't work
 8000c32:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c36:	482d      	ldr	r0, [pc, #180]	@ (8000cec <main+0x438>)
 8000c38:	f000 ff2c 	bl	8001a94 <HAL_GPIO_ReadPin>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d00c      	beq.n	8000c5c <main+0x3a8>
	  {
		  uint8_t data[] = "S12";
 8000c42:	4b32      	ldr	r3, [pc, #200]	@ (8000d0c <main+0x458>)
 8000c44:	60fb      	str	r3, [r7, #12]
		  HAL_UART_Transmit(&huart2,data,3,10);
 8000c46:	f107 010c 	add.w	r1, r7, #12
 8000c4a:	230a      	movs	r3, #10
 8000c4c:	2203      	movs	r2, #3
 8000c4e:	481f      	ldr	r0, [pc, #124]	@ (8000ccc <main+0x418>)
 8000c50:	f002 faf6 	bl	8003240 <HAL_UART_Transmit>
		  HAL_Delay(1500);
 8000c54:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000c58:	f000 fc30 	bl	80014bc <HAL_Delay>
	  }
	  if(HAL_GPIO_ReadPin(SENSOR13_GPIO_Port, SENSOR13_Pin)) // Doesn't work
 8000c5c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c60:	4822      	ldr	r0, [pc, #136]	@ (8000cec <main+0x438>)
 8000c62:	f000 ff17 	bl	8001a94 <HAL_GPIO_ReadPin>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d00c      	beq.n	8000c86 <main+0x3d2>
	  {
		  uint8_t data[] = "S13";
 8000c6c:	4b28      	ldr	r3, [pc, #160]	@ (8000d10 <main+0x45c>)
 8000c6e:	60bb      	str	r3, [r7, #8]
		  HAL_UART_Transmit(&huart2,data,3,10);
 8000c70:	f107 0108 	add.w	r1, r7, #8
 8000c74:	230a      	movs	r3, #10
 8000c76:	2203      	movs	r2, #3
 8000c78:	4814      	ldr	r0, [pc, #80]	@ (8000ccc <main+0x418>)
 8000c7a:	f002 fae1 	bl	8003240 <HAL_UART_Transmit>
		  HAL_Delay(1500);
 8000c7e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000c82:	f000 fc1b 	bl	80014bc <HAL_Delay>
	  }
	  if(HAL_GPIO_ReadPin(SENSOR14_GPIO_Port, SENSOR14_Pin))
 8000c86:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c8a:	4818      	ldr	r0, [pc, #96]	@ (8000cec <main+0x438>)
 8000c8c:	f000 ff02 	bl	8001a94 <HAL_GPIO_ReadPin>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d00b      	beq.n	8000cae <main+0x3fa>
	  {
		  uint8_t data[] = "S14";
 8000c96:	4b1f      	ldr	r3, [pc, #124]	@ (8000d14 <main+0x460>)
 8000c98:	607b      	str	r3, [r7, #4]
		  HAL_UART_Transmit(&huart2,data,3,10);
 8000c9a:	1d39      	adds	r1, r7, #4
 8000c9c:	230a      	movs	r3, #10
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	480a      	ldr	r0, [pc, #40]	@ (8000ccc <main+0x418>)
 8000ca2:	f002 facd 	bl	8003240 <HAL_UART_Transmit>
		  HAL_Delay(1500);
 8000ca6:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000caa:	f000 fc07 	bl	80014bc <HAL_Delay>
	  }
	  if(HAL_GPIO_ReadPin(SENSOR15_GPIO_Port, SENSOR15_Pin))
 8000cae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cb2:	480e      	ldr	r0, [pc, #56]	@ (8000cec <main+0x438>)
 8000cb4:	f000 feee 	bl	8001a94 <HAL_GPIO_ReadPin>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f43f ae74 	beq.w	80009a8 <main+0xf4>
	  {
		  uint8_t data[] = "S15";
 8000cc0:	4b15      	ldr	r3, [pc, #84]	@ (8000d18 <main+0x464>)
 8000cc2:	603b      	str	r3, [r7, #0]
		  HAL_UART_Transmit(&huart2,data,3,10);
 8000cc4:	4639      	mov	r1, r7
 8000cc6:	230a      	movs	r3, #10
 8000cc8:	2203      	movs	r2, #3
 8000cca:	e027      	b.n	8000d1c <main+0x468>
 8000ccc:	20000170 	.word	0x20000170
 8000cd0:	20000204 	.word	0x20000204
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	48000800 	.word	0x48000800
 8000cdc:	08005444 	.word	0x08005444
 8000ce0:	08005448 	.word	0x08005448
 8000ce4:	0800544c 	.word	0x0800544c
 8000ce8:	08005450 	.word	0x08005450
 8000cec:	48000400 	.word	0x48000400
 8000cf0:	08005454 	.word	0x08005454
 8000cf4:	08005458 	.word	0x08005458
 8000cf8:	0800545c 	.word	0x0800545c
 8000cfc:	08005460 	.word	0x08005460
 8000d00:	08005464 	.word	0x08005464
 8000d04:	00303153 	.word	0x00303153
 8000d08:	00313153 	.word	0x00313153
 8000d0c:	00323153 	.word	0x00323153
 8000d10:	00333153 	.word	0x00333153
 8000d14:	00343153 	.word	0x00343153
 8000d18:	00353153 	.word	0x00353153
 8000d1c:	4803      	ldr	r0, [pc, #12]	@ (8000d2c <main+0x478>)
 8000d1e:	f002 fa8f 	bl	8003240 <HAL_UART_Transmit>
		  HAL_Delay(1500);
 8000d22:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000d26:	f000 fbc9 	bl	80014bc <HAL_Delay>
	  if(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_RXNE))
 8000d2a:	e63d      	b.n	80009a8 <main+0xf4>
 8000d2c:	20000170 	.word	0x20000170

08000d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b094      	sub	sp, #80	@ 0x50
 8000d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d36:	f107 0318 	add.w	r3, r7, #24
 8000d3a:	2238      	movs	r2, #56	@ 0x38
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f003 fc5d 	bl	80045fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d52:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d56:	f000 fecd 	bl	8001af4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d62:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d64:	2340      	movs	r3, #64	@ 0x40
 8000d66:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000d70:	2301      	movs	r3, #1
 8000d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000d74:	230a      	movs	r3, #10
 8000d76:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d80:	2302      	movs	r3, #2
 8000d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d84:	f107 0318 	add.w	r3, r7, #24
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 ff67 	bl	8001c5c <HAL_RCC_OscConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000d94:	f000 f92c 	bl	8000ff0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d98:	230f      	movs	r3, #15
 8000d9a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	2102      	movs	r1, #2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f001 fa65 	bl	8002280 <HAL_RCC_ClockConfig>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000dbc:	f000 f918 	bl	8000ff0 <Error_Handler>
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	3750      	adds	r7, #80	@ 0x50
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e3c <MX_SPI1_Init+0x74>)
 8000dce:	4a1c      	ldr	r2, [pc, #112]	@ (8000e40 <MX_SPI1_Init+0x78>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e3c <MX_SPI1_Init+0x74>)
 8000dd4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000dd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000dda:	4b18      	ldr	r3, [pc, #96]	@ (8000e3c <MX_SPI1_Init+0x74>)
 8000ddc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000de0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000de2:	4b16      	ldr	r3, [pc, #88]	@ (8000e3c <MX_SPI1_Init+0x74>)
 8000de4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000de8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dea:	4b14      	ldr	r3, [pc, #80]	@ (8000e3c <MX_SPI1_Init+0x74>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000df0:	4b12      	ldr	r3, [pc, #72]	@ (8000e3c <MX_SPI1_Init+0x74>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000df6:	4b11      	ldr	r3, [pc, #68]	@ (8000e3c <MX_SPI1_Init+0x74>)
 8000df8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dfc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000e3c <MX_SPI1_Init+0x74>)
 8000e00:	2220      	movs	r2, #32
 8000e02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e04:	4b0d      	ldr	r3, [pc, #52]	@ (8000e3c <MX_SPI1_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e3c <MX_SPI1_Init+0x74>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e10:	4b0a      	ldr	r3, [pc, #40]	@ (8000e3c <MX_SPI1_Init+0x74>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e16:	4b09      	ldr	r3, [pc, #36]	@ (8000e3c <MX_SPI1_Init+0x74>)
 8000e18:	2207      	movs	r2, #7
 8000e1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e1c:	4b07      	ldr	r3, [pc, #28]	@ (8000e3c <MX_SPI1_Init+0x74>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e22:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <MX_SPI1_Init+0x74>)
 8000e24:	2208      	movs	r2, #8
 8000e26:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e28:	4804      	ldr	r0, [pc, #16]	@ (8000e3c <MX_SPI1_Init+0x74>)
 8000e2a:	f001 fe35 	bl	8002a98 <HAL_SPI_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8000e34:	f000 f8dc 	bl	8000ff0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	2000010c 	.word	0x2000010c
 8000e40:	40013000 	.word	0x40013000

08000e44 <MX_USART2_UART_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000e48:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef4 <MX_USART2_UART_Init+0xb0>)
 8000e4a:	4a2b      	ldr	r2, [pc, #172]	@ (8000ef8 <MX_USART2_UART_Init+0xb4>)
 8000e4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e4e:	4b29      	ldr	r3, [pc, #164]	@ (8000ef4 <MX_USART2_UART_Init+0xb0>)
 8000e50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e56:	4b27      	ldr	r3, [pc, #156]	@ (8000ef4 <MX_USART2_UART_Init+0xb0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e5c:	4b25      	ldr	r3, [pc, #148]	@ (8000ef4 <MX_USART2_UART_Init+0xb0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e62:	4b24      	ldr	r3, [pc, #144]	@ (8000ef4 <MX_USART2_UART_Init+0xb0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e68:	4b22      	ldr	r3, [pc, #136]	@ (8000ef4 <MX_USART2_UART_Init+0xb0>)
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6e:	4b21      	ldr	r3, [pc, #132]	@ (8000ef4 <MX_USART2_UART_Init+0xb0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e74:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef4 <MX_USART2_UART_Init+0xb0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef4 <MX_USART2_UART_Init+0xb0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e80:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef4 <MX_USART2_UART_Init+0xb0>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e86:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef4 <MX_USART2_UART_Init+0xb0>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	629a      	str	r2, [r3, #40]	@ 0x28

  // Assign Tx and Rx buffer pointers
  huart2.pTxBuffPtr = TxBuffer;
 8000e8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ef4 <MX_USART2_UART_Init+0xb0>)
 8000e8e:	4a1b      	ldr	r2, [pc, #108]	@ (8000efc <MX_USART2_UART_Init+0xb8>)
 8000e90:	651a      	str	r2, [r3, #80]	@ 0x50
  huart2.TxXferSize = TX_BUFFER_SIZE;
 8000e92:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <MX_USART2_UART_Init+0xb0>)
 8000e94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e98:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  huart2.pRxBuffPtr = RxBuffer;
 8000e9c:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <MX_USART2_UART_Init+0xb0>)
 8000e9e:	4a18      	ldr	r2, [pc, #96]	@ (8000f00 <MX_USART2_UART_Init+0xbc>)
 8000ea0:	659a      	str	r2, [r3, #88]	@ 0x58
  huart2.RxXferSize = RX_BUFFER_SIZE;
 8000ea2:	4b14      	ldr	r3, [pc, #80]	@ (8000ef4 <MX_USART2_UART_Init+0xb0>)
 8000ea4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ea8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eac:	4811      	ldr	r0, [pc, #68]	@ (8000ef4 <MX_USART2_UART_Init+0xb0>)
 8000eae:	f002 f977 	bl	80031a0 <HAL_UART_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_USART2_UART_Init+0x78>
  {
    Error_Handler();
 8000eb8:	f000 f89a 	bl	8000ff0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	480d      	ldr	r0, [pc, #52]	@ (8000ef4 <MX_USART2_UART_Init+0xb0>)
 8000ec0:	f003 f946 	bl	8004150 <HAL_UARTEx_SetTxFifoThreshold>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8000eca:	f000 f891 	bl	8000ff0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4808      	ldr	r0, [pc, #32]	@ (8000ef4 <MX_USART2_UART_Init+0xb0>)
 8000ed2:	f003 f97b 	bl	80041cc <HAL_UARTEx_SetRxFifoThreshold>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_USART2_UART_Init+0x9c>
  {
    Error_Handler();
 8000edc:	f000 f888 	bl	8000ff0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ee0:	4804      	ldr	r0, [pc, #16]	@ (8000ef4 <MX_USART2_UART_Init+0xb0>)
 8000ee2:	f003 f8fc 	bl	80040de <HAL_UARTEx_DisableFifoMode>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_USART2_UART_Init+0xac>
  {
    Error_Handler();
 8000eec:	f000 f880 	bl	8000ff0 <Error_Handler>
  }
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000170 	.word	0x20000170
 8000ef8:	40004400 	.word	0x40004400
 8000efc:	20000314 	.word	0x20000314
 8000f00:	20000214 	.word	0x20000214

08000f04 <MX_GPIO_Init>:
static void MX_GPIO_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b088      	sub	sp, #32
 8000f08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0a:	f107 030c 	add.w	r3, r7, #12
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1a:	4b32      	ldr	r3, [pc, #200]	@ (8000fe4 <MX_GPIO_Init+0xe0>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1e:	4a31      	ldr	r2, [pc, #196]	@ (8000fe4 <MX_GPIO_Init+0xe0>)
 8000f20:	f043 0304 	orr.w	r3, r3, #4
 8000f24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f26:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe4 <MX_GPIO_Init+0xe0>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	4b2c      	ldr	r3, [pc, #176]	@ (8000fe4 <MX_GPIO_Init+0xe0>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f36:	4a2b      	ldr	r2, [pc, #172]	@ (8000fe4 <MX_GPIO_Init+0xe0>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f3e:	4b29      	ldr	r3, [pc, #164]	@ (8000fe4 <MX_GPIO_Init+0xe0>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4a:	4b26      	ldr	r3, [pc, #152]	@ (8000fe4 <MX_GPIO_Init+0xe0>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4e:	4a25      	ldr	r2, [pc, #148]	@ (8000fe4 <MX_GPIO_Init+0xe0>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f56:	4b23      	ldr	r3, [pc, #140]	@ (8000fe4 <MX_GPIO_Init+0xe0>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2110      	movs	r1, #16
 8000f66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f6a:	f000 fdab 	bl	8001ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SENSOR1_Pin */
  GPIO_InitStruct.Pin = SENSOR1_Pin;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f76:	2302      	movs	r3, #2
 8000f78:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SENSOR1_GPIO_Port, &GPIO_InitStruct);
 8000f7a:	f107 030c 	add.w	r3, r7, #12
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4819      	ldr	r0, [pc, #100]	@ (8000fe8 <MX_GPIO_Init+0xe4>)
 8000f82:	f000 fc05 	bl	8001790 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f86:	2310      	movs	r3, #16
 8000f88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f96:	f107 030c 	add.w	r3, r7, #12
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa0:	f000 fbf6 	bl	8001790 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR5_Pin SENSOR6_Pin SENSOR7_Pin SENSOR13_Pin
                           SENSOR14_Pin SENSOR15_Pin SENSOR8_Pin SENSOR9_Pin
                           SENSOR10_Pin SENSOR11_Pin SENSOR12_Pin */
  GPIO_InitStruct.Pin = SENSOR5_Pin|SENSOR6_Pin|SENSOR7_Pin|SENSOR13_Pin
 8000fa4:	f641 63f7 	movw	r3, #7927	@ 0x1ef7
 8000fa8:	60fb      	str	r3, [r7, #12]
                          |SENSOR14_Pin|SENSOR15_Pin|SENSOR8_Pin|SENSOR9_Pin
                          |SENSOR10_Pin|SENSOR11_Pin|SENSOR12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	480c      	ldr	r0, [pc, #48]	@ (8000fec <MX_GPIO_Init+0xe8>)
 8000fba:	f000 fbe9 	bl	8001790 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR2_Pin SENSOR3_Pin SENSOR4_Pin */
  GPIO_InitStruct.Pin = SENSOR2_Pin|SENSOR3_Pin|SENSOR4_Pin;
 8000fbe:	f44f 4318 	mov.w	r3, #38912	@ 0x9800
 8000fc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fd6:	f000 fbdb 	bl	8001790 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fda:	bf00      	nop
 8000fdc:	3720      	adds	r7, #32
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	48000800 	.word	0x48000800
 8000fec:	48000400 	.word	0x48000400

08000ff0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff4:	b672      	cpsid	i
}
 8000ff6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <Error_Handler+0x8>

08000ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <HAL_MspInit+0x44>)
 8001004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001006:	4a0e      	ldr	r2, [pc, #56]	@ (8001040 <HAL_MspInit+0x44>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6613      	str	r3, [r2, #96]	@ 0x60
 800100e:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <HAL_MspInit+0x44>)
 8001010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800101a:	4b09      	ldr	r3, [pc, #36]	@ (8001040 <HAL_MspInit+0x44>)
 800101c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800101e:	4a08      	ldr	r2, [pc, #32]	@ (8001040 <HAL_MspInit+0x44>)
 8001020:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001024:	6593      	str	r3, [r2, #88]	@ 0x58
 8001026:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <HAL_MspInit+0x44>)
 8001028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800102a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001032:	f000 fe03 	bl	8001c3c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40021000 	.word	0x40021000

08001044 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	@ 0x28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a17      	ldr	r2, [pc, #92]	@ (80010c0 <HAL_SPI_MspInit+0x7c>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d128      	bne.n	80010b8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001066:	4b17      	ldr	r3, [pc, #92]	@ (80010c4 <HAL_SPI_MspInit+0x80>)
 8001068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800106a:	4a16      	ldr	r2, [pc, #88]	@ (80010c4 <HAL_SPI_MspInit+0x80>)
 800106c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001070:	6613      	str	r3, [r2, #96]	@ 0x60
 8001072:	4b14      	ldr	r3, [pc, #80]	@ (80010c4 <HAL_SPI_MspInit+0x80>)
 8001074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001076:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <HAL_SPI_MspInit+0x80>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001082:	4a10      	ldr	r2, [pc, #64]	@ (80010c4 <HAL_SPI_MspInit+0x80>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800108a:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <HAL_SPI_MspInit+0x80>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001096:	23a0      	movs	r3, #160	@ 0xa0
 8001098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010a6:	2305      	movs	r3, #5
 80010a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4619      	mov	r1, r3
 80010b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010b4:	f000 fb6c 	bl	8001790 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010b8:	bf00      	nop
 80010ba:	3728      	adds	r7, #40	@ 0x28
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40013000 	.word	0x40013000
 80010c4:	40021000 	.word	0x40021000

080010c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b09a      	sub	sp, #104	@ 0x68
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	2244      	movs	r2, #68	@ 0x44
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f003 fa88 	bl	80045fe <memset>
  if(huart->Instance==USART2)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001170 <HAL_UART_MspInit+0xa8>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d136      	bne.n	8001166 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010f8:	2302      	movs	r3, #2
 80010fa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	4618      	mov	r0, r3
 8001106:	f001 fad7 	bl	80026b8 <HAL_RCCEx_PeriphCLKConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001110:	f7ff ff6e 	bl	8000ff0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001114:	4b17      	ldr	r3, [pc, #92]	@ (8001174 <HAL_UART_MspInit+0xac>)
 8001116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001118:	4a16      	ldr	r2, [pc, #88]	@ (8001174 <HAL_UART_MspInit+0xac>)
 800111a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800111e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001120:	4b14      	ldr	r3, [pc, #80]	@ (8001174 <HAL_UART_MspInit+0xac>)
 8001122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112c:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <HAL_UART_MspInit+0xac>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001130:	4a10      	ldr	r2, [pc, #64]	@ (8001174 <HAL_UART_MspInit+0xac>)
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001138:	4b0e      	ldr	r3, [pc, #56]	@ (8001174 <HAL_UART_MspInit+0xac>)
 800113a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001144:	230c      	movs	r3, #12
 8001146:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001154:	2307      	movs	r3, #7
 8001156:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001158:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800115c:	4619      	mov	r1, r3
 800115e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001162:	f000 fb15 	bl	8001790 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001166:	bf00      	nop
 8001168:	3768      	adds	r7, #104	@ 0x68
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40004400 	.word	0x40004400
 8001174:	40021000 	.word	0x40021000

08001178 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800117c:	bf00      	nop
 800117e:	e7fd      	b.n	800117c <NMI_Handler+0x4>

08001180 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <HardFault_Handler+0x4>

08001188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <MemManage_Handler+0x4>

08001190 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <BusFault_Handler+0x4>

08001198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <UsageFault_Handler+0x4>

080011a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ce:	f000 f957 	bl	8001480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  return 1;
 80011da:	2301      	movs	r3, #1
}
 80011dc:	4618      	mov	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <_kill>:

int _kill(int pid, int sig)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011f0:	f003 fac2 	bl	8004778 <__errno>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2216      	movs	r2, #22
 80011f8:	601a      	str	r2, [r3, #0]
  return -1;
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <_exit>:

void _exit (int status)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800120e:	f04f 31ff 	mov.w	r1, #4294967295
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ffe7 	bl	80011e6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <_exit+0x12>

0800121c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	e00a      	b.n	8001244 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800122e:	f3af 8000 	nop.w
 8001232:	4601      	mov	r1, r0
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	1c5a      	adds	r2, r3, #1
 8001238:	60ba      	str	r2, [r7, #8]
 800123a:	b2ca      	uxtb	r2, r1
 800123c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3301      	adds	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	697a      	ldr	r2, [r7, #20]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	429a      	cmp	r2, r3
 800124a:	dbf0      	blt.n	800122e <_read+0x12>
  }

  return len;
 800124c:	687b      	ldr	r3, [r7, #4]
}
 800124e:	4618      	mov	r0, r3
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b086      	sub	sp, #24
 800125a:	af00      	add	r7, sp, #0
 800125c:	60f8      	str	r0, [r7, #12]
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
 8001266:	e009      	b.n	800127c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	1c5a      	adds	r2, r3, #1
 800126c:	60ba      	str	r2, [r7, #8]
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	3301      	adds	r3, #1
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	429a      	cmp	r2, r3
 8001282:	dbf1      	blt.n	8001268 <_write+0x12>
  }
  return len;
 8001284:	687b      	ldr	r3, [r7, #4]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <_close>:

int _close(int file)
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
}
 800129a:	4618      	mov	r0, r3
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012b6:	605a      	str	r2, [r3, #4]
  return 0;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <_isatty>:

int _isatty(int file)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012ce:	2301      	movs	r3, #1
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001300:	4a14      	ldr	r2, [pc, #80]	@ (8001354 <_sbrk+0x5c>)
 8001302:	4b15      	ldr	r3, [pc, #84]	@ (8001358 <_sbrk+0x60>)
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800130c:	4b13      	ldr	r3, [pc, #76]	@ (800135c <_sbrk+0x64>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d102      	bne.n	800131a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001314:	4b11      	ldr	r3, [pc, #68]	@ (800135c <_sbrk+0x64>)
 8001316:	4a12      	ldr	r2, [pc, #72]	@ (8001360 <_sbrk+0x68>)
 8001318:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800131a:	4b10      	ldr	r3, [pc, #64]	@ (800135c <_sbrk+0x64>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	429a      	cmp	r2, r3
 8001326:	d207      	bcs.n	8001338 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001328:	f003 fa26 	bl	8004778 <__errno>
 800132c:	4603      	mov	r3, r0
 800132e:	220c      	movs	r2, #12
 8001330:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
 8001336:	e009      	b.n	800134c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001338:	4b08      	ldr	r3, [pc, #32]	@ (800135c <_sbrk+0x64>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800133e:	4b07      	ldr	r3, [pc, #28]	@ (800135c <_sbrk+0x64>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4413      	add	r3, r2
 8001346:	4a05      	ldr	r2, [pc, #20]	@ (800135c <_sbrk+0x64>)
 8001348:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800134a:	68fb      	ldr	r3, [r7, #12]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20008000 	.word	0x20008000
 8001358:	00000400 	.word	0x00000400
 800135c:	20000414 	.word	0x20000414
 8001360:	20000568 	.word	0x20000568

08001364 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001368:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <SystemInit+0x20>)
 800136a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800136e:	4a05      	ldr	r2, [pc, #20]	@ (8001384 <SystemInit+0x20>)
 8001370:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001374:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001388:	480d      	ldr	r0, [pc, #52]	@ (80013c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800138a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800138c:	f7ff ffea 	bl	8001364 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001390:	480c      	ldr	r0, [pc, #48]	@ (80013c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001392:	490d      	ldr	r1, [pc, #52]	@ (80013c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001394:	4a0d      	ldr	r2, [pc, #52]	@ (80013cc <LoopForever+0xe>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001398:	e002      	b.n	80013a0 <LoopCopyDataInit>

0800139a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800139a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800139c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800139e:	3304      	adds	r3, #4

080013a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a4:	d3f9      	bcc.n	800139a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013a6:	4a0a      	ldr	r2, [pc, #40]	@ (80013d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013a8:	4c0a      	ldr	r4, [pc, #40]	@ (80013d4 <LoopForever+0x16>)
  movs r3, #0
 80013aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ac:	e001      	b.n	80013b2 <LoopFillZerobss>

080013ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b0:	3204      	adds	r2, #4

080013b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b4:	d3fb      	bcc.n	80013ae <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80013b6:	f003 f9e5 	bl	8004784 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013ba:	f7ff fa7b 	bl	80008b4 <main>

080013be <LoopForever>:

LoopForever:
    b LoopForever
 80013be:	e7fe      	b.n	80013be <LoopForever>
  ldr   r0, =_estack
 80013c0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80013c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80013cc:	0800569c 	.word	0x0800569c
  ldr r2, =_sbss
 80013d0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80013d4:	20000568 	.word	0x20000568

080013d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013d8:	e7fe      	b.n	80013d8 <ADC1_2_IRQHandler>

080013da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013e0:	2300      	movs	r3, #0
 80013e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e4:	2003      	movs	r0, #3
 80013e6:	f000 f93d 	bl	8001664 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ea:	200f      	movs	r0, #15
 80013ec:	f000 f80e 	bl	800140c <HAL_InitTick>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d002      	beq.n	80013fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	71fb      	strb	r3, [r7, #7]
 80013fa:	e001      	b.n	8001400 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013fc:	f7ff fdfe 	bl	8000ffc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001400:	79fb      	ldrb	r3, [r7, #7]

}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001414:	2300      	movs	r3, #0
 8001416:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001418:	4b16      	ldr	r3, [pc, #88]	@ (8001474 <HAL_InitTick+0x68>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d022      	beq.n	8001466 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001420:	4b15      	ldr	r3, [pc, #84]	@ (8001478 <HAL_InitTick+0x6c>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b13      	ldr	r3, [pc, #76]	@ (8001474 <HAL_InitTick+0x68>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800142c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001430:	fbb2 f3f3 	udiv	r3, r2, r3
 8001434:	4618      	mov	r0, r3
 8001436:	f000 f93a 	bl	80016ae <HAL_SYSTICK_Config>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d10f      	bne.n	8001460 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b0f      	cmp	r3, #15
 8001444:	d809      	bhi.n	800145a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001446:	2200      	movs	r2, #0
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	f04f 30ff 	mov.w	r0, #4294967295
 800144e:	f000 f914 	bl	800167a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001452:	4a0a      	ldr	r2, [pc, #40]	@ (800147c <HAL_InitTick+0x70>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	e007      	b.n	800146a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	73fb      	strb	r3, [r7, #15]
 800145e:	e004      	b.n	800146a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	73fb      	strb	r3, [r7, #15]
 8001464:	e001      	b.n	800146a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800146a:	7bfb      	ldrb	r3, [r7, #15]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000018 	.word	0x20000018
 8001478:	20000010 	.word	0x20000010
 800147c:	20000014 	.word	0x20000014

08001480 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001484:	4b05      	ldr	r3, [pc, #20]	@ (800149c <HAL_IncTick+0x1c>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <HAL_IncTick+0x20>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4413      	add	r3, r2
 800148e:	4a03      	ldr	r2, [pc, #12]	@ (800149c <HAL_IncTick+0x1c>)
 8001490:	6013      	str	r3, [r2, #0]
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	20000418 	.word	0x20000418
 80014a0:	20000018 	.word	0x20000018

080014a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return uwTick;
 80014a8:	4b03      	ldr	r3, [pc, #12]	@ (80014b8 <HAL_GetTick+0x14>)
 80014aa:	681b      	ldr	r3, [r3, #0]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	20000418 	.word	0x20000418

080014bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c4:	f7ff ffee 	bl	80014a4 <HAL_GetTick>
 80014c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d4:	d004      	beq.n	80014e0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80014d6:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <HAL_Delay+0x40>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	4413      	add	r3, r2
 80014de:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014e0:	bf00      	nop
 80014e2:	f7ff ffdf 	bl	80014a4 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d8f7      	bhi.n	80014e2 <HAL_Delay+0x26>
  {
  }
}
 80014f2:	bf00      	nop
 80014f4:	bf00      	nop
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000018 	.word	0x20000018

08001500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001510:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <__NVIC_SetPriorityGrouping+0x44>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800151c:	4013      	ands	r3, r2
 800151e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001528:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800152c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001532:	4a04      	ldr	r2, [pc, #16]	@ (8001544 <__NVIC_SetPriorityGrouping+0x44>)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	60d3      	str	r3, [r2, #12]
}
 8001538:	bf00      	nop
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800154c:	4b04      	ldr	r3, [pc, #16]	@ (8001560 <__NVIC_GetPriorityGrouping+0x18>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	0a1b      	lsrs	r3, r3, #8
 8001552:	f003 0307 	and.w	r3, r3, #7
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	6039      	str	r1, [r7, #0]
 800156e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001574:	2b00      	cmp	r3, #0
 8001576:	db0a      	blt.n	800158e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	b2da      	uxtb	r2, r3
 800157c:	490c      	ldr	r1, [pc, #48]	@ (80015b0 <__NVIC_SetPriority+0x4c>)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	0112      	lsls	r2, r2, #4
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	440b      	add	r3, r1
 8001588:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800158c:	e00a      	b.n	80015a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4908      	ldr	r1, [pc, #32]	@ (80015b4 <__NVIC_SetPriority+0x50>)
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	3b04      	subs	r3, #4
 800159c:	0112      	lsls	r2, r2, #4
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	440b      	add	r3, r1
 80015a2:	761a      	strb	r2, [r3, #24]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000e100 	.word	0xe000e100
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b089      	sub	sp, #36	@ 0x24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f1c3 0307 	rsb	r3, r3, #7
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	bf28      	it	cs
 80015d6:	2304      	movcs	r3, #4
 80015d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3304      	adds	r3, #4
 80015de:	2b06      	cmp	r3, #6
 80015e0:	d902      	bls.n	80015e8 <NVIC_EncodePriority+0x30>
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3b03      	subs	r3, #3
 80015e6:	e000      	b.n	80015ea <NVIC_EncodePriority+0x32>
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ec:	f04f 32ff 	mov.w	r2, #4294967295
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43da      	mvns	r2, r3
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	401a      	ands	r2, r3
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001600:	f04f 31ff 	mov.w	r1, #4294967295
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	fa01 f303 	lsl.w	r3, r1, r3
 800160a:	43d9      	mvns	r1, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	4313      	orrs	r3, r2
         );
}
 8001612:	4618      	mov	r0, r3
 8001614:	3724      	adds	r7, #36	@ 0x24
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3b01      	subs	r3, #1
 800162c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001630:	d301      	bcc.n	8001636 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001632:	2301      	movs	r3, #1
 8001634:	e00f      	b.n	8001656 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001636:	4a0a      	ldr	r2, [pc, #40]	@ (8001660 <SysTick_Config+0x40>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3b01      	subs	r3, #1
 800163c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800163e:	210f      	movs	r1, #15
 8001640:	f04f 30ff 	mov.w	r0, #4294967295
 8001644:	f7ff ff8e 	bl	8001564 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001648:	4b05      	ldr	r3, [pc, #20]	@ (8001660 <SysTick_Config+0x40>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800164e:	4b04      	ldr	r3, [pc, #16]	@ (8001660 <SysTick_Config+0x40>)
 8001650:	2207      	movs	r2, #7
 8001652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	e000e010 	.word	0xe000e010

08001664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff ff47 	bl	8001500 <__NVIC_SetPriorityGrouping>
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b086      	sub	sp, #24
 800167e:	af00      	add	r7, sp, #0
 8001680:	4603      	mov	r3, r0
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
 8001686:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001688:	f7ff ff5e 	bl	8001548 <__NVIC_GetPriorityGrouping>
 800168c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	68b9      	ldr	r1, [r7, #8]
 8001692:	6978      	ldr	r0, [r7, #20]
 8001694:	f7ff ff90 	bl	80015b8 <NVIC_EncodePriority>
 8001698:	4602      	mov	r2, r0
 800169a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169e:	4611      	mov	r1, r2
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff5f 	bl	8001564 <__NVIC_SetPriority>
}
 80016a6:	bf00      	nop
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ffb2 	bl	8001620 <SysTick_Config>
 80016bc:	4603      	mov	r3, r0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b085      	sub	sp, #20
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d005      	beq.n	80016ea <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2204      	movs	r2, #4
 80016e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	73fb      	strb	r3, [r7, #15]
 80016e8:	e037      	b.n	800175a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 020e 	bic.w	r2, r2, #14
 80016f8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001704:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001708:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 0201 	bic.w	r2, r2, #1
 8001718:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171e:	f003 021f 	and.w	r2, r3, #31
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001726:	2101      	movs	r1, #1
 8001728:	fa01 f202 	lsl.w	r2, r1, r2
 800172c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001736:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800173c:	2b00      	cmp	r3, #0
 800173e:	d00c      	beq.n	800175a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800174a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800174e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001758:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2201      	movs	r2, #1
 800175e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001790:	b480      	push	{r7}
 8001792:	b087      	sub	sp, #28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800179e:	e15a      	b.n	8001a56 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	2101      	movs	r1, #1
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ac:	4013      	ands	r3, r2
 80017ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 814c 	beq.w	8001a50 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d005      	beq.n	80017d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d130      	bne.n	8001832 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	2203      	movs	r2, #3
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	68da      	ldr	r2, [r3, #12]
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001806:	2201      	movs	r2, #1
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4013      	ands	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	091b      	lsrs	r3, r3, #4
 800181c:	f003 0201 	and.w	r2, r3, #1
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	2b03      	cmp	r3, #3
 800183c:	d017      	beq.n	800186e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	2203      	movs	r2, #3
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4013      	ands	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4313      	orrs	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d123      	bne.n	80018c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	08da      	lsrs	r2, r3, #3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	3208      	adds	r2, #8
 8001882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001886:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	220f      	movs	r2, #15
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	691a      	ldr	r2, [r3, #16]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	08da      	lsrs	r2, r3, #3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3208      	adds	r2, #8
 80018bc:	6939      	ldr	r1, [r7, #16]
 80018be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	2203      	movs	r2, #3
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	4013      	ands	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 0203 	and.w	r2, r3, #3
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f000 80a6 	beq.w	8001a50 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <HAL_GPIO_Init+0x2e4>)
 8001906:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001908:	4a5a      	ldr	r2, [pc, #360]	@ (8001a74 <HAL_GPIO_Init+0x2e4>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001910:	4b58      	ldr	r3, [pc, #352]	@ (8001a74 <HAL_GPIO_Init+0x2e4>)
 8001912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800191c:	4a56      	ldr	r2, [pc, #344]	@ (8001a78 <HAL_GPIO_Init+0x2e8>)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	089b      	lsrs	r3, r3, #2
 8001922:	3302      	adds	r3, #2
 8001924:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001928:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	220f      	movs	r2, #15
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001946:	d01f      	beq.n	8001988 <HAL_GPIO_Init+0x1f8>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a4c      	ldr	r2, [pc, #304]	@ (8001a7c <HAL_GPIO_Init+0x2ec>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d019      	beq.n	8001984 <HAL_GPIO_Init+0x1f4>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a4b      	ldr	r2, [pc, #300]	@ (8001a80 <HAL_GPIO_Init+0x2f0>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d013      	beq.n	8001980 <HAL_GPIO_Init+0x1f0>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a4a      	ldr	r2, [pc, #296]	@ (8001a84 <HAL_GPIO_Init+0x2f4>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d00d      	beq.n	800197c <HAL_GPIO_Init+0x1ec>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a49      	ldr	r2, [pc, #292]	@ (8001a88 <HAL_GPIO_Init+0x2f8>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d007      	beq.n	8001978 <HAL_GPIO_Init+0x1e8>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a48      	ldr	r2, [pc, #288]	@ (8001a8c <HAL_GPIO_Init+0x2fc>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d101      	bne.n	8001974 <HAL_GPIO_Init+0x1e4>
 8001970:	2305      	movs	r3, #5
 8001972:	e00a      	b.n	800198a <HAL_GPIO_Init+0x1fa>
 8001974:	2306      	movs	r3, #6
 8001976:	e008      	b.n	800198a <HAL_GPIO_Init+0x1fa>
 8001978:	2304      	movs	r3, #4
 800197a:	e006      	b.n	800198a <HAL_GPIO_Init+0x1fa>
 800197c:	2303      	movs	r3, #3
 800197e:	e004      	b.n	800198a <HAL_GPIO_Init+0x1fa>
 8001980:	2302      	movs	r3, #2
 8001982:	e002      	b.n	800198a <HAL_GPIO_Init+0x1fa>
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <HAL_GPIO_Init+0x1fa>
 8001988:	2300      	movs	r3, #0
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	f002 0203 	and.w	r2, r2, #3
 8001990:	0092      	lsls	r2, r2, #2
 8001992:	4093      	lsls	r3, r2
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4313      	orrs	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800199a:	4937      	ldr	r1, [pc, #220]	@ (8001a78 <HAL_GPIO_Init+0x2e8>)
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	089b      	lsrs	r3, r3, #2
 80019a0:	3302      	adds	r3, #2
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019a8:	4b39      	ldr	r3, [pc, #228]	@ (8001a90 <HAL_GPIO_Init+0x300>)
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019cc:	4a30      	ldr	r2, [pc, #192]	@ (8001a90 <HAL_GPIO_Init+0x300>)
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001a90 <HAL_GPIO_Init+0x300>)
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	43db      	mvns	r3, r3
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4013      	ands	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019f6:	4a26      	ldr	r2, [pc, #152]	@ (8001a90 <HAL_GPIO_Init+0x300>)
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80019fc:	4b24      	ldr	r3, [pc, #144]	@ (8001a90 <HAL_GPIO_Init+0x300>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	43db      	mvns	r3, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a20:	4a1b      	ldr	r2, [pc, #108]	@ (8001a90 <HAL_GPIO_Init+0x300>)
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a26:	4b1a      	ldr	r3, [pc, #104]	@ (8001a90 <HAL_GPIO_Init+0x300>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4013      	ands	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a4a:	4a11      	ldr	r2, [pc, #68]	@ (8001a90 <HAL_GPIO_Init+0x300>)
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	3301      	adds	r3, #1
 8001a54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f47f ae9d 	bne.w	80017a0 <HAL_GPIO_Init+0x10>
  }
}
 8001a66:	bf00      	nop
 8001a68:	bf00      	nop
 8001a6a:	371c      	adds	r7, #28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40010000 	.word	0x40010000
 8001a7c:	48000400 	.word	0x48000400
 8001a80:	48000800 	.word	0x48000800
 8001a84:	48000c00 	.word	0x48000c00
 8001a88:	48001000 	.word	0x48001000
 8001a8c:	48001400 	.word	0x48001400
 8001a90:	40010400 	.word	0x40010400

08001a94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691a      	ldr	r2, [r3, #16]
 8001aa4:	887b      	ldrh	r3, [r7, #2]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d002      	beq.n	8001ab2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001aac:	2301      	movs	r3, #1
 8001aae:	73fb      	strb	r3, [r7, #15]
 8001ab0:	e001      	b.n	8001ab6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	807b      	strh	r3, [r7, #2]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ad4:	787b      	ldrb	r3, [r7, #1]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ada:	887a      	ldrh	r2, [r7, #2]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ae0:	e002      	b.n	8001ae8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ae2:	887a      	ldrh	r2, [r7, #2]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d141      	bne.n	8001b86 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b02:	4b4b      	ldr	r3, [pc, #300]	@ (8001c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b0e:	d131      	bne.n	8001b74 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b10:	4b47      	ldr	r3, [pc, #284]	@ (8001c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b16:	4a46      	ldr	r2, [pc, #280]	@ (8001c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b20:	4b43      	ldr	r3, [pc, #268]	@ (8001c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b28:	4a41      	ldr	r2, [pc, #260]	@ (8001c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b30:	4b40      	ldr	r3, [pc, #256]	@ (8001c34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2232      	movs	r2, #50	@ 0x32
 8001b36:	fb02 f303 	mul.w	r3, r2, r3
 8001b3a:	4a3f      	ldr	r2, [pc, #252]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b40:	0c9b      	lsrs	r3, r3, #18
 8001b42:	3301      	adds	r3, #1
 8001b44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b46:	e002      	b.n	8001b4e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b4e:	4b38      	ldr	r3, [pc, #224]	@ (8001c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b5a:	d102      	bne.n	8001b62 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f2      	bne.n	8001b48 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b62:	4b33      	ldr	r3, [pc, #204]	@ (8001c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b6e:	d158      	bne.n	8001c22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e057      	b.n	8001c24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b74:	4b2e      	ldr	r3, [pc, #184]	@ (8001c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b7a:	4a2d      	ldr	r2, [pc, #180]	@ (8001c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001b84:	e04d      	b.n	8001c22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b8c:	d141      	bne.n	8001c12 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b8e:	4b28      	ldr	r3, [pc, #160]	@ (8001c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b9a:	d131      	bne.n	8001c00 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b9c:	4b24      	ldr	r3, [pc, #144]	@ (8001c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ba2:	4a23      	ldr	r2, [pc, #140]	@ (8001c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ba8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bac:	4b20      	ldr	r3, [pc, #128]	@ (8001c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bb4:	4a1e      	ldr	r2, [pc, #120]	@ (8001c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2232      	movs	r2, #50	@ 0x32
 8001bc2:	fb02 f303 	mul.w	r3, r2, r3
 8001bc6:	4a1c      	ldr	r2, [pc, #112]	@ (8001c38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bcc:	0c9b      	lsrs	r3, r3, #18
 8001bce:	3301      	adds	r3, #1
 8001bd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bd2:	e002      	b.n	8001bda <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bda:	4b15      	ldr	r3, [pc, #84]	@ (8001c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001be2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001be6:	d102      	bne.n	8001bee <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f2      	bne.n	8001bd4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bee:	4b10      	ldr	r3, [pc, #64]	@ (8001c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bfa:	d112      	bne.n	8001c22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e011      	b.n	8001c24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c00:	4b0b      	ldr	r3, [pc, #44]	@ (8001c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c06:	4a0a      	ldr	r2, [pc, #40]	@ (8001c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c10:	e007      	b.n	8001c22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c12:	4b07      	ldr	r3, [pc, #28]	@ (8001c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c1a:	4a05      	ldr	r2, [pc, #20]	@ (8001c30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c1c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c20:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	40007000 	.word	0x40007000
 8001c34:	20000010 	.word	0x20000010
 8001c38:	431bde83 	.word	0x431bde83

08001c3c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001c40:	4b05      	ldr	r3, [pc, #20]	@ (8001c58 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	4a04      	ldr	r2, [pc, #16]	@ (8001c58 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c4a:	6093      	str	r3, [r2, #8]
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40007000 	.word	0x40007000

08001c5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e2fe      	b.n	800226c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d075      	beq.n	8001d66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c7a:	4b97      	ldr	r3, [pc, #604]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c84:	4b94      	ldr	r3, [pc, #592]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	2b0c      	cmp	r3, #12
 8001c92:	d102      	bne.n	8001c9a <HAL_RCC_OscConfig+0x3e>
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	2b03      	cmp	r3, #3
 8001c98:	d002      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x44>
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	2b08      	cmp	r3, #8
 8001c9e:	d10b      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca0:	4b8d      	ldr	r3, [pc, #564]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d05b      	beq.n	8001d64 <HAL_RCC_OscConfig+0x108>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d157      	bne.n	8001d64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e2d9      	b.n	800226c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cc0:	d106      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x74>
 8001cc2:	4b85      	ldr	r3, [pc, #532]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a84      	ldr	r2, [pc, #528]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	e01d      	b.n	8001d0c <HAL_RCC_OscConfig+0xb0>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cd8:	d10c      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x98>
 8001cda:	4b7f      	ldr	r3, [pc, #508]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a7e      	ldr	r2, [pc, #504]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001ce0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	4b7c      	ldr	r3, [pc, #496]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a7b      	ldr	r2, [pc, #492]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001cec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	e00b      	b.n	8001d0c <HAL_RCC_OscConfig+0xb0>
 8001cf4:	4b78      	ldr	r3, [pc, #480]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a77      	ldr	r2, [pc, #476]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001cfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	4b75      	ldr	r3, [pc, #468]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a74      	ldr	r2, [pc, #464]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001d06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d013      	beq.n	8001d3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7ff fbc6 	bl	80014a4 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d1c:	f7ff fbc2 	bl	80014a4 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b64      	cmp	r3, #100	@ 0x64
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e29e      	b.n	800226c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d2e:	4b6a      	ldr	r3, [pc, #424]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0xc0>
 8001d3a:	e014      	b.n	8001d66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3c:	f7ff fbb2 	bl	80014a4 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d44:	f7ff fbae 	bl	80014a4 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b64      	cmp	r3, #100	@ 0x64
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e28a      	b.n	800226c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d56:	4b60      	ldr	r3, [pc, #384]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0xe8>
 8001d62:	e000      	b.n	8001d66 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d075      	beq.n	8001e5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d72:	4b59      	ldr	r3, [pc, #356]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 030c 	and.w	r3, r3, #12
 8001d7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d7c:	4b56      	ldr	r3, [pc, #344]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f003 0303 	and.w	r3, r3, #3
 8001d84:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	2b0c      	cmp	r3, #12
 8001d8a:	d102      	bne.n	8001d92 <HAL_RCC_OscConfig+0x136>
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d002      	beq.n	8001d98 <HAL_RCC_OscConfig+0x13c>
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	d11f      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d98:	4b4f      	ldr	r3, [pc, #316]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d005      	beq.n	8001db0 <HAL_RCC_OscConfig+0x154>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e25d      	b.n	800226c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db0:	4b49      	ldr	r3, [pc, #292]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	061b      	lsls	r3, r3, #24
 8001dbe:	4946      	ldr	r1, [pc, #280]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001dc4:	4b45      	ldr	r3, [pc, #276]	@ (8001edc <HAL_RCC_OscConfig+0x280>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff fb1f 	bl	800140c <HAL_InitTick>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d043      	beq.n	8001e5c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e249      	b.n	800226c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d023      	beq.n	8001e28 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001de0:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a3c      	ldr	r2, [pc, #240]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001de6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dec:	f7ff fb5a 	bl	80014a4 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df4:	f7ff fb56 	bl	80014a4 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e232      	b.n	800226c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e06:	4b34      	ldr	r3, [pc, #208]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e12:	4b31      	ldr	r3, [pc, #196]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	061b      	lsls	r3, r3, #24
 8001e20:	492d      	ldr	r1, [pc, #180]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	604b      	str	r3, [r1, #4]
 8001e26:	e01a      	b.n	8001e5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e28:	4b2b      	ldr	r3, [pc, #172]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a2a      	ldr	r2, [pc, #168]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001e2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e34:	f7ff fb36 	bl	80014a4 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e3c:	f7ff fb32 	bl	80014a4 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e20e      	b.n	800226c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e4e:	4b22      	ldr	r3, [pc, #136]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x1e0>
 8001e5a:	e000      	b.n	8001e5e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d041      	beq.n	8001eee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d01c      	beq.n	8001eac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e72:	4b19      	ldr	r3, [pc, #100]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e78:	4a17      	ldr	r2, [pc, #92]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e82:	f7ff fb0f 	bl	80014a4 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e8a:	f7ff fb0b 	bl	80014a4 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e1e7      	b.n	800226c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0ef      	beq.n	8001e8a <HAL_RCC_OscConfig+0x22e>
 8001eaa:	e020      	b.n	8001eee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eac:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eb2:	4a09      	ldr	r2, [pc, #36]	@ (8001ed8 <HAL_RCC_OscConfig+0x27c>)
 8001eb4:	f023 0301 	bic.w	r3, r3, #1
 8001eb8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ebc:	f7ff faf2 	bl	80014a4 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ec2:	e00d      	b.n	8001ee0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec4:	f7ff faee 	bl	80014a4 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d906      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e1ca      	b.n	800226c <HAL_RCC_OscConfig+0x610>
 8001ed6:	bf00      	nop
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ee0:	4b8c      	ldr	r3, [pc, #560]	@ (8002114 <HAL_RCC_OscConfig+0x4b8>)
 8001ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1ea      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 80a6 	beq.w	8002048 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001efc:	2300      	movs	r3, #0
 8001efe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f00:	4b84      	ldr	r3, [pc, #528]	@ (8002114 <HAL_RCC_OscConfig+0x4b8>)
 8001f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <HAL_RCC_OscConfig+0x2b4>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <HAL_RCC_OscConfig+0x2b6>
 8001f10:	2300      	movs	r3, #0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00d      	beq.n	8001f32 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f16:	4b7f      	ldr	r3, [pc, #508]	@ (8002114 <HAL_RCC_OscConfig+0x4b8>)
 8001f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1a:	4a7e      	ldr	r2, [pc, #504]	@ (8002114 <HAL_RCC_OscConfig+0x4b8>)
 8001f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f20:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f22:	4b7c      	ldr	r3, [pc, #496]	@ (8002114 <HAL_RCC_OscConfig+0x4b8>)
 8001f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f32:	4b79      	ldr	r3, [pc, #484]	@ (8002118 <HAL_RCC_OscConfig+0x4bc>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d118      	bne.n	8001f70 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f3e:	4b76      	ldr	r3, [pc, #472]	@ (8002118 <HAL_RCC_OscConfig+0x4bc>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a75      	ldr	r2, [pc, #468]	@ (8002118 <HAL_RCC_OscConfig+0x4bc>)
 8001f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f4a:	f7ff faab 	bl	80014a4 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f52:	f7ff faa7 	bl	80014a4 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e183      	b.n	800226c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f64:	4b6c      	ldr	r3, [pc, #432]	@ (8002118 <HAL_RCC_OscConfig+0x4bc>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0f0      	beq.n	8001f52 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d108      	bne.n	8001f8a <HAL_RCC_OscConfig+0x32e>
 8001f78:	4b66      	ldr	r3, [pc, #408]	@ (8002114 <HAL_RCC_OscConfig+0x4b8>)
 8001f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f7e:	4a65      	ldr	r2, [pc, #404]	@ (8002114 <HAL_RCC_OscConfig+0x4b8>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f88:	e024      	b.n	8001fd4 <HAL_RCC_OscConfig+0x378>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	2b05      	cmp	r3, #5
 8001f90:	d110      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x358>
 8001f92:	4b60      	ldr	r3, [pc, #384]	@ (8002114 <HAL_RCC_OscConfig+0x4b8>)
 8001f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f98:	4a5e      	ldr	r2, [pc, #376]	@ (8002114 <HAL_RCC_OscConfig+0x4b8>)
 8001f9a:	f043 0304 	orr.w	r3, r3, #4
 8001f9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fa2:	4b5c      	ldr	r3, [pc, #368]	@ (8002114 <HAL_RCC_OscConfig+0x4b8>)
 8001fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fa8:	4a5a      	ldr	r2, [pc, #360]	@ (8002114 <HAL_RCC_OscConfig+0x4b8>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fb2:	e00f      	b.n	8001fd4 <HAL_RCC_OscConfig+0x378>
 8001fb4:	4b57      	ldr	r3, [pc, #348]	@ (8002114 <HAL_RCC_OscConfig+0x4b8>)
 8001fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fba:	4a56      	ldr	r2, [pc, #344]	@ (8002114 <HAL_RCC_OscConfig+0x4b8>)
 8001fbc:	f023 0301 	bic.w	r3, r3, #1
 8001fc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fc4:	4b53      	ldr	r3, [pc, #332]	@ (8002114 <HAL_RCC_OscConfig+0x4b8>)
 8001fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fca:	4a52      	ldr	r2, [pc, #328]	@ (8002114 <HAL_RCC_OscConfig+0x4b8>)
 8001fcc:	f023 0304 	bic.w	r3, r3, #4
 8001fd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d016      	beq.n	800200a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fdc:	f7ff fa62 	bl	80014a4 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fe2:	e00a      	b.n	8001ffa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe4:	f7ff fa5e 	bl	80014a4 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e138      	b.n	800226c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ffa:	4b46      	ldr	r3, [pc, #280]	@ (8002114 <HAL_RCC_OscConfig+0x4b8>)
 8001ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0ed      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x388>
 8002008:	e015      	b.n	8002036 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200a:	f7ff fa4b 	bl	80014a4 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002010:	e00a      	b.n	8002028 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002012:	f7ff fa47 	bl	80014a4 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002020:	4293      	cmp	r3, r2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e121      	b.n	800226c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002028:	4b3a      	ldr	r3, [pc, #232]	@ (8002114 <HAL_RCC_OscConfig+0x4b8>)
 800202a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1ed      	bne.n	8002012 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002036:	7ffb      	ldrb	r3, [r7, #31]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d105      	bne.n	8002048 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800203c:	4b35      	ldr	r3, [pc, #212]	@ (8002114 <HAL_RCC_OscConfig+0x4b8>)
 800203e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002040:	4a34      	ldr	r2, [pc, #208]	@ (8002114 <HAL_RCC_OscConfig+0x4b8>)
 8002042:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002046:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0320 	and.w	r3, r3, #32
 8002050:	2b00      	cmp	r3, #0
 8002052:	d03c      	beq.n	80020ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d01c      	beq.n	8002096 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800205c:	4b2d      	ldr	r3, [pc, #180]	@ (8002114 <HAL_RCC_OscConfig+0x4b8>)
 800205e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002062:	4a2c      	ldr	r2, [pc, #176]	@ (8002114 <HAL_RCC_OscConfig+0x4b8>)
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206c:	f7ff fa1a 	bl	80014a4 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002074:	f7ff fa16 	bl	80014a4 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e0f2      	b.n	800226c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002086:	4b23      	ldr	r3, [pc, #140]	@ (8002114 <HAL_RCC_OscConfig+0x4b8>)
 8002088:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0ef      	beq.n	8002074 <HAL_RCC_OscConfig+0x418>
 8002094:	e01b      	b.n	80020ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002096:	4b1f      	ldr	r3, [pc, #124]	@ (8002114 <HAL_RCC_OscConfig+0x4b8>)
 8002098:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800209c:	4a1d      	ldr	r2, [pc, #116]	@ (8002114 <HAL_RCC_OscConfig+0x4b8>)
 800209e:	f023 0301 	bic.w	r3, r3, #1
 80020a2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a6:	f7ff f9fd 	bl	80014a4 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020ae:	f7ff f9f9 	bl	80014a4 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e0d5      	b.n	800226c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020c0:	4b14      	ldr	r3, [pc, #80]	@ (8002114 <HAL_RCC_OscConfig+0x4b8>)
 80020c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1ef      	bne.n	80020ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 80c9 	beq.w	800226a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002114 <HAL_RCC_OscConfig+0x4b8>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 030c 	and.w	r3, r3, #12
 80020e0:	2b0c      	cmp	r3, #12
 80020e2:	f000 8083 	beq.w	80021ec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d15e      	bne.n	80021ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ee:	4b09      	ldr	r3, [pc, #36]	@ (8002114 <HAL_RCC_OscConfig+0x4b8>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a08      	ldr	r2, [pc, #32]	@ (8002114 <HAL_RCC_OscConfig+0x4b8>)
 80020f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fa:	f7ff f9d3 	bl	80014a4 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002100:	e00c      	b.n	800211c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002102:	f7ff f9cf 	bl	80014a4 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d905      	bls.n	800211c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e0ab      	b.n	800226c <HAL_RCC_OscConfig+0x610>
 8002114:	40021000 	.word	0x40021000
 8002118:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800211c:	4b55      	ldr	r3, [pc, #340]	@ (8002274 <HAL_RCC_OscConfig+0x618>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1ec      	bne.n	8002102 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002128:	4b52      	ldr	r3, [pc, #328]	@ (8002274 <HAL_RCC_OscConfig+0x618>)
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	4b52      	ldr	r3, [pc, #328]	@ (8002278 <HAL_RCC_OscConfig+0x61c>)
 800212e:	4013      	ands	r3, r2
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6a11      	ldr	r1, [r2, #32]
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002138:	3a01      	subs	r2, #1
 800213a:	0112      	lsls	r2, r2, #4
 800213c:	4311      	orrs	r1, r2
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002142:	0212      	lsls	r2, r2, #8
 8002144:	4311      	orrs	r1, r2
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800214a:	0852      	lsrs	r2, r2, #1
 800214c:	3a01      	subs	r2, #1
 800214e:	0552      	lsls	r2, r2, #21
 8002150:	4311      	orrs	r1, r2
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002156:	0852      	lsrs	r2, r2, #1
 8002158:	3a01      	subs	r2, #1
 800215a:	0652      	lsls	r2, r2, #25
 800215c:	4311      	orrs	r1, r2
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002162:	06d2      	lsls	r2, r2, #27
 8002164:	430a      	orrs	r2, r1
 8002166:	4943      	ldr	r1, [pc, #268]	@ (8002274 <HAL_RCC_OscConfig+0x618>)
 8002168:	4313      	orrs	r3, r2
 800216a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800216c:	4b41      	ldr	r3, [pc, #260]	@ (8002274 <HAL_RCC_OscConfig+0x618>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a40      	ldr	r2, [pc, #256]	@ (8002274 <HAL_RCC_OscConfig+0x618>)
 8002172:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002176:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002178:	4b3e      	ldr	r3, [pc, #248]	@ (8002274 <HAL_RCC_OscConfig+0x618>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4a3d      	ldr	r2, [pc, #244]	@ (8002274 <HAL_RCC_OscConfig+0x618>)
 800217e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002182:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7ff f98e 	bl	80014a4 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218c:	f7ff f98a 	bl	80014a4 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e066      	b.n	800226c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219e:	4b35      	ldr	r3, [pc, #212]	@ (8002274 <HAL_RCC_OscConfig+0x618>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0x530>
 80021aa:	e05e      	b.n	800226a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ac:	4b31      	ldr	r3, [pc, #196]	@ (8002274 <HAL_RCC_OscConfig+0x618>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a30      	ldr	r2, [pc, #192]	@ (8002274 <HAL_RCC_OscConfig+0x618>)
 80021b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7ff f974 	bl	80014a4 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c0:	f7ff f970 	bl	80014a4 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e04c      	b.n	800226c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021d2:	4b28      	ldr	r3, [pc, #160]	@ (8002274 <HAL_RCC_OscConfig+0x618>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f0      	bne.n	80021c0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80021de:	4b25      	ldr	r3, [pc, #148]	@ (8002274 <HAL_RCC_OscConfig+0x618>)
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	4924      	ldr	r1, [pc, #144]	@ (8002274 <HAL_RCC_OscConfig+0x618>)
 80021e4:	4b25      	ldr	r3, [pc, #148]	@ (800227c <HAL_RCC_OscConfig+0x620>)
 80021e6:	4013      	ands	r3, r2
 80021e8:	60cb      	str	r3, [r1, #12]
 80021ea:	e03e      	b.n	800226a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e039      	b.n	800226c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80021f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002274 <HAL_RCC_OscConfig+0x618>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f003 0203 	and.w	r2, r3, #3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	429a      	cmp	r2, r3
 800220a:	d12c      	bne.n	8002266 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002216:	3b01      	subs	r3, #1
 8002218:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221a:	429a      	cmp	r2, r3
 800221c:	d123      	bne.n	8002266 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002228:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800222a:	429a      	cmp	r2, r3
 800222c:	d11b      	bne.n	8002266 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002238:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800223a:	429a      	cmp	r2, r3
 800223c:	d113      	bne.n	8002266 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002248:	085b      	lsrs	r3, r3, #1
 800224a:	3b01      	subs	r3, #1
 800224c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800224e:	429a      	cmp	r2, r3
 8002250:	d109      	bne.n	8002266 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800225c:	085b      	lsrs	r3, r3, #1
 800225e:	3b01      	subs	r3, #1
 8002260:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002262:	429a      	cmp	r2, r3
 8002264:	d001      	beq.n	800226a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3720      	adds	r7, #32
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40021000 	.word	0x40021000
 8002278:	019f800c 	.word	0x019f800c
 800227c:	feeefffc 	.word	0xfeeefffc

08002280 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e11e      	b.n	80024d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002298:	4b91      	ldr	r3, [pc, #580]	@ (80024e0 <HAL_RCC_ClockConfig+0x260>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 030f 	and.w	r3, r3, #15
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d910      	bls.n	80022c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a6:	4b8e      	ldr	r3, [pc, #568]	@ (80024e0 <HAL_RCC_ClockConfig+0x260>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f023 020f 	bic.w	r2, r3, #15
 80022ae:	498c      	ldr	r1, [pc, #560]	@ (80024e0 <HAL_RCC_ClockConfig+0x260>)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b6:	4b8a      	ldr	r3, [pc, #552]	@ (80024e0 <HAL_RCC_ClockConfig+0x260>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d001      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e106      	b.n	80024d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d073      	beq.n	80023bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b03      	cmp	r3, #3
 80022da:	d129      	bne.n	8002330 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022dc:	4b81      	ldr	r3, [pc, #516]	@ (80024e4 <HAL_RCC_ClockConfig+0x264>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0f4      	b.n	80024d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80022ec:	f000 f99e 	bl	800262c <RCC_GetSysClockFreqFromPLLSource>
 80022f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4a7c      	ldr	r2, [pc, #496]	@ (80024e8 <HAL_RCC_ClockConfig+0x268>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d93f      	bls.n	800237a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80022fa:	4b7a      	ldr	r3, [pc, #488]	@ (80024e4 <HAL_RCC_ClockConfig+0x264>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d009      	beq.n	800231a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800230e:	2b00      	cmp	r3, #0
 8002310:	d033      	beq.n	800237a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002316:	2b00      	cmp	r3, #0
 8002318:	d12f      	bne.n	800237a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800231a:	4b72      	ldr	r3, [pc, #456]	@ (80024e4 <HAL_RCC_ClockConfig+0x264>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002322:	4a70      	ldr	r2, [pc, #448]	@ (80024e4 <HAL_RCC_ClockConfig+0x264>)
 8002324:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002328:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800232a:	2380      	movs	r3, #128	@ 0x80
 800232c:	617b      	str	r3, [r7, #20]
 800232e:	e024      	b.n	800237a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b02      	cmp	r3, #2
 8002336:	d107      	bne.n	8002348 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002338:	4b6a      	ldr	r3, [pc, #424]	@ (80024e4 <HAL_RCC_ClockConfig+0x264>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d109      	bne.n	8002358 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0c6      	b.n	80024d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002348:	4b66      	ldr	r3, [pc, #408]	@ (80024e4 <HAL_RCC_ClockConfig+0x264>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e0be      	b.n	80024d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002358:	f000 f8ce 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 800235c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4a61      	ldr	r2, [pc, #388]	@ (80024e8 <HAL_RCC_ClockConfig+0x268>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d909      	bls.n	800237a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002366:	4b5f      	ldr	r3, [pc, #380]	@ (80024e4 <HAL_RCC_ClockConfig+0x264>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800236e:	4a5d      	ldr	r2, [pc, #372]	@ (80024e4 <HAL_RCC_ClockConfig+0x264>)
 8002370:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002374:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002376:	2380      	movs	r3, #128	@ 0x80
 8002378:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800237a:	4b5a      	ldr	r3, [pc, #360]	@ (80024e4 <HAL_RCC_ClockConfig+0x264>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f023 0203 	bic.w	r2, r3, #3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	4957      	ldr	r1, [pc, #348]	@ (80024e4 <HAL_RCC_ClockConfig+0x264>)
 8002388:	4313      	orrs	r3, r2
 800238a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800238c:	f7ff f88a 	bl	80014a4 <HAL_GetTick>
 8002390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002392:	e00a      	b.n	80023aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002394:	f7ff f886 	bl	80014a4 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e095      	b.n	80024d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023aa:	4b4e      	ldr	r3, [pc, #312]	@ (80024e4 <HAL_RCC_ClockConfig+0x264>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 020c 	and.w	r2, r3, #12
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d1eb      	bne.n	8002394 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d023      	beq.n	8002410 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023d4:	4b43      	ldr	r3, [pc, #268]	@ (80024e4 <HAL_RCC_ClockConfig+0x264>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	4a42      	ldr	r2, [pc, #264]	@ (80024e4 <HAL_RCC_ClockConfig+0x264>)
 80023da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0308 	and.w	r3, r3, #8
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d007      	beq.n	80023fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80023ec:	4b3d      	ldr	r3, [pc, #244]	@ (80024e4 <HAL_RCC_ClockConfig+0x264>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80023f4:	4a3b      	ldr	r2, [pc, #236]	@ (80024e4 <HAL_RCC_ClockConfig+0x264>)
 80023f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023fc:	4b39      	ldr	r3, [pc, #228]	@ (80024e4 <HAL_RCC_ClockConfig+0x264>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	4936      	ldr	r1, [pc, #216]	@ (80024e4 <HAL_RCC_ClockConfig+0x264>)
 800240a:	4313      	orrs	r3, r2
 800240c:	608b      	str	r3, [r1, #8]
 800240e:	e008      	b.n	8002422 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	2b80      	cmp	r3, #128	@ 0x80
 8002414:	d105      	bne.n	8002422 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002416:	4b33      	ldr	r3, [pc, #204]	@ (80024e4 <HAL_RCC_ClockConfig+0x264>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	4a32      	ldr	r2, [pc, #200]	@ (80024e4 <HAL_RCC_ClockConfig+0x264>)
 800241c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002420:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002422:	4b2f      	ldr	r3, [pc, #188]	@ (80024e0 <HAL_RCC_ClockConfig+0x260>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d21d      	bcs.n	800246c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002430:	4b2b      	ldr	r3, [pc, #172]	@ (80024e0 <HAL_RCC_ClockConfig+0x260>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f023 020f 	bic.w	r2, r3, #15
 8002438:	4929      	ldr	r1, [pc, #164]	@ (80024e0 <HAL_RCC_ClockConfig+0x260>)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	4313      	orrs	r3, r2
 800243e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002440:	f7ff f830 	bl	80014a4 <HAL_GetTick>
 8002444:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002446:	e00a      	b.n	800245e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002448:	f7ff f82c 	bl	80014a4 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002456:	4293      	cmp	r3, r2
 8002458:	d901      	bls.n	800245e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e03b      	b.n	80024d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800245e:	4b20      	ldr	r3, [pc, #128]	@ (80024e0 <HAL_RCC_ClockConfig+0x260>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d1ed      	bne.n	8002448 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	d008      	beq.n	800248a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002478:	4b1a      	ldr	r3, [pc, #104]	@ (80024e4 <HAL_RCC_ClockConfig+0x264>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	4917      	ldr	r1, [pc, #92]	@ (80024e4 <HAL_RCC_ClockConfig+0x264>)
 8002486:	4313      	orrs	r3, r2
 8002488:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d009      	beq.n	80024aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002496:	4b13      	ldr	r3, [pc, #76]	@ (80024e4 <HAL_RCC_ClockConfig+0x264>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	490f      	ldr	r1, [pc, #60]	@ (80024e4 <HAL_RCC_ClockConfig+0x264>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024aa:	f000 f825 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 80024ae:	4602      	mov	r2, r0
 80024b0:	4b0c      	ldr	r3, [pc, #48]	@ (80024e4 <HAL_RCC_ClockConfig+0x264>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	091b      	lsrs	r3, r3, #4
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	490c      	ldr	r1, [pc, #48]	@ (80024ec <HAL_RCC_ClockConfig+0x26c>)
 80024bc:	5ccb      	ldrb	r3, [r1, r3]
 80024be:	f003 031f 	and.w	r3, r3, #31
 80024c2:	fa22 f303 	lsr.w	r3, r2, r3
 80024c6:	4a0a      	ldr	r2, [pc, #40]	@ (80024f0 <HAL_RCC_ClockConfig+0x270>)
 80024c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80024ca:	4b0a      	ldr	r3, [pc, #40]	@ (80024f4 <HAL_RCC_ClockConfig+0x274>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe ff9c 	bl	800140c <HAL_InitTick>
 80024d4:	4603      	mov	r3, r0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40022000 	.word	0x40022000
 80024e4:	40021000 	.word	0x40021000
 80024e8:	04c4b400 	.word	0x04c4b400
 80024ec:	08005468 	.word	0x08005468
 80024f0:	20000010 	.word	0x20000010
 80024f4:	20000014 	.word	0x20000014

080024f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b087      	sub	sp, #28
 80024fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80024fe:	4b2c      	ldr	r3, [pc, #176]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 030c 	and.w	r3, r3, #12
 8002506:	2b04      	cmp	r3, #4
 8002508:	d102      	bne.n	8002510 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800250a:	4b2a      	ldr	r3, [pc, #168]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	e047      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002510:	4b27      	ldr	r3, [pc, #156]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 030c 	and.w	r3, r3, #12
 8002518:	2b08      	cmp	r3, #8
 800251a:	d102      	bne.n	8002522 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800251c:	4b26      	ldr	r3, [pc, #152]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	e03e      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002522:	4b23      	ldr	r3, [pc, #140]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	2b0c      	cmp	r3, #12
 800252c:	d136      	bne.n	800259c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800252e:	4b20      	ldr	r3, [pc, #128]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002538:	4b1d      	ldr	r3, [pc, #116]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	091b      	lsrs	r3, r3, #4
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	3301      	adds	r3, #1
 8002544:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2b03      	cmp	r3, #3
 800254a:	d10c      	bne.n	8002566 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800254c:	4a1a      	ldr	r2, [pc, #104]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	fbb2 f3f3 	udiv	r3, r2, r3
 8002554:	4a16      	ldr	r2, [pc, #88]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002556:	68d2      	ldr	r2, [r2, #12]
 8002558:	0a12      	lsrs	r2, r2, #8
 800255a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800255e:	fb02 f303 	mul.w	r3, r2, r3
 8002562:	617b      	str	r3, [r7, #20]
      break;
 8002564:	e00c      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002566:	4a13      	ldr	r2, [pc, #76]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	fbb2 f3f3 	udiv	r3, r2, r3
 800256e:	4a10      	ldr	r2, [pc, #64]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002570:	68d2      	ldr	r2, [r2, #12]
 8002572:	0a12      	lsrs	r2, r2, #8
 8002574:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002578:	fb02 f303 	mul.w	r3, r2, r3
 800257c:	617b      	str	r3, [r7, #20]
      break;
 800257e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002580:	4b0b      	ldr	r3, [pc, #44]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	0e5b      	lsrs	r3, r3, #25
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	3301      	adds	r3, #1
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	fbb2 f3f3 	udiv	r3, r2, r3
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	e001      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80025a0:	693b      	ldr	r3, [r7, #16]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	371c      	adds	r7, #28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40021000 	.word	0x40021000
 80025b4:	00f42400 	.word	0x00f42400
 80025b8:	007a1200 	.word	0x007a1200

080025bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025c0:	4b03      	ldr	r3, [pc, #12]	@ (80025d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80025c2:	681b      	ldr	r3, [r3, #0]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	20000010 	.word	0x20000010

080025d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025d8:	f7ff fff0 	bl	80025bc <HAL_RCC_GetHCLKFreq>
 80025dc:	4602      	mov	r2, r0
 80025de:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	0a1b      	lsrs	r3, r3, #8
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	4904      	ldr	r1, [pc, #16]	@ (80025fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80025ea:	5ccb      	ldrb	r3, [r1, r3]
 80025ec:	f003 031f 	and.w	r3, r3, #31
 80025f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40021000 	.word	0x40021000
 80025fc:	08005478 	.word	0x08005478

08002600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002604:	f7ff ffda 	bl	80025bc <HAL_RCC_GetHCLKFreq>
 8002608:	4602      	mov	r2, r0
 800260a:	4b06      	ldr	r3, [pc, #24]	@ (8002624 <HAL_RCC_GetPCLK2Freq+0x24>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	0adb      	lsrs	r3, r3, #11
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	4904      	ldr	r1, [pc, #16]	@ (8002628 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002616:	5ccb      	ldrb	r3, [r1, r3]
 8002618:	f003 031f 	and.w	r3, r3, #31
 800261c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002620:	4618      	mov	r0, r3
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40021000 	.word	0x40021000
 8002628:	08005478 	.word	0x08005478

0800262c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800262c:	b480      	push	{r7}
 800262e:	b087      	sub	sp, #28
 8002630:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002632:	4b1e      	ldr	r3, [pc, #120]	@ (80026ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800263c:	4b1b      	ldr	r3, [pc, #108]	@ (80026ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	091b      	lsrs	r3, r3, #4
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	3301      	adds	r3, #1
 8002648:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	2b03      	cmp	r3, #3
 800264e:	d10c      	bne.n	800266a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002650:	4a17      	ldr	r2, [pc, #92]	@ (80026b0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	fbb2 f3f3 	udiv	r3, r2, r3
 8002658:	4a14      	ldr	r2, [pc, #80]	@ (80026ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800265a:	68d2      	ldr	r2, [r2, #12]
 800265c:	0a12      	lsrs	r2, r2, #8
 800265e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002662:	fb02 f303 	mul.w	r3, r2, r3
 8002666:	617b      	str	r3, [r7, #20]
    break;
 8002668:	e00c      	b.n	8002684 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800266a:	4a12      	ldr	r2, [pc, #72]	@ (80026b4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002672:	4a0e      	ldr	r2, [pc, #56]	@ (80026ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002674:	68d2      	ldr	r2, [r2, #12]
 8002676:	0a12      	lsrs	r2, r2, #8
 8002678:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800267c:	fb02 f303 	mul.w	r3, r2, r3
 8002680:	617b      	str	r3, [r7, #20]
    break;
 8002682:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002684:	4b09      	ldr	r3, [pc, #36]	@ (80026ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	0e5b      	lsrs	r3, r3, #25
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	3301      	adds	r3, #1
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	fbb2 f3f3 	udiv	r3, r2, r3
 800269c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800269e:	687b      	ldr	r3, [r7, #4]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	371c      	adds	r7, #28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	40021000 	.word	0x40021000
 80026b0:	007a1200 	.word	0x007a1200
 80026b4:	00f42400 	.word	0x00f42400

080026b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026c0:	2300      	movs	r3, #0
 80026c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026c4:	2300      	movs	r3, #0
 80026c6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 8098 	beq.w	8002806 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026d6:	2300      	movs	r3, #0
 80026d8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026da:	4b43      	ldr	r3, [pc, #268]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10d      	bne.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e6:	4b40      	ldr	r3, [pc, #256]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ea:	4a3f      	ldr	r2, [pc, #252]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80026f2:	4b3d      	ldr	r3, [pc, #244]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026fe:	2301      	movs	r3, #1
 8002700:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002702:	4b3a      	ldr	r3, [pc, #232]	@ (80027ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a39      	ldr	r2, [pc, #228]	@ (80027ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002708:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800270c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800270e:	f7fe fec9 	bl	80014a4 <HAL_GetTick>
 8002712:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002714:	e009      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002716:	f7fe fec5 	bl	80014a4 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d902      	bls.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	74fb      	strb	r3, [r7, #19]
        break;
 8002728:	e005      	b.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800272a:	4b30      	ldr	r3, [pc, #192]	@ (80027ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0ef      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002736:	7cfb      	ldrb	r3, [r7, #19]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d159      	bne.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800273c:	4b2a      	ldr	r3, [pc, #168]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800273e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002742:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002746:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d01e      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	429a      	cmp	r2, r3
 8002756:	d019      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002758:	4b23      	ldr	r3, [pc, #140]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800275a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800275e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002762:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002764:	4b20      	ldr	r3, [pc, #128]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800276a:	4a1f      	ldr	r2, [pc, #124]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800276c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002770:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002774:	4b1c      	ldr	r3, [pc, #112]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800277a:	4a1b      	ldr	r2, [pc, #108]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800277c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002780:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002784:	4a18      	ldr	r2, [pc, #96]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d016      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002796:	f7fe fe85 	bl	80014a4 <HAL_GetTick>
 800279a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800279c:	e00b      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800279e:	f7fe fe81 	bl	80014a4 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d902      	bls.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	74fb      	strb	r3, [r7, #19]
            break;
 80027b4:	e006      	b.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027b6:	4b0c      	ldr	r3, [pc, #48]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0ec      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80027c4:	7cfb      	ldrb	r3, [r7, #19]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10b      	bne.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027ca:	4b07      	ldr	r3, [pc, #28]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d8:	4903      	ldr	r1, [pc, #12]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80027e0:	e008      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027e2:	7cfb      	ldrb	r3, [r7, #19]
 80027e4:	74bb      	strb	r3, [r7, #18]
 80027e6:	e005      	b.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80027e8:	40021000 	.word	0x40021000
 80027ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027f0:	7cfb      	ldrb	r3, [r7, #19]
 80027f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027f4:	7c7b      	ldrb	r3, [r7, #17]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d105      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027fa:	4ba6      	ldr	r3, [pc, #664]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fe:	4aa5      	ldr	r2, [pc, #660]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002800:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002804:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00a      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002812:	4ba0      	ldr	r3, [pc, #640]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002818:	f023 0203 	bic.w	r2, r3, #3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	499c      	ldr	r1, [pc, #624]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00a      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002834:	4b97      	ldr	r3, [pc, #604]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283a:	f023 020c 	bic.w	r2, r3, #12
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	4994      	ldr	r1, [pc, #592]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002844:	4313      	orrs	r3, r2
 8002846:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00a      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002856:	4b8f      	ldr	r3, [pc, #572]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800285c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	498b      	ldr	r1, [pc, #556]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002866:	4313      	orrs	r3, r2
 8002868:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0308 	and.w	r3, r3, #8
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00a      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002878:	4b86      	ldr	r3, [pc, #536]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800287a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800287e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	4983      	ldr	r1, [pc, #524]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0320 	and.w	r3, r3, #32
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00a      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800289a:	4b7e      	ldr	r3, [pc, #504]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800289c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	497a      	ldr	r1, [pc, #488]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028bc:	4b75      	ldr	r3, [pc, #468]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	4972      	ldr	r1, [pc, #456]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028de:	4b6d      	ldr	r3, [pc, #436]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	4969      	ldr	r1, [pc, #420]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00a      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002900:	4b64      	ldr	r3, [pc, #400]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002906:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	4961      	ldr	r1, [pc, #388]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002922:	4b5c      	ldr	r3, [pc, #368]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002928:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002930:	4958      	ldr	r1, [pc, #352]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002932:	4313      	orrs	r3, r2
 8002934:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002940:	2b00      	cmp	r3, #0
 8002942:	d015      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002944:	4b53      	ldr	r3, [pc, #332]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800294a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002952:	4950      	ldr	r1, [pc, #320]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002954:	4313      	orrs	r3, r2
 8002956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800295e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002962:	d105      	bne.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002964:	4b4b      	ldr	r3, [pc, #300]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	4a4a      	ldr	r2, [pc, #296]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800296a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800296e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002978:	2b00      	cmp	r3, #0
 800297a:	d015      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800297c:	4b45      	ldr	r3, [pc, #276]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002982:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298a:	4942      	ldr	r1, [pc, #264]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800298c:	4313      	orrs	r3, r2
 800298e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002996:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800299a:	d105      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800299c:	4b3d      	ldr	r3, [pc, #244]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	4a3c      	ldr	r2, [pc, #240]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029a6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d015      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80029b4:	4b37      	ldr	r3, [pc, #220]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ba:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c2:	4934      	ldr	r1, [pc, #208]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029d2:	d105      	bne.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029d4:	4b2f      	ldr	r3, [pc, #188]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	4a2e      	ldr	r2, [pc, #184]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d015      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029ec:	4b29      	ldr	r3, [pc, #164]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029fa:	4926      	ldr	r1, [pc, #152]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a0a:	d105      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a0c:	4b21      	ldr	r3, [pc, #132]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	4a20      	ldr	r2, [pc, #128]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a16:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d015      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a24:	4b1b      	ldr	r3, [pc, #108]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a32:	4918      	ldr	r1, [pc, #96]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a42:	d105      	bne.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a44:	4b13      	ldr	r3, [pc, #76]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	4a12      	ldr	r2, [pc, #72]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a4e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d015      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a62:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a6a:	490a      	ldr	r1, [pc, #40]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a7a:	d105      	bne.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a7c:	4b05      	ldr	r3, [pc, #20]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4a04      	ldr	r2, [pc, #16]	@ (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a86:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002a88:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40021000 	.word	0x40021000

08002a98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e09d      	b.n	8002be6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d108      	bne.n	8002ac4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002aba:	d009      	beq.n	8002ad0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	61da      	str	r2, [r3, #28]
 8002ac2:	e005      	b.n	8002ad0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d106      	bne.n	8002af0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7fe faaa 	bl	8001044 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b06:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b10:	d902      	bls.n	8002b18 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	e002      	b.n	8002b1e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b1c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002b26:	d007      	beq.n	8002b38 <HAL_SPI_Init+0xa0>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b30:	d002      	beq.n	8002b38 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	695b      	ldr	r3, [r3, #20]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	431a      	orrs	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b70:	431a      	orrs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b7a:	ea42 0103 	orr.w	r1, r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b82:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	0c1b      	lsrs	r3, r3, #16
 8002b94:	f003 0204 	and.w	r2, r3, #4
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9c:	f003 0310 	and.w	r3, r3, #16
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002bb4:	ea42 0103 	orr.w	r1, r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	69da      	ldr	r2, [r3, #28]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b088      	sub	sp, #32
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	603b      	str	r3, [r7, #0]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d101      	bne.n	8002c10 <HAL_SPI_Transmit+0x22>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e15f      	b.n	8002ed0 <HAL_SPI_Transmit+0x2e2>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c18:	f7fe fc44 	bl	80014a4 <HAL_GetTick>
 8002c1c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c1e:	88fb      	ldrh	r3, [r7, #6]
 8002c20:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d002      	beq.n	8002c34 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c32:	e148      	b.n	8002ec6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <HAL_SPI_Transmit+0x52>
 8002c3a:	88fb      	ldrh	r3, [r7, #6]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d102      	bne.n	8002c46 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c44:	e13f      	b.n	8002ec6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2203      	movs	r2, #3
 8002c4a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	88fa      	ldrh	r2, [r7, #6]
 8002c5e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	88fa      	ldrh	r2, [r7, #6]
 8002c64:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c90:	d10f      	bne.n	8002cb2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ca0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cb0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cbc:	2b40      	cmp	r3, #64	@ 0x40
 8002cbe:	d007      	beq.n	8002cd0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002cd8:	d94f      	bls.n	8002d7a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <HAL_SPI_Transmit+0xfa>
 8002ce2:	8afb      	ldrh	r3, [r7, #22]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d142      	bne.n	8002d6e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cec:	881a      	ldrh	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf8:	1c9a      	adds	r2, r3, #2
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	3b01      	subs	r3, #1
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d0c:	e02f      	b.n	8002d6e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d112      	bne.n	8002d42 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d20:	881a      	ldrh	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d2c:	1c9a      	adds	r2, r3, #2
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d40:	e015      	b.n	8002d6e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d42:	f7fe fbaf 	bl	80014a4 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d803      	bhi.n	8002d5a <HAL_SPI_Transmit+0x16c>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d58:	d102      	bne.n	8002d60 <HAL_SPI_Transmit+0x172>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d106      	bne.n	8002d6e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002d6c:	e0ab      	b.n	8002ec6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1ca      	bne.n	8002d0e <HAL_SPI_Transmit+0x120>
 8002d78:	e080      	b.n	8002e7c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d002      	beq.n	8002d88 <HAL_SPI_Transmit+0x19a>
 8002d82:	8afb      	ldrh	r3, [r7, #22]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d174      	bne.n	8002e72 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d912      	bls.n	8002db8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d96:	881a      	ldrh	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da2:	1c9a      	adds	r2, r3, #2
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	3b02      	subs	r3, #2
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002db6:	e05c      	b.n	8002e72 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	330c      	adds	r3, #12
 8002dc2:	7812      	ldrb	r2, [r2, #0]
 8002dc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002dde:	e048      	b.n	8002e72 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d12b      	bne.n	8002e46 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d912      	bls.n	8002e1e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dfc:	881a      	ldrh	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e08:	1c9a      	adds	r2, r3, #2
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	3b02      	subs	r3, #2
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e1c:	e029      	b.n	8002e72 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	330c      	adds	r3, #12
 8002e28:	7812      	ldrb	r2, [r2, #0]
 8002e2a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e44:	e015      	b.n	8002e72 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e46:	f7fe fb2d 	bl	80014a4 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d803      	bhi.n	8002e5e <HAL_SPI_Transmit+0x270>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5c:	d102      	bne.n	8002e64 <HAL_SPI_Transmit+0x276>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d106      	bne.n	8002e72 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002e70:	e029      	b.n	8002ec6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1b1      	bne.n	8002de0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	6839      	ldr	r1, [r7, #0]
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 f947 	bl	8003114 <SPI_EndRxTxTransaction>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d002      	beq.n	8002e92 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10a      	bne.n	8002eb0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	77fb      	strb	r3, [r7, #31]
 8002ebc:	e003      	b.n	8002ec6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002ece:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3720      	adds	r7, #32
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b088      	sub	sp, #32
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ee8:	f7fe fadc 	bl	80014a4 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ef8:	f7fe fad4 	bl	80014a4 <HAL_GetTick>
 8002efc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002efe:	4b39      	ldr	r3, [pc, #228]	@ (8002fe4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	015b      	lsls	r3, r3, #5
 8002f04:	0d1b      	lsrs	r3, r3, #20
 8002f06:	69fa      	ldr	r2, [r7, #28]
 8002f08:	fb02 f303 	mul.w	r3, r2, r3
 8002f0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f0e:	e054      	b.n	8002fba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f16:	d050      	beq.n	8002fba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f18:	f7fe fac4 	bl	80014a4 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	69fa      	ldr	r2, [r7, #28]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d902      	bls.n	8002f2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d13d      	bne.n	8002faa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002f3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f46:	d111      	bne.n	8002f6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f50:	d004      	beq.n	8002f5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f5a:	d107      	bne.n	8002f6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f74:	d10f      	bne.n	8002f96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e017      	b.n	8002fda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	bf0c      	ite	eq
 8002fca:	2301      	moveq	r3, #1
 8002fcc:	2300      	movne	r3, #0
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d19b      	bne.n	8002f10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3720      	adds	r7, #32
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20000010 	.word	0x20000010

08002fe8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08a      	sub	sp, #40	@ 0x28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002ffa:	f7fe fa53 	bl	80014a4 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003002:	1a9b      	subs	r3, r3, r2
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	4413      	add	r3, r2
 8003008:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800300a:	f7fe fa4b 	bl	80014a4 <HAL_GetTick>
 800300e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	330c      	adds	r3, #12
 8003016:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003018:	4b3d      	ldr	r3, [pc, #244]	@ (8003110 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	4613      	mov	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	00da      	lsls	r2, r3, #3
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	0d1b      	lsrs	r3, r3, #20
 8003028:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800302a:	fb02 f303 	mul.w	r3, r2, r3
 800302e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003030:	e060      	b.n	80030f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003038:	d107      	bne.n	800304a <SPI_WaitFifoStateUntilTimeout+0x62>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d104      	bne.n	800304a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	b2db      	uxtb	r3, r3
 8003046:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003048:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003050:	d050      	beq.n	80030f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003052:	f7fe fa27 	bl	80014a4 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800305e:	429a      	cmp	r2, r3
 8003060:	d902      	bls.n	8003068 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003064:	2b00      	cmp	r3, #0
 8003066:	d13d      	bne.n	80030e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003076:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003080:	d111      	bne.n	80030a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800308a:	d004      	beq.n	8003096 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003094:	d107      	bne.n	80030a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030ae:	d10f      	bne.n	80030d0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e010      	b.n	8003106 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	3b01      	subs	r3, #1
 80030f2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	4013      	ands	r3, r2
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	429a      	cmp	r2, r3
 8003102:	d196      	bne.n	8003032 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3728      	adds	r7, #40	@ 0x28
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	20000010 	.word	0x20000010

08003114 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af02      	add	r7, sp, #8
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2200      	movs	r2, #0
 8003128:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f7ff ff5b 	bl	8002fe8 <SPI_WaitFifoStateUntilTimeout>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d007      	beq.n	8003148 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800313c:	f043 0220 	orr.w	r2, r3, #32
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e027      	b.n	8003198 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2200      	movs	r2, #0
 8003150:	2180      	movs	r1, #128	@ 0x80
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f7ff fec0 	bl	8002ed8 <SPI_WaitFlagStateUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d007      	beq.n	800316e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003162:	f043 0220 	orr.w	r2, r3, #32
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e014      	b.n	8003198 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2200      	movs	r2, #0
 8003176:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f7ff ff34 	bl	8002fe8 <SPI_WaitFifoStateUntilTimeout>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d007      	beq.n	8003196 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800318a:	f043 0220 	orr.w	r2, r3, #32
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e000      	b.n	8003198 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e042      	b.n	8003238 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d106      	bne.n	80031ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7fd ff7f 	bl	80010c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2224      	movs	r2, #36	@ 0x24
 80031ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0201 	bic.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d002      	beq.n	80031f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 fd58 	bl	8003ca0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 fa89 	bl	8003708 <UART_SetConfig>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e01b      	b.n	8003238 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800320e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689a      	ldr	r2, [r3, #8]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800321e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0201 	orr.w	r2, r2, #1
 800322e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 fdd7 	bl	8003de4 <UART_CheckIdleState>
 8003236:	4603      	mov	r3, r0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08a      	sub	sp, #40	@ 0x28
 8003244:	af02      	add	r7, sp, #8
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	603b      	str	r3, [r7, #0]
 800324c:	4613      	mov	r3, r2
 800324e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003256:	2b20      	cmp	r3, #32
 8003258:	d17b      	bne.n	8003352 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d002      	beq.n	8003266 <HAL_UART_Transmit+0x26>
 8003260:	88fb      	ldrh	r3, [r7, #6]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e074      	b.n	8003354 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2221      	movs	r2, #33	@ 0x21
 8003276:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800327a:	f7fe f913 	bl	80014a4 <HAL_GetTick>
 800327e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	88fa      	ldrh	r2, [r7, #6]
 8003284:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	88fa      	ldrh	r2, [r7, #6]
 800328c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003298:	d108      	bne.n	80032ac <HAL_UART_Transmit+0x6c>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d104      	bne.n	80032ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	61bb      	str	r3, [r7, #24]
 80032aa:	e003      	b.n	80032b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032b4:	e030      	b.n	8003318 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2200      	movs	r2, #0
 80032be:	2180      	movs	r1, #128	@ 0x80
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 fe39 	bl	8003f38 <UART_WaitOnFlagUntilTimeout>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2220      	movs	r2, #32
 80032d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e03d      	b.n	8003354 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10b      	bne.n	80032f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	461a      	mov	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032ec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	3302      	adds	r3, #2
 80032f2:	61bb      	str	r3, [r7, #24]
 80032f4:	e007      	b.n	8003306 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	781a      	ldrb	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	3301      	adds	r3, #1
 8003304:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800330c:	b29b      	uxth	r3, r3
 800330e:	3b01      	subs	r3, #1
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800331e:	b29b      	uxth	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1c8      	bne.n	80032b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	2200      	movs	r2, #0
 800332c:	2140      	movs	r1, #64	@ 0x40
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 fe02 	bl	8003f38 <UART_WaitOnFlagUntilTimeout>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d005      	beq.n	8003346 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2220      	movs	r2, #32
 800333e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e006      	b.n	8003354 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2220      	movs	r2, #32
 800334a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800334e:	2300      	movs	r3, #0
 8003350:	e000      	b.n	8003354 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003352:	2302      	movs	r3, #2
  }
}
 8003354:	4618      	mov	r0, r3
 8003356:	3720      	adds	r7, #32
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b08a      	sub	sp, #40	@ 0x28
 8003360:	af02      	add	r7, sp, #8
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	603b      	str	r3, [r7, #0]
 8003368:	4613      	mov	r3, r2
 800336a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003372:	2b20      	cmp	r3, #32
 8003374:	f040 80b5 	bne.w	80034e2 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d002      	beq.n	8003384 <HAL_UART_Receive+0x28>
 800337e:	88fb      	ldrh	r3, [r7, #6]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e0ad      	b.n	80034e4 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2222      	movs	r2, #34	@ 0x22
 8003394:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800339e:	f7fe f881 	bl	80014a4 <HAL_GetTick>
 80033a2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	88fa      	ldrh	r2, [r7, #6]
 80033a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	88fa      	ldrh	r2, [r7, #6]
 80033b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033bc:	d10e      	bne.n	80033dc <HAL_UART_Receive+0x80>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d105      	bne.n	80033d2 <HAL_UART_Receive+0x76>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80033cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80033d0:	e02d      	b.n	800342e <HAL_UART_Receive+0xd2>
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	22ff      	movs	r2, #255	@ 0xff
 80033d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80033da:	e028      	b.n	800342e <HAL_UART_Receive+0xd2>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10d      	bne.n	8003400 <HAL_UART_Receive+0xa4>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d104      	bne.n	80033f6 <HAL_UART_Receive+0x9a>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	22ff      	movs	r2, #255	@ 0xff
 80033f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80033f4:	e01b      	b.n	800342e <HAL_UART_Receive+0xd2>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	227f      	movs	r2, #127	@ 0x7f
 80033fa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80033fe:	e016      	b.n	800342e <HAL_UART_Receive+0xd2>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003408:	d10d      	bne.n	8003426 <HAL_UART_Receive+0xca>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d104      	bne.n	800341c <HAL_UART_Receive+0xc0>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	227f      	movs	r2, #127	@ 0x7f
 8003416:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800341a:	e008      	b.n	800342e <HAL_UART_Receive+0xd2>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	223f      	movs	r2, #63	@ 0x3f
 8003420:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003424:	e003      	b.n	800342e <HAL_UART_Receive+0xd2>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003434:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800343e:	d108      	bne.n	8003452 <HAL_UART_Receive+0xf6>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d104      	bne.n	8003452 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003448:	2300      	movs	r3, #0
 800344a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	61bb      	str	r3, [r7, #24]
 8003450:	e003      	b.n	800345a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003456:	2300      	movs	r3, #0
 8003458:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800345a:	e036      	b.n	80034ca <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	2200      	movs	r2, #0
 8003464:	2120      	movs	r1, #32
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 fd66 	bl	8003f38 <UART_WaitOnFlagUntilTimeout>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d005      	beq.n	800347e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2220      	movs	r2, #32
 8003476:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e032      	b.n	80034e4 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10c      	bne.n	800349e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348a:	b29a      	uxth	r2, r3
 800348c:	8a7b      	ldrh	r3, [r7, #18]
 800348e:	4013      	ands	r3, r2
 8003490:	b29a      	uxth	r2, r3
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	3302      	adds	r3, #2
 800349a:	61bb      	str	r3, [r7, #24]
 800349c:	e00c      	b.n	80034b8 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	8a7b      	ldrh	r3, [r7, #18]
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	4013      	ands	r3, r2
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	3301      	adds	r3, #1
 80034b6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80034be:	b29b      	uxth	r3, r3
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1c2      	bne.n	800345c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2220      	movs	r2, #32
 80034da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80034de:	2300      	movs	r3, #0
 80034e0:	e000      	b.n	80034e4 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80034e2:	2302      	movs	r3, #2
  }
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3720      	adds	r7, #32
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b0a0      	sub	sp, #128	@ 0x80
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034fc:	e853 3f00 	ldrex	r3, [r3]
 8003500:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8003502:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003504:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8003508:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	461a      	mov	r2, r3
 8003510:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003512:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003514:	667a      	str	r2, [r7, #100]	@ 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003516:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003518:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800351a:	e841 2300 	strex	r3, r2, [r1]
 800351e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8003520:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1e6      	bne.n	80034f4 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	3308      	adds	r3, #8
 800352c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003530:	e853 3f00 	ldrex	r3, [r3]
 8003534:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003536:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003538:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 800353c:	f023 0301 	bic.w	r3, r3, #1
 8003540:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	3308      	adds	r3, #8
 8003548:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800354a:	657a      	str	r2, [r7, #84]	@ 0x54
 800354c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003550:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003552:	e841 2300 	strex	r3, r2, [r1]
 8003556:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003558:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1e3      	bne.n	8003526 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003562:	2b01      	cmp	r3, #1
 8003564:	d118      	bne.n	8003598 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800356e:	e853 3f00 	ldrex	r3, [r3]
 8003572:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003576:	f023 0310 	bic.w	r3, r3, #16
 800357a:	677b      	str	r3, [r7, #116]	@ 0x74
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	461a      	mov	r2, r3
 8003582:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003584:	643b      	str	r3, [r7, #64]	@ 0x40
 8003586:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003588:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800358a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800358c:	e841 2300 	strex	r3, r2, [r1]
 8003590:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1e6      	bne.n	8003566 <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a2:	2b80      	cmp	r3, #128	@ 0x80
 80035a4:	d137      	bne.n	8003616 <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	3308      	adds	r3, #8
 80035ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	e853 3f00 	ldrex	r3, [r3]
 80035b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	3308      	adds	r3, #8
 80035c4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80035c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035ce:	e841 2300 	strex	r3, r2, [r1]
 80035d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1e5      	bne.n	80035a6 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d019      	beq.n	8003616 <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035e6:	2200      	movs	r2, #0
 80035e8:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fe f869 	bl	80016c6 <HAL_DMA_Abort>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00d      	beq.n	8003616 <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fe f8ba 	bl	8001778 <HAL_DMA_GetError>
 8003604:	4603      	mov	r3, r0
 8003606:	2b20      	cmp	r3, #32
 8003608:	d105      	bne.n	8003616 <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2210      	movs	r2, #16
 800360e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e073      	b.n	80036fe <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003620:	2b40      	cmp	r3, #64	@ 0x40
 8003622:	d13b      	bne.n	800369c <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	3308      	adds	r3, #8
 800362a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	e853 3f00 	ldrex	r3, [r3]
 8003632:	60bb      	str	r3, [r7, #8]
   return(result);
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800363a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	3308      	adds	r3, #8
 8003642:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003644:	61ba      	str	r2, [r7, #24]
 8003646:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003648:	6979      	ldr	r1, [r7, #20]
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	e841 2300 	strex	r3, r2, [r1]
 8003650:	613b      	str	r3, [r7, #16]
   return(result);
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e5      	bne.n	8003624 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800365e:	2b00      	cmp	r3, #0
 8003660:	d01c      	beq.n	800369c <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003668:	2200      	movs	r2, #0
 800366a:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003672:	4618      	mov	r0, r3
 8003674:	f7fe f827 	bl	80016c6 <HAL_DMA_Abort>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00e      	beq.n	800369c <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003684:	4618      	mov	r0, r3
 8003686:	f7fe f877 	bl	8001778 <HAL_DMA_GetError>
 800368a:	4603      	mov	r3, r0
 800368c:	2b20      	cmp	r3, #32
 800368e:	d105      	bne.n	800369c <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2210      	movs	r2, #16
 8003694:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e030      	b.n	80036fe <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	220f      	movs	r2, #15
 80036b2:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036bc:	d107      	bne.n	80036ce <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	699a      	ldr	r2, [r3, #24]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f042 0210 	orr.w	r2, r2, #16
 80036cc:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	699a      	ldr	r2, [r3, #24]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f042 0208 	orr.w	r2, r2, #8
 80036dc:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3780      	adds	r7, #128	@ 0x80
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
	...

08003708 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800370c:	b08c      	sub	sp, #48	@ 0x30
 800370e:	af00      	add	r7, sp, #0
 8003710:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	431a      	orrs	r2, r3
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	431a      	orrs	r2, r3
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	4313      	orrs	r3, r2
 800372e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	4bab      	ldr	r3, [pc, #684]	@ (80039e4 <UART_SetConfig+0x2dc>)
 8003738:	4013      	ands	r3, r2
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	6812      	ldr	r2, [r2, #0]
 800373e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003740:	430b      	orrs	r3, r1
 8003742:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4aa0      	ldr	r2, [pc, #640]	@ (80039e8 <UART_SetConfig+0x2e0>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d004      	beq.n	8003774 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	6a1b      	ldr	r3, [r3, #32]
 800376e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003770:	4313      	orrs	r3, r2
 8003772:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800377e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	6812      	ldr	r2, [r2, #0]
 8003786:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003788:	430b      	orrs	r3, r1
 800378a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003792:	f023 010f 	bic.w	r1, r3, #15
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a91      	ldr	r2, [pc, #580]	@ (80039ec <UART_SetConfig+0x2e4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d125      	bne.n	80037f8 <UART_SetConfig+0xf0>
 80037ac:	4b90      	ldr	r3, [pc, #576]	@ (80039f0 <UART_SetConfig+0x2e8>)
 80037ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	2b03      	cmp	r3, #3
 80037b8:	d81a      	bhi.n	80037f0 <UART_SetConfig+0xe8>
 80037ba:	a201      	add	r2, pc, #4	@ (adr r2, 80037c0 <UART_SetConfig+0xb8>)
 80037bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c0:	080037d1 	.word	0x080037d1
 80037c4:	080037e1 	.word	0x080037e1
 80037c8:	080037d9 	.word	0x080037d9
 80037cc:	080037e9 	.word	0x080037e9
 80037d0:	2301      	movs	r3, #1
 80037d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037d6:	e0d6      	b.n	8003986 <UART_SetConfig+0x27e>
 80037d8:	2302      	movs	r3, #2
 80037da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037de:	e0d2      	b.n	8003986 <UART_SetConfig+0x27e>
 80037e0:	2304      	movs	r3, #4
 80037e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037e6:	e0ce      	b.n	8003986 <UART_SetConfig+0x27e>
 80037e8:	2308      	movs	r3, #8
 80037ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037ee:	e0ca      	b.n	8003986 <UART_SetConfig+0x27e>
 80037f0:	2310      	movs	r3, #16
 80037f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037f6:	e0c6      	b.n	8003986 <UART_SetConfig+0x27e>
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a7d      	ldr	r2, [pc, #500]	@ (80039f4 <UART_SetConfig+0x2ec>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d138      	bne.n	8003874 <UART_SetConfig+0x16c>
 8003802:	4b7b      	ldr	r3, [pc, #492]	@ (80039f0 <UART_SetConfig+0x2e8>)
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003808:	f003 030c 	and.w	r3, r3, #12
 800380c:	2b0c      	cmp	r3, #12
 800380e:	d82d      	bhi.n	800386c <UART_SetConfig+0x164>
 8003810:	a201      	add	r2, pc, #4	@ (adr r2, 8003818 <UART_SetConfig+0x110>)
 8003812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003816:	bf00      	nop
 8003818:	0800384d 	.word	0x0800384d
 800381c:	0800386d 	.word	0x0800386d
 8003820:	0800386d 	.word	0x0800386d
 8003824:	0800386d 	.word	0x0800386d
 8003828:	0800385d 	.word	0x0800385d
 800382c:	0800386d 	.word	0x0800386d
 8003830:	0800386d 	.word	0x0800386d
 8003834:	0800386d 	.word	0x0800386d
 8003838:	08003855 	.word	0x08003855
 800383c:	0800386d 	.word	0x0800386d
 8003840:	0800386d 	.word	0x0800386d
 8003844:	0800386d 	.word	0x0800386d
 8003848:	08003865 	.word	0x08003865
 800384c:	2300      	movs	r3, #0
 800384e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003852:	e098      	b.n	8003986 <UART_SetConfig+0x27e>
 8003854:	2302      	movs	r3, #2
 8003856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800385a:	e094      	b.n	8003986 <UART_SetConfig+0x27e>
 800385c:	2304      	movs	r3, #4
 800385e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003862:	e090      	b.n	8003986 <UART_SetConfig+0x27e>
 8003864:	2308      	movs	r3, #8
 8003866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800386a:	e08c      	b.n	8003986 <UART_SetConfig+0x27e>
 800386c:	2310      	movs	r3, #16
 800386e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003872:	e088      	b.n	8003986 <UART_SetConfig+0x27e>
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a5f      	ldr	r2, [pc, #380]	@ (80039f8 <UART_SetConfig+0x2f0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d125      	bne.n	80038ca <UART_SetConfig+0x1c2>
 800387e:	4b5c      	ldr	r3, [pc, #368]	@ (80039f0 <UART_SetConfig+0x2e8>)
 8003880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003884:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003888:	2b30      	cmp	r3, #48	@ 0x30
 800388a:	d016      	beq.n	80038ba <UART_SetConfig+0x1b2>
 800388c:	2b30      	cmp	r3, #48	@ 0x30
 800388e:	d818      	bhi.n	80038c2 <UART_SetConfig+0x1ba>
 8003890:	2b20      	cmp	r3, #32
 8003892:	d00a      	beq.n	80038aa <UART_SetConfig+0x1a2>
 8003894:	2b20      	cmp	r3, #32
 8003896:	d814      	bhi.n	80038c2 <UART_SetConfig+0x1ba>
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <UART_SetConfig+0x19a>
 800389c:	2b10      	cmp	r3, #16
 800389e:	d008      	beq.n	80038b2 <UART_SetConfig+0x1aa>
 80038a0:	e00f      	b.n	80038c2 <UART_SetConfig+0x1ba>
 80038a2:	2300      	movs	r3, #0
 80038a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038a8:	e06d      	b.n	8003986 <UART_SetConfig+0x27e>
 80038aa:	2302      	movs	r3, #2
 80038ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038b0:	e069      	b.n	8003986 <UART_SetConfig+0x27e>
 80038b2:	2304      	movs	r3, #4
 80038b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038b8:	e065      	b.n	8003986 <UART_SetConfig+0x27e>
 80038ba:	2308      	movs	r3, #8
 80038bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038c0:	e061      	b.n	8003986 <UART_SetConfig+0x27e>
 80038c2:	2310      	movs	r3, #16
 80038c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038c8:	e05d      	b.n	8003986 <UART_SetConfig+0x27e>
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a4b      	ldr	r2, [pc, #300]	@ (80039fc <UART_SetConfig+0x2f4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d125      	bne.n	8003920 <UART_SetConfig+0x218>
 80038d4:	4b46      	ldr	r3, [pc, #280]	@ (80039f0 <UART_SetConfig+0x2e8>)
 80038d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038da:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80038de:	2bc0      	cmp	r3, #192	@ 0xc0
 80038e0:	d016      	beq.n	8003910 <UART_SetConfig+0x208>
 80038e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80038e4:	d818      	bhi.n	8003918 <UART_SetConfig+0x210>
 80038e6:	2b80      	cmp	r3, #128	@ 0x80
 80038e8:	d00a      	beq.n	8003900 <UART_SetConfig+0x1f8>
 80038ea:	2b80      	cmp	r3, #128	@ 0x80
 80038ec:	d814      	bhi.n	8003918 <UART_SetConfig+0x210>
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <UART_SetConfig+0x1f0>
 80038f2:	2b40      	cmp	r3, #64	@ 0x40
 80038f4:	d008      	beq.n	8003908 <UART_SetConfig+0x200>
 80038f6:	e00f      	b.n	8003918 <UART_SetConfig+0x210>
 80038f8:	2300      	movs	r3, #0
 80038fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038fe:	e042      	b.n	8003986 <UART_SetConfig+0x27e>
 8003900:	2302      	movs	r3, #2
 8003902:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003906:	e03e      	b.n	8003986 <UART_SetConfig+0x27e>
 8003908:	2304      	movs	r3, #4
 800390a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800390e:	e03a      	b.n	8003986 <UART_SetConfig+0x27e>
 8003910:	2308      	movs	r3, #8
 8003912:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003916:	e036      	b.n	8003986 <UART_SetConfig+0x27e>
 8003918:	2310      	movs	r3, #16
 800391a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800391e:	e032      	b.n	8003986 <UART_SetConfig+0x27e>
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a30      	ldr	r2, [pc, #192]	@ (80039e8 <UART_SetConfig+0x2e0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d12a      	bne.n	8003980 <UART_SetConfig+0x278>
 800392a:	4b31      	ldr	r3, [pc, #196]	@ (80039f0 <UART_SetConfig+0x2e8>)
 800392c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003930:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003934:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003938:	d01a      	beq.n	8003970 <UART_SetConfig+0x268>
 800393a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800393e:	d81b      	bhi.n	8003978 <UART_SetConfig+0x270>
 8003940:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003944:	d00c      	beq.n	8003960 <UART_SetConfig+0x258>
 8003946:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800394a:	d815      	bhi.n	8003978 <UART_SetConfig+0x270>
 800394c:	2b00      	cmp	r3, #0
 800394e:	d003      	beq.n	8003958 <UART_SetConfig+0x250>
 8003950:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003954:	d008      	beq.n	8003968 <UART_SetConfig+0x260>
 8003956:	e00f      	b.n	8003978 <UART_SetConfig+0x270>
 8003958:	2300      	movs	r3, #0
 800395a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800395e:	e012      	b.n	8003986 <UART_SetConfig+0x27e>
 8003960:	2302      	movs	r3, #2
 8003962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003966:	e00e      	b.n	8003986 <UART_SetConfig+0x27e>
 8003968:	2304      	movs	r3, #4
 800396a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800396e:	e00a      	b.n	8003986 <UART_SetConfig+0x27e>
 8003970:	2308      	movs	r3, #8
 8003972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003976:	e006      	b.n	8003986 <UART_SetConfig+0x27e>
 8003978:	2310      	movs	r3, #16
 800397a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800397e:	e002      	b.n	8003986 <UART_SetConfig+0x27e>
 8003980:	2310      	movs	r3, #16
 8003982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a17      	ldr	r2, [pc, #92]	@ (80039e8 <UART_SetConfig+0x2e0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	f040 80a8 	bne.w	8003ae2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003992:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003996:	2b08      	cmp	r3, #8
 8003998:	d834      	bhi.n	8003a04 <UART_SetConfig+0x2fc>
 800399a:	a201      	add	r2, pc, #4	@ (adr r2, 80039a0 <UART_SetConfig+0x298>)
 800399c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a0:	080039c5 	.word	0x080039c5
 80039a4:	08003a05 	.word	0x08003a05
 80039a8:	080039cd 	.word	0x080039cd
 80039ac:	08003a05 	.word	0x08003a05
 80039b0:	080039d3 	.word	0x080039d3
 80039b4:	08003a05 	.word	0x08003a05
 80039b8:	08003a05 	.word	0x08003a05
 80039bc:	08003a05 	.word	0x08003a05
 80039c0:	080039db 	.word	0x080039db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039c4:	f7fe fe06 	bl	80025d4 <HAL_RCC_GetPCLK1Freq>
 80039c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039ca:	e021      	b.n	8003a10 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003a00 <UART_SetConfig+0x2f8>)
 80039ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039d0:	e01e      	b.n	8003a10 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039d2:	f7fe fd91 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 80039d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80039d8:	e01a      	b.n	8003a10 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80039e0:	e016      	b.n	8003a10 <UART_SetConfig+0x308>
 80039e2:	bf00      	nop
 80039e4:	cfff69f3 	.word	0xcfff69f3
 80039e8:	40008000 	.word	0x40008000
 80039ec:	40013800 	.word	0x40013800
 80039f0:	40021000 	.word	0x40021000
 80039f4:	40004400 	.word	0x40004400
 80039f8:	40004800 	.word	0x40004800
 80039fc:	40004c00 	.word	0x40004c00
 8003a00:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003a04:	2300      	movs	r3, #0
 8003a06:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003a0e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 812a 	beq.w	8003c6c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1c:	4a9e      	ldr	r2, [pc, #632]	@ (8003c98 <UART_SetConfig+0x590>)
 8003a1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a22:	461a      	mov	r2, r3
 8003a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a26:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	4613      	mov	r3, r2
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	4413      	add	r3, r2
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d305      	bcc.n	8003a48 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d903      	bls.n	8003a50 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003a4e:	e10d      	b.n	8003c6c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a52:	2200      	movs	r2, #0
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	60fa      	str	r2, [r7, #12]
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5c:	4a8e      	ldr	r2, [pc, #568]	@ (8003c98 <UART_SetConfig+0x590>)
 8003a5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	2200      	movs	r2, #0
 8003a66:	603b      	str	r3, [r7, #0]
 8003a68:	607a      	str	r2, [r7, #4]
 8003a6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003a72:	f7fc fc35 	bl	80002e0 <__aeabi_uldivmod>
 8003a76:	4602      	mov	r2, r0
 8003a78:	460b      	mov	r3, r1
 8003a7a:	4610      	mov	r0, r2
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	020b      	lsls	r3, r1, #8
 8003a88:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003a8c:	0202      	lsls	r2, r0, #8
 8003a8e:	6979      	ldr	r1, [r7, #20]
 8003a90:	6849      	ldr	r1, [r1, #4]
 8003a92:	0849      	lsrs	r1, r1, #1
 8003a94:	2000      	movs	r0, #0
 8003a96:	460c      	mov	r4, r1
 8003a98:	4605      	mov	r5, r0
 8003a9a:	eb12 0804 	adds.w	r8, r2, r4
 8003a9e:	eb43 0905 	adc.w	r9, r3, r5
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	469a      	mov	sl, r3
 8003aaa:	4693      	mov	fp, r2
 8003aac:	4652      	mov	r2, sl
 8003aae:	465b      	mov	r3, fp
 8003ab0:	4640      	mov	r0, r8
 8003ab2:	4649      	mov	r1, r9
 8003ab4:	f7fc fc14 	bl	80002e0 <__aeabi_uldivmod>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	460b      	mov	r3, r1
 8003abc:	4613      	mov	r3, r2
 8003abe:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ac0:	6a3b      	ldr	r3, [r7, #32]
 8003ac2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ac6:	d308      	bcc.n	8003ada <UART_SetConfig+0x3d2>
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
 8003aca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ace:	d204      	bcs.n	8003ada <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6a3a      	ldr	r2, [r7, #32]
 8003ad6:	60da      	str	r2, [r3, #12]
 8003ad8:	e0c8      	b.n	8003c6c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003ae0:	e0c4      	b.n	8003c6c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003aea:	d167      	bne.n	8003bbc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003aec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003af0:	2b08      	cmp	r3, #8
 8003af2:	d828      	bhi.n	8003b46 <UART_SetConfig+0x43e>
 8003af4:	a201      	add	r2, pc, #4	@ (adr r2, 8003afc <UART_SetConfig+0x3f4>)
 8003af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afa:	bf00      	nop
 8003afc:	08003b21 	.word	0x08003b21
 8003b00:	08003b29 	.word	0x08003b29
 8003b04:	08003b31 	.word	0x08003b31
 8003b08:	08003b47 	.word	0x08003b47
 8003b0c:	08003b37 	.word	0x08003b37
 8003b10:	08003b47 	.word	0x08003b47
 8003b14:	08003b47 	.word	0x08003b47
 8003b18:	08003b47 	.word	0x08003b47
 8003b1c:	08003b3f 	.word	0x08003b3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b20:	f7fe fd58 	bl	80025d4 <HAL_RCC_GetPCLK1Freq>
 8003b24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b26:	e014      	b.n	8003b52 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b28:	f7fe fd6a 	bl	8002600 <HAL_RCC_GetPCLK2Freq>
 8003b2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b2e:	e010      	b.n	8003b52 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b30:	4b5a      	ldr	r3, [pc, #360]	@ (8003c9c <UART_SetConfig+0x594>)
 8003b32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b34:	e00d      	b.n	8003b52 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b36:	f7fe fcdf 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 8003b3a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b3c:	e009      	b.n	8003b52 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b44:	e005      	b.n	8003b52 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003b46:	2300      	movs	r3, #0
 8003b48:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003b50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 8089 	beq.w	8003c6c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5e:	4a4e      	ldr	r2, [pc, #312]	@ (8003c98 <UART_SetConfig+0x590>)
 8003b60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b64:	461a      	mov	r2, r3
 8003b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b68:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b6c:	005a      	lsls	r2, r3, #1
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	085b      	lsrs	r3, r3, #1
 8003b74:	441a      	add	r2, r3
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	2b0f      	cmp	r3, #15
 8003b84:	d916      	bls.n	8003bb4 <UART_SetConfig+0x4ac>
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b8c:	d212      	bcs.n	8003bb4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	f023 030f 	bic.w	r3, r3, #15
 8003b96:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	085b      	lsrs	r3, r3, #1
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	f003 0307 	and.w	r3, r3, #7
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	8bfb      	ldrh	r3, [r7, #30]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	8bfa      	ldrh	r2, [r7, #30]
 8003bb0:	60da      	str	r2, [r3, #12]
 8003bb2:	e05b      	b.n	8003c6c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003bba:	e057      	b.n	8003c6c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bbc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d828      	bhi.n	8003c16 <UART_SetConfig+0x50e>
 8003bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8003bcc <UART_SetConfig+0x4c4>)
 8003bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bca:	bf00      	nop
 8003bcc:	08003bf1 	.word	0x08003bf1
 8003bd0:	08003bf9 	.word	0x08003bf9
 8003bd4:	08003c01 	.word	0x08003c01
 8003bd8:	08003c17 	.word	0x08003c17
 8003bdc:	08003c07 	.word	0x08003c07
 8003be0:	08003c17 	.word	0x08003c17
 8003be4:	08003c17 	.word	0x08003c17
 8003be8:	08003c17 	.word	0x08003c17
 8003bec:	08003c0f 	.word	0x08003c0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bf0:	f7fe fcf0 	bl	80025d4 <HAL_RCC_GetPCLK1Freq>
 8003bf4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bf6:	e014      	b.n	8003c22 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bf8:	f7fe fd02 	bl	8002600 <HAL_RCC_GetPCLK2Freq>
 8003bfc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bfe:	e010      	b.n	8003c22 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c00:	4b26      	ldr	r3, [pc, #152]	@ (8003c9c <UART_SetConfig+0x594>)
 8003c02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c04:	e00d      	b.n	8003c22 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c06:	f7fe fc77 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 8003c0a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c0c:	e009      	b.n	8003c22 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c14:	e005      	b.n	8003c22 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003c20:	bf00      	nop
    }

    if (pclk != 0U)
 8003c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d021      	beq.n	8003c6c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2c:	4a1a      	ldr	r2, [pc, #104]	@ (8003c98 <UART_SetConfig+0x590>)
 8003c2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c32:	461a      	mov	r2, r3
 8003c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c36:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	085b      	lsrs	r3, r3, #1
 8003c40:	441a      	add	r2, r3
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	2b0f      	cmp	r3, #15
 8003c50:	d909      	bls.n	8003c66 <UART_SetConfig+0x55e>
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c58:	d205      	bcs.n	8003c66 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c5a:	6a3b      	ldr	r3, [r7, #32]
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	60da      	str	r2, [r3, #12]
 8003c64:	e002      	b.n	8003c6c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2200      	movs	r2, #0
 8003c86:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003c88:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3730      	adds	r7, #48	@ 0x30
 8003c90:	46bd      	mov	sp, r7
 8003c92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c96:	bf00      	nop
 8003c98:	08005480 	.word	0x08005480
 8003c9c:	00f42400 	.word	0x00f42400

08003ca0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d34:	f003 0310 	and.w	r3, r3, #16
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d56:	f003 0320 	and.w	r3, r3, #32
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d01a      	beq.n	8003db6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d9e:	d10a      	bne.n	8003db6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00a      	beq.n	8003dd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	605a      	str	r2, [r3, #4]
  }
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b098      	sub	sp, #96	@ 0x60
 8003de8:	af02      	add	r7, sp, #8
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003df4:	f7fd fb56 	bl	80014a4 <HAL_GetTick>
 8003df8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b08      	cmp	r3, #8
 8003e06:	d12f      	bne.n	8003e68 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e10:	2200      	movs	r2, #0
 8003e12:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f88e 	bl	8003f38 <UART_WaitOnFlagUntilTimeout>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d022      	beq.n	8003e68 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e2a:	e853 3f00 	ldrex	r3, [r3]
 8003e2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e36:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e40:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e42:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e48:	e841 2300 	strex	r3, r2, [r1]
 8003e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1e6      	bne.n	8003e22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e063      	b.n	8003f30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0304 	and.w	r3, r3, #4
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d149      	bne.n	8003f0a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e76:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f857 	bl	8003f38 <UART_WaitOnFlagUntilTimeout>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d03c      	beq.n	8003f0a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e98:	e853 3f00 	ldrex	r3, [r3]
 8003e9c:	623b      	str	r3, [r7, #32]
   return(result);
 8003e9e:	6a3b      	ldr	r3, [r7, #32]
 8003ea0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ea4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003eae:	633b      	str	r3, [r7, #48]	@ 0x30
 8003eb0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003eb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eb6:	e841 2300 	strex	r3, r2, [r1]
 8003eba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1e6      	bne.n	8003e90 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3308      	adds	r3, #8
 8003ec8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	e853 3f00 	ldrex	r3, [r3]
 8003ed0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f023 0301 	bic.w	r3, r3, #1
 8003ed8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3308      	adds	r3, #8
 8003ee0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ee2:	61fa      	str	r2, [r7, #28]
 8003ee4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee6:	69b9      	ldr	r1, [r7, #24]
 8003ee8:	69fa      	ldr	r2, [r7, #28]
 8003eea:	e841 2300 	strex	r3, r2, [r1]
 8003eee:	617b      	str	r3, [r7, #20]
   return(result);
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1e5      	bne.n	8003ec2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e012      	b.n	8003f30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3758      	adds	r7, #88	@ 0x58
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	603b      	str	r3, [r7, #0]
 8003f44:	4613      	mov	r3, r2
 8003f46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f48:	e04f      	b.n	8003fea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f50:	d04b      	beq.n	8003fea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f52:	f7fd faa7 	bl	80014a4 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d302      	bcc.n	8003f68 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e04e      	b.n	800400a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0304 	and.w	r3, r3, #4
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d037      	beq.n	8003fea <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2b80      	cmp	r3, #128	@ 0x80
 8003f7e:	d034      	beq.n	8003fea <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2b40      	cmp	r3, #64	@ 0x40
 8003f84:	d031      	beq.n	8003fea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	f003 0308 	and.w	r3, r3, #8
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d110      	bne.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2208      	movs	r2, #8
 8003f9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 f838 	bl	8004012 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2208      	movs	r2, #8
 8003fa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e029      	b.n	800400a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fc4:	d111      	bne.n	8003fea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003fce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 f81e 	bl	8004012 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e00f      	b.n	800400a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	69da      	ldr	r2, [r3, #28]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	bf0c      	ite	eq
 8003ffa:	2301      	moveq	r3, #1
 8003ffc:	2300      	movne	r3, #0
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	461a      	mov	r2, r3
 8004002:	79fb      	ldrb	r3, [r7, #7]
 8004004:	429a      	cmp	r2, r3
 8004006:	d0a0      	beq.n	8003f4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004012:	b480      	push	{r7}
 8004014:	b095      	sub	sp, #84	@ 0x54
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004022:	e853 3f00 	ldrex	r3, [r3]
 8004026:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800402e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	461a      	mov	r2, r3
 8004036:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004038:	643b      	str	r3, [r7, #64]	@ 0x40
 800403a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800403e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004040:	e841 2300 	strex	r3, r2, [r1]
 8004044:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1e6      	bne.n	800401a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3308      	adds	r3, #8
 8004052:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	e853 3f00 	ldrex	r3, [r3]
 800405a:	61fb      	str	r3, [r7, #28]
   return(result);
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004062:	f023 0301 	bic.w	r3, r3, #1
 8004066:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3308      	adds	r3, #8
 800406e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004070:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004072:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004074:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004076:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004078:	e841 2300 	strex	r3, r2, [r1]
 800407c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800407e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1e3      	bne.n	800404c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004088:	2b01      	cmp	r3, #1
 800408a:	d118      	bne.n	80040be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	e853 3f00 	ldrex	r3, [r3]
 8004098:	60bb      	str	r3, [r7, #8]
   return(result);
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	f023 0310 	bic.w	r3, r3, #16
 80040a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040aa:	61bb      	str	r3, [r7, #24]
 80040ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ae:	6979      	ldr	r1, [r7, #20]
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	e841 2300 	strex	r3, r2, [r1]
 80040b6:	613b      	str	r3, [r7, #16]
   return(result);
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1e6      	bne.n	800408c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2220      	movs	r2, #32
 80040c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80040d2:	bf00      	nop
 80040d4:	3754      	adds	r7, #84	@ 0x54
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80040de:	b480      	push	{r7}
 80040e0:	b085      	sub	sp, #20
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d101      	bne.n	80040f4 <HAL_UARTEx_DisableFifoMode+0x16>
 80040f0:	2302      	movs	r3, #2
 80040f2:	e027      	b.n	8004144 <HAL_UARTEx_DisableFifoMode+0x66>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2224      	movs	r2, #36	@ 0x24
 8004100:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0201 	bic.w	r2, r2, #1
 800411a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004122:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2220      	movs	r2, #32
 8004136:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004164:	2302      	movs	r3, #2
 8004166:	e02d      	b.n	80041c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2224      	movs	r2, #36	@ 0x24
 8004174:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0201 	bic.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f84f 	bl	8004248 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d101      	bne.n	80041e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80041e0:	2302      	movs	r3, #2
 80041e2:	e02d      	b.n	8004240 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2224      	movs	r2, #36	@ 0x24
 80041f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 0201 	bic.w	r2, r2, #1
 800420a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 f811 	bl	8004248 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2220      	movs	r2, #32
 8004232:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004254:	2b00      	cmp	r3, #0
 8004256:	d108      	bne.n	800426a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004268:	e031      	b.n	80042ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800426a:	2308      	movs	r3, #8
 800426c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800426e:	2308      	movs	r3, #8
 8004270:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	0e5b      	lsrs	r3, r3, #25
 800427a:	b2db      	uxtb	r3, r3
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	0f5b      	lsrs	r3, r3, #29
 800428a:	b2db      	uxtb	r3, r3
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004292:	7bbb      	ldrb	r3, [r7, #14]
 8004294:	7b3a      	ldrb	r2, [r7, #12]
 8004296:	4911      	ldr	r1, [pc, #68]	@ (80042dc <UARTEx_SetNbDataToProcess+0x94>)
 8004298:	5c8a      	ldrb	r2, [r1, r2]
 800429a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800429e:	7b3a      	ldrb	r2, [r7, #12]
 80042a0:	490f      	ldr	r1, [pc, #60]	@ (80042e0 <UARTEx_SetNbDataToProcess+0x98>)
 80042a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80042a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
 80042b2:	7b7a      	ldrb	r2, [r7, #13]
 80042b4:	4909      	ldr	r1, [pc, #36]	@ (80042dc <UARTEx_SetNbDataToProcess+0x94>)
 80042b6:	5c8a      	ldrb	r2, [r1, r2]
 80042b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80042bc:	7b7a      	ldrb	r2, [r7, #13]
 80042be:	4908      	ldr	r1, [pc, #32]	@ (80042e0 <UARTEx_SetNbDataToProcess+0x98>)
 80042c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80042c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80042ce:	bf00      	nop
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	08005498 	.word	0x08005498
 80042e0:	080054a0 	.word	0x080054a0

080042e4 <atoi>:
 80042e4:	220a      	movs	r2, #10
 80042e6:	2100      	movs	r1, #0
 80042e8:	f000 b87a 	b.w	80043e0 <strtol>

080042ec <_strtol_l.constprop.0>:
 80042ec:	2b24      	cmp	r3, #36	@ 0x24
 80042ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042f2:	4686      	mov	lr, r0
 80042f4:	4690      	mov	r8, r2
 80042f6:	d801      	bhi.n	80042fc <_strtol_l.constprop.0+0x10>
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d106      	bne.n	800430a <_strtol_l.constprop.0+0x1e>
 80042fc:	f000 fa3c 	bl	8004778 <__errno>
 8004300:	2316      	movs	r3, #22
 8004302:	6003      	str	r3, [r0, #0]
 8004304:	2000      	movs	r0, #0
 8004306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800430a:	4834      	ldr	r0, [pc, #208]	@ (80043dc <_strtol_l.constprop.0+0xf0>)
 800430c:	460d      	mov	r5, r1
 800430e:	462a      	mov	r2, r5
 8004310:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004314:	5d06      	ldrb	r6, [r0, r4]
 8004316:	f016 0608 	ands.w	r6, r6, #8
 800431a:	d1f8      	bne.n	800430e <_strtol_l.constprop.0+0x22>
 800431c:	2c2d      	cmp	r4, #45	@ 0x2d
 800431e:	d12d      	bne.n	800437c <_strtol_l.constprop.0+0x90>
 8004320:	782c      	ldrb	r4, [r5, #0]
 8004322:	2601      	movs	r6, #1
 8004324:	1c95      	adds	r5, r2, #2
 8004326:	f033 0210 	bics.w	r2, r3, #16
 800432a:	d109      	bne.n	8004340 <_strtol_l.constprop.0+0x54>
 800432c:	2c30      	cmp	r4, #48	@ 0x30
 800432e:	d12a      	bne.n	8004386 <_strtol_l.constprop.0+0x9a>
 8004330:	782a      	ldrb	r2, [r5, #0]
 8004332:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004336:	2a58      	cmp	r2, #88	@ 0x58
 8004338:	d125      	bne.n	8004386 <_strtol_l.constprop.0+0x9a>
 800433a:	786c      	ldrb	r4, [r5, #1]
 800433c:	2310      	movs	r3, #16
 800433e:	3502      	adds	r5, #2
 8004340:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004344:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004348:	2200      	movs	r2, #0
 800434a:	fbbc f9f3 	udiv	r9, ip, r3
 800434e:	4610      	mov	r0, r2
 8004350:	fb03 ca19 	mls	sl, r3, r9, ip
 8004354:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004358:	2f09      	cmp	r7, #9
 800435a:	d81b      	bhi.n	8004394 <_strtol_l.constprop.0+0xa8>
 800435c:	463c      	mov	r4, r7
 800435e:	42a3      	cmp	r3, r4
 8004360:	dd27      	ble.n	80043b2 <_strtol_l.constprop.0+0xc6>
 8004362:	1c57      	adds	r7, r2, #1
 8004364:	d007      	beq.n	8004376 <_strtol_l.constprop.0+0x8a>
 8004366:	4581      	cmp	r9, r0
 8004368:	d320      	bcc.n	80043ac <_strtol_l.constprop.0+0xc0>
 800436a:	d101      	bne.n	8004370 <_strtol_l.constprop.0+0x84>
 800436c:	45a2      	cmp	sl, r4
 800436e:	db1d      	blt.n	80043ac <_strtol_l.constprop.0+0xc0>
 8004370:	fb00 4003 	mla	r0, r0, r3, r4
 8004374:	2201      	movs	r2, #1
 8004376:	f815 4b01 	ldrb.w	r4, [r5], #1
 800437a:	e7eb      	b.n	8004354 <_strtol_l.constprop.0+0x68>
 800437c:	2c2b      	cmp	r4, #43	@ 0x2b
 800437e:	bf04      	itt	eq
 8004380:	782c      	ldrbeq	r4, [r5, #0]
 8004382:	1c95      	addeq	r5, r2, #2
 8004384:	e7cf      	b.n	8004326 <_strtol_l.constprop.0+0x3a>
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1da      	bne.n	8004340 <_strtol_l.constprop.0+0x54>
 800438a:	2c30      	cmp	r4, #48	@ 0x30
 800438c:	bf0c      	ite	eq
 800438e:	2308      	moveq	r3, #8
 8004390:	230a      	movne	r3, #10
 8004392:	e7d5      	b.n	8004340 <_strtol_l.constprop.0+0x54>
 8004394:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004398:	2f19      	cmp	r7, #25
 800439a:	d801      	bhi.n	80043a0 <_strtol_l.constprop.0+0xb4>
 800439c:	3c37      	subs	r4, #55	@ 0x37
 800439e:	e7de      	b.n	800435e <_strtol_l.constprop.0+0x72>
 80043a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80043a4:	2f19      	cmp	r7, #25
 80043a6:	d804      	bhi.n	80043b2 <_strtol_l.constprop.0+0xc6>
 80043a8:	3c57      	subs	r4, #87	@ 0x57
 80043aa:	e7d8      	b.n	800435e <_strtol_l.constprop.0+0x72>
 80043ac:	f04f 32ff 	mov.w	r2, #4294967295
 80043b0:	e7e1      	b.n	8004376 <_strtol_l.constprop.0+0x8a>
 80043b2:	1c53      	adds	r3, r2, #1
 80043b4:	d108      	bne.n	80043c8 <_strtol_l.constprop.0+0xdc>
 80043b6:	2322      	movs	r3, #34	@ 0x22
 80043b8:	f8ce 3000 	str.w	r3, [lr]
 80043bc:	4660      	mov	r0, ip
 80043be:	f1b8 0f00 	cmp.w	r8, #0
 80043c2:	d0a0      	beq.n	8004306 <_strtol_l.constprop.0+0x1a>
 80043c4:	1e69      	subs	r1, r5, #1
 80043c6:	e006      	b.n	80043d6 <_strtol_l.constprop.0+0xea>
 80043c8:	b106      	cbz	r6, 80043cc <_strtol_l.constprop.0+0xe0>
 80043ca:	4240      	negs	r0, r0
 80043cc:	f1b8 0f00 	cmp.w	r8, #0
 80043d0:	d099      	beq.n	8004306 <_strtol_l.constprop.0+0x1a>
 80043d2:	2a00      	cmp	r2, #0
 80043d4:	d1f6      	bne.n	80043c4 <_strtol_l.constprop.0+0xd8>
 80043d6:	f8c8 1000 	str.w	r1, [r8]
 80043da:	e794      	b.n	8004306 <_strtol_l.constprop.0+0x1a>
 80043dc:	080054a9 	.word	0x080054a9

080043e0 <strtol>:
 80043e0:	4613      	mov	r3, r2
 80043e2:	460a      	mov	r2, r1
 80043e4:	4601      	mov	r1, r0
 80043e6:	4802      	ldr	r0, [pc, #8]	@ (80043f0 <strtol+0x10>)
 80043e8:	6800      	ldr	r0, [r0, #0]
 80043ea:	f7ff bf7f 	b.w	80042ec <_strtol_l.constprop.0>
 80043ee:	bf00      	nop
 80043f0:	20000028 	.word	0x20000028

080043f4 <std>:
 80043f4:	2300      	movs	r3, #0
 80043f6:	b510      	push	{r4, lr}
 80043f8:	4604      	mov	r4, r0
 80043fa:	e9c0 3300 	strd	r3, r3, [r0]
 80043fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004402:	6083      	str	r3, [r0, #8]
 8004404:	8181      	strh	r1, [r0, #12]
 8004406:	6643      	str	r3, [r0, #100]	@ 0x64
 8004408:	81c2      	strh	r2, [r0, #14]
 800440a:	6183      	str	r3, [r0, #24]
 800440c:	4619      	mov	r1, r3
 800440e:	2208      	movs	r2, #8
 8004410:	305c      	adds	r0, #92	@ 0x5c
 8004412:	f000 f8f4 	bl	80045fe <memset>
 8004416:	4b0d      	ldr	r3, [pc, #52]	@ (800444c <std+0x58>)
 8004418:	6263      	str	r3, [r4, #36]	@ 0x24
 800441a:	4b0d      	ldr	r3, [pc, #52]	@ (8004450 <std+0x5c>)
 800441c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800441e:	4b0d      	ldr	r3, [pc, #52]	@ (8004454 <std+0x60>)
 8004420:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004422:	4b0d      	ldr	r3, [pc, #52]	@ (8004458 <std+0x64>)
 8004424:	6323      	str	r3, [r4, #48]	@ 0x30
 8004426:	4b0d      	ldr	r3, [pc, #52]	@ (800445c <std+0x68>)
 8004428:	6224      	str	r4, [r4, #32]
 800442a:	429c      	cmp	r4, r3
 800442c:	d006      	beq.n	800443c <std+0x48>
 800442e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004432:	4294      	cmp	r4, r2
 8004434:	d002      	beq.n	800443c <std+0x48>
 8004436:	33d0      	adds	r3, #208	@ 0xd0
 8004438:	429c      	cmp	r4, r3
 800443a:	d105      	bne.n	8004448 <std+0x54>
 800443c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004444:	f000 b9c2 	b.w	80047cc <__retarget_lock_init_recursive>
 8004448:	bd10      	pop	{r4, pc}
 800444a:	bf00      	nop
 800444c:	08004579 	.word	0x08004579
 8004450:	0800459b 	.word	0x0800459b
 8004454:	080045d3 	.word	0x080045d3
 8004458:	080045f7 	.word	0x080045f7
 800445c:	2000041c 	.word	0x2000041c

08004460 <stdio_exit_handler>:
 8004460:	4a02      	ldr	r2, [pc, #8]	@ (800446c <stdio_exit_handler+0xc>)
 8004462:	4903      	ldr	r1, [pc, #12]	@ (8004470 <stdio_exit_handler+0x10>)
 8004464:	4803      	ldr	r0, [pc, #12]	@ (8004474 <stdio_exit_handler+0x14>)
 8004466:	f000 b869 	b.w	800453c <_fwalk_sglue>
 800446a:	bf00      	nop
 800446c:	2000001c 	.word	0x2000001c
 8004470:	08004b19 	.word	0x08004b19
 8004474:	2000002c 	.word	0x2000002c

08004478 <cleanup_stdio>:
 8004478:	6841      	ldr	r1, [r0, #4]
 800447a:	4b0c      	ldr	r3, [pc, #48]	@ (80044ac <cleanup_stdio+0x34>)
 800447c:	4299      	cmp	r1, r3
 800447e:	b510      	push	{r4, lr}
 8004480:	4604      	mov	r4, r0
 8004482:	d001      	beq.n	8004488 <cleanup_stdio+0x10>
 8004484:	f000 fb48 	bl	8004b18 <_fflush_r>
 8004488:	68a1      	ldr	r1, [r4, #8]
 800448a:	4b09      	ldr	r3, [pc, #36]	@ (80044b0 <cleanup_stdio+0x38>)
 800448c:	4299      	cmp	r1, r3
 800448e:	d002      	beq.n	8004496 <cleanup_stdio+0x1e>
 8004490:	4620      	mov	r0, r4
 8004492:	f000 fb41 	bl	8004b18 <_fflush_r>
 8004496:	68e1      	ldr	r1, [r4, #12]
 8004498:	4b06      	ldr	r3, [pc, #24]	@ (80044b4 <cleanup_stdio+0x3c>)
 800449a:	4299      	cmp	r1, r3
 800449c:	d004      	beq.n	80044a8 <cleanup_stdio+0x30>
 800449e:	4620      	mov	r0, r4
 80044a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044a4:	f000 bb38 	b.w	8004b18 <_fflush_r>
 80044a8:	bd10      	pop	{r4, pc}
 80044aa:	bf00      	nop
 80044ac:	2000041c 	.word	0x2000041c
 80044b0:	20000484 	.word	0x20000484
 80044b4:	200004ec 	.word	0x200004ec

080044b8 <global_stdio_init.part.0>:
 80044b8:	b510      	push	{r4, lr}
 80044ba:	4b0b      	ldr	r3, [pc, #44]	@ (80044e8 <global_stdio_init.part.0+0x30>)
 80044bc:	4c0b      	ldr	r4, [pc, #44]	@ (80044ec <global_stdio_init.part.0+0x34>)
 80044be:	4a0c      	ldr	r2, [pc, #48]	@ (80044f0 <global_stdio_init.part.0+0x38>)
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	4620      	mov	r0, r4
 80044c4:	2200      	movs	r2, #0
 80044c6:	2104      	movs	r1, #4
 80044c8:	f7ff ff94 	bl	80043f4 <std>
 80044cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80044d0:	2201      	movs	r2, #1
 80044d2:	2109      	movs	r1, #9
 80044d4:	f7ff ff8e 	bl	80043f4 <std>
 80044d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80044dc:	2202      	movs	r2, #2
 80044de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044e2:	2112      	movs	r1, #18
 80044e4:	f7ff bf86 	b.w	80043f4 <std>
 80044e8:	20000554 	.word	0x20000554
 80044ec:	2000041c 	.word	0x2000041c
 80044f0:	08004461 	.word	0x08004461

080044f4 <__sfp_lock_acquire>:
 80044f4:	4801      	ldr	r0, [pc, #4]	@ (80044fc <__sfp_lock_acquire+0x8>)
 80044f6:	f000 b96a 	b.w	80047ce <__retarget_lock_acquire_recursive>
 80044fa:	bf00      	nop
 80044fc:	2000055d 	.word	0x2000055d

08004500 <__sfp_lock_release>:
 8004500:	4801      	ldr	r0, [pc, #4]	@ (8004508 <__sfp_lock_release+0x8>)
 8004502:	f000 b965 	b.w	80047d0 <__retarget_lock_release_recursive>
 8004506:	bf00      	nop
 8004508:	2000055d 	.word	0x2000055d

0800450c <__sinit>:
 800450c:	b510      	push	{r4, lr}
 800450e:	4604      	mov	r4, r0
 8004510:	f7ff fff0 	bl	80044f4 <__sfp_lock_acquire>
 8004514:	6a23      	ldr	r3, [r4, #32]
 8004516:	b11b      	cbz	r3, 8004520 <__sinit+0x14>
 8004518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800451c:	f7ff bff0 	b.w	8004500 <__sfp_lock_release>
 8004520:	4b04      	ldr	r3, [pc, #16]	@ (8004534 <__sinit+0x28>)
 8004522:	6223      	str	r3, [r4, #32]
 8004524:	4b04      	ldr	r3, [pc, #16]	@ (8004538 <__sinit+0x2c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1f5      	bne.n	8004518 <__sinit+0xc>
 800452c:	f7ff ffc4 	bl	80044b8 <global_stdio_init.part.0>
 8004530:	e7f2      	b.n	8004518 <__sinit+0xc>
 8004532:	bf00      	nop
 8004534:	08004479 	.word	0x08004479
 8004538:	20000554 	.word	0x20000554

0800453c <_fwalk_sglue>:
 800453c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004540:	4607      	mov	r7, r0
 8004542:	4688      	mov	r8, r1
 8004544:	4614      	mov	r4, r2
 8004546:	2600      	movs	r6, #0
 8004548:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800454c:	f1b9 0901 	subs.w	r9, r9, #1
 8004550:	d505      	bpl.n	800455e <_fwalk_sglue+0x22>
 8004552:	6824      	ldr	r4, [r4, #0]
 8004554:	2c00      	cmp	r4, #0
 8004556:	d1f7      	bne.n	8004548 <_fwalk_sglue+0xc>
 8004558:	4630      	mov	r0, r6
 800455a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800455e:	89ab      	ldrh	r3, [r5, #12]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d907      	bls.n	8004574 <_fwalk_sglue+0x38>
 8004564:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004568:	3301      	adds	r3, #1
 800456a:	d003      	beq.n	8004574 <_fwalk_sglue+0x38>
 800456c:	4629      	mov	r1, r5
 800456e:	4638      	mov	r0, r7
 8004570:	47c0      	blx	r8
 8004572:	4306      	orrs	r6, r0
 8004574:	3568      	adds	r5, #104	@ 0x68
 8004576:	e7e9      	b.n	800454c <_fwalk_sglue+0x10>

08004578 <__sread>:
 8004578:	b510      	push	{r4, lr}
 800457a:	460c      	mov	r4, r1
 800457c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004580:	f000 f8d6 	bl	8004730 <_read_r>
 8004584:	2800      	cmp	r0, #0
 8004586:	bfab      	itete	ge
 8004588:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800458a:	89a3      	ldrhlt	r3, [r4, #12]
 800458c:	181b      	addge	r3, r3, r0
 800458e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004592:	bfac      	ite	ge
 8004594:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004596:	81a3      	strhlt	r3, [r4, #12]
 8004598:	bd10      	pop	{r4, pc}

0800459a <__swrite>:
 800459a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800459e:	461f      	mov	r7, r3
 80045a0:	898b      	ldrh	r3, [r1, #12]
 80045a2:	05db      	lsls	r3, r3, #23
 80045a4:	4605      	mov	r5, r0
 80045a6:	460c      	mov	r4, r1
 80045a8:	4616      	mov	r6, r2
 80045aa:	d505      	bpl.n	80045b8 <__swrite+0x1e>
 80045ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045b0:	2302      	movs	r3, #2
 80045b2:	2200      	movs	r2, #0
 80045b4:	f000 f8aa 	bl	800470c <_lseek_r>
 80045b8:	89a3      	ldrh	r3, [r4, #12]
 80045ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80045c2:	81a3      	strh	r3, [r4, #12]
 80045c4:	4632      	mov	r2, r6
 80045c6:	463b      	mov	r3, r7
 80045c8:	4628      	mov	r0, r5
 80045ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045ce:	f000 b8c1 	b.w	8004754 <_write_r>

080045d2 <__sseek>:
 80045d2:	b510      	push	{r4, lr}
 80045d4:	460c      	mov	r4, r1
 80045d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045da:	f000 f897 	bl	800470c <_lseek_r>
 80045de:	1c43      	adds	r3, r0, #1
 80045e0:	89a3      	ldrh	r3, [r4, #12]
 80045e2:	bf15      	itete	ne
 80045e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80045e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80045ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80045ee:	81a3      	strheq	r3, [r4, #12]
 80045f0:	bf18      	it	ne
 80045f2:	81a3      	strhne	r3, [r4, #12]
 80045f4:	bd10      	pop	{r4, pc}

080045f6 <__sclose>:
 80045f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045fa:	f000 b877 	b.w	80046ec <_close_r>

080045fe <memset>:
 80045fe:	4402      	add	r2, r0
 8004600:	4603      	mov	r3, r0
 8004602:	4293      	cmp	r3, r2
 8004604:	d100      	bne.n	8004608 <memset+0xa>
 8004606:	4770      	bx	lr
 8004608:	f803 1b01 	strb.w	r1, [r3], #1
 800460c:	e7f9      	b.n	8004602 <memset+0x4>

0800460e <strncpy>:
 800460e:	b510      	push	{r4, lr}
 8004610:	3901      	subs	r1, #1
 8004612:	4603      	mov	r3, r0
 8004614:	b132      	cbz	r2, 8004624 <strncpy+0x16>
 8004616:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800461a:	f803 4b01 	strb.w	r4, [r3], #1
 800461e:	3a01      	subs	r2, #1
 8004620:	2c00      	cmp	r4, #0
 8004622:	d1f7      	bne.n	8004614 <strncpy+0x6>
 8004624:	441a      	add	r2, r3
 8004626:	2100      	movs	r1, #0
 8004628:	4293      	cmp	r3, r2
 800462a:	d100      	bne.n	800462e <strncpy+0x20>
 800462c:	bd10      	pop	{r4, pc}
 800462e:	f803 1b01 	strb.w	r1, [r3], #1
 8004632:	e7f9      	b.n	8004628 <strncpy+0x1a>

08004634 <strtok>:
 8004634:	4b16      	ldr	r3, [pc, #88]	@ (8004690 <strtok+0x5c>)
 8004636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800463a:	681f      	ldr	r7, [r3, #0]
 800463c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800463e:	4605      	mov	r5, r0
 8004640:	460e      	mov	r6, r1
 8004642:	b9ec      	cbnz	r4, 8004680 <strtok+0x4c>
 8004644:	2050      	movs	r0, #80	@ 0x50
 8004646:	f000 f92d 	bl	80048a4 <malloc>
 800464a:	4602      	mov	r2, r0
 800464c:	6478      	str	r0, [r7, #68]	@ 0x44
 800464e:	b920      	cbnz	r0, 800465a <strtok+0x26>
 8004650:	4b10      	ldr	r3, [pc, #64]	@ (8004694 <strtok+0x60>)
 8004652:	4811      	ldr	r0, [pc, #68]	@ (8004698 <strtok+0x64>)
 8004654:	215b      	movs	r1, #91	@ 0x5b
 8004656:	f000 f8bd 	bl	80047d4 <__assert_func>
 800465a:	e9c0 4400 	strd	r4, r4, [r0]
 800465e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004662:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004666:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800466a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800466e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8004672:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8004676:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800467a:	6184      	str	r4, [r0, #24]
 800467c:	7704      	strb	r4, [r0, #28]
 800467e:	6244      	str	r4, [r0, #36]	@ 0x24
 8004680:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004682:	4631      	mov	r1, r6
 8004684:	4628      	mov	r0, r5
 8004686:	2301      	movs	r3, #1
 8004688:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800468c:	f000 b806 	b.w	800469c <__strtok_r>
 8004690:	20000028 	.word	0x20000028
 8004694:	080055a9 	.word	0x080055a9
 8004698:	080055c0 	.word	0x080055c0

0800469c <__strtok_r>:
 800469c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800469e:	4604      	mov	r4, r0
 80046a0:	b908      	cbnz	r0, 80046a6 <__strtok_r+0xa>
 80046a2:	6814      	ldr	r4, [r2, #0]
 80046a4:	b144      	cbz	r4, 80046b8 <__strtok_r+0x1c>
 80046a6:	4620      	mov	r0, r4
 80046a8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80046ac:	460f      	mov	r7, r1
 80046ae:	f817 6b01 	ldrb.w	r6, [r7], #1
 80046b2:	b91e      	cbnz	r6, 80046bc <__strtok_r+0x20>
 80046b4:	b965      	cbnz	r5, 80046d0 <__strtok_r+0x34>
 80046b6:	6015      	str	r5, [r2, #0]
 80046b8:	2000      	movs	r0, #0
 80046ba:	e005      	b.n	80046c8 <__strtok_r+0x2c>
 80046bc:	42b5      	cmp	r5, r6
 80046be:	d1f6      	bne.n	80046ae <__strtok_r+0x12>
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1f0      	bne.n	80046a6 <__strtok_r+0xa>
 80046c4:	6014      	str	r4, [r2, #0]
 80046c6:	7003      	strb	r3, [r0, #0]
 80046c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046ca:	461c      	mov	r4, r3
 80046cc:	e00c      	b.n	80046e8 <__strtok_r+0x4c>
 80046ce:	b915      	cbnz	r5, 80046d6 <__strtok_r+0x3a>
 80046d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80046d4:	460e      	mov	r6, r1
 80046d6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80046da:	42ab      	cmp	r3, r5
 80046dc:	d1f7      	bne.n	80046ce <__strtok_r+0x32>
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0f3      	beq.n	80046ca <__strtok_r+0x2e>
 80046e2:	2300      	movs	r3, #0
 80046e4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80046e8:	6014      	str	r4, [r2, #0]
 80046ea:	e7ed      	b.n	80046c8 <__strtok_r+0x2c>

080046ec <_close_r>:
 80046ec:	b538      	push	{r3, r4, r5, lr}
 80046ee:	4d06      	ldr	r5, [pc, #24]	@ (8004708 <_close_r+0x1c>)
 80046f0:	2300      	movs	r3, #0
 80046f2:	4604      	mov	r4, r0
 80046f4:	4608      	mov	r0, r1
 80046f6:	602b      	str	r3, [r5, #0]
 80046f8:	f7fc fdc9 	bl	800128e <_close>
 80046fc:	1c43      	adds	r3, r0, #1
 80046fe:	d102      	bne.n	8004706 <_close_r+0x1a>
 8004700:	682b      	ldr	r3, [r5, #0]
 8004702:	b103      	cbz	r3, 8004706 <_close_r+0x1a>
 8004704:	6023      	str	r3, [r4, #0]
 8004706:	bd38      	pop	{r3, r4, r5, pc}
 8004708:	20000558 	.word	0x20000558

0800470c <_lseek_r>:
 800470c:	b538      	push	{r3, r4, r5, lr}
 800470e:	4d07      	ldr	r5, [pc, #28]	@ (800472c <_lseek_r+0x20>)
 8004710:	4604      	mov	r4, r0
 8004712:	4608      	mov	r0, r1
 8004714:	4611      	mov	r1, r2
 8004716:	2200      	movs	r2, #0
 8004718:	602a      	str	r2, [r5, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	f7fc fdde 	bl	80012dc <_lseek>
 8004720:	1c43      	adds	r3, r0, #1
 8004722:	d102      	bne.n	800472a <_lseek_r+0x1e>
 8004724:	682b      	ldr	r3, [r5, #0]
 8004726:	b103      	cbz	r3, 800472a <_lseek_r+0x1e>
 8004728:	6023      	str	r3, [r4, #0]
 800472a:	bd38      	pop	{r3, r4, r5, pc}
 800472c:	20000558 	.word	0x20000558

08004730 <_read_r>:
 8004730:	b538      	push	{r3, r4, r5, lr}
 8004732:	4d07      	ldr	r5, [pc, #28]	@ (8004750 <_read_r+0x20>)
 8004734:	4604      	mov	r4, r0
 8004736:	4608      	mov	r0, r1
 8004738:	4611      	mov	r1, r2
 800473a:	2200      	movs	r2, #0
 800473c:	602a      	str	r2, [r5, #0]
 800473e:	461a      	mov	r2, r3
 8004740:	f7fc fd6c 	bl	800121c <_read>
 8004744:	1c43      	adds	r3, r0, #1
 8004746:	d102      	bne.n	800474e <_read_r+0x1e>
 8004748:	682b      	ldr	r3, [r5, #0]
 800474a:	b103      	cbz	r3, 800474e <_read_r+0x1e>
 800474c:	6023      	str	r3, [r4, #0]
 800474e:	bd38      	pop	{r3, r4, r5, pc}
 8004750:	20000558 	.word	0x20000558

08004754 <_write_r>:
 8004754:	b538      	push	{r3, r4, r5, lr}
 8004756:	4d07      	ldr	r5, [pc, #28]	@ (8004774 <_write_r+0x20>)
 8004758:	4604      	mov	r4, r0
 800475a:	4608      	mov	r0, r1
 800475c:	4611      	mov	r1, r2
 800475e:	2200      	movs	r2, #0
 8004760:	602a      	str	r2, [r5, #0]
 8004762:	461a      	mov	r2, r3
 8004764:	f7fc fd77 	bl	8001256 <_write>
 8004768:	1c43      	adds	r3, r0, #1
 800476a:	d102      	bne.n	8004772 <_write_r+0x1e>
 800476c:	682b      	ldr	r3, [r5, #0]
 800476e:	b103      	cbz	r3, 8004772 <_write_r+0x1e>
 8004770:	6023      	str	r3, [r4, #0]
 8004772:	bd38      	pop	{r3, r4, r5, pc}
 8004774:	20000558 	.word	0x20000558

08004778 <__errno>:
 8004778:	4b01      	ldr	r3, [pc, #4]	@ (8004780 <__errno+0x8>)
 800477a:	6818      	ldr	r0, [r3, #0]
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	20000028 	.word	0x20000028

08004784 <__libc_init_array>:
 8004784:	b570      	push	{r4, r5, r6, lr}
 8004786:	4d0d      	ldr	r5, [pc, #52]	@ (80047bc <__libc_init_array+0x38>)
 8004788:	4c0d      	ldr	r4, [pc, #52]	@ (80047c0 <__libc_init_array+0x3c>)
 800478a:	1b64      	subs	r4, r4, r5
 800478c:	10a4      	asrs	r4, r4, #2
 800478e:	2600      	movs	r6, #0
 8004790:	42a6      	cmp	r6, r4
 8004792:	d109      	bne.n	80047a8 <__libc_init_array+0x24>
 8004794:	4d0b      	ldr	r5, [pc, #44]	@ (80047c4 <__libc_init_array+0x40>)
 8004796:	4c0c      	ldr	r4, [pc, #48]	@ (80047c8 <__libc_init_array+0x44>)
 8004798:	f000 fe3a 	bl	8005410 <_init>
 800479c:	1b64      	subs	r4, r4, r5
 800479e:	10a4      	asrs	r4, r4, #2
 80047a0:	2600      	movs	r6, #0
 80047a2:	42a6      	cmp	r6, r4
 80047a4:	d105      	bne.n	80047b2 <__libc_init_array+0x2e>
 80047a6:	bd70      	pop	{r4, r5, r6, pc}
 80047a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ac:	4798      	blx	r3
 80047ae:	3601      	adds	r6, #1
 80047b0:	e7ee      	b.n	8004790 <__libc_init_array+0xc>
 80047b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80047b6:	4798      	blx	r3
 80047b8:	3601      	adds	r6, #1
 80047ba:	e7f2      	b.n	80047a2 <__libc_init_array+0x1e>
 80047bc:	08005694 	.word	0x08005694
 80047c0:	08005694 	.word	0x08005694
 80047c4:	08005694 	.word	0x08005694
 80047c8:	08005698 	.word	0x08005698

080047cc <__retarget_lock_init_recursive>:
 80047cc:	4770      	bx	lr

080047ce <__retarget_lock_acquire_recursive>:
 80047ce:	4770      	bx	lr

080047d0 <__retarget_lock_release_recursive>:
 80047d0:	4770      	bx	lr
	...

080047d4 <__assert_func>:
 80047d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80047d6:	4614      	mov	r4, r2
 80047d8:	461a      	mov	r2, r3
 80047da:	4b09      	ldr	r3, [pc, #36]	@ (8004800 <__assert_func+0x2c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4605      	mov	r5, r0
 80047e0:	68d8      	ldr	r0, [r3, #12]
 80047e2:	b954      	cbnz	r4, 80047fa <__assert_func+0x26>
 80047e4:	4b07      	ldr	r3, [pc, #28]	@ (8004804 <__assert_func+0x30>)
 80047e6:	461c      	mov	r4, r3
 80047e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80047ec:	9100      	str	r1, [sp, #0]
 80047ee:	462b      	mov	r3, r5
 80047f0:	4905      	ldr	r1, [pc, #20]	@ (8004808 <__assert_func+0x34>)
 80047f2:	f000 f9b9 	bl	8004b68 <fiprintf>
 80047f6:	f000 f9d9 	bl	8004bac <abort>
 80047fa:	4b04      	ldr	r3, [pc, #16]	@ (800480c <__assert_func+0x38>)
 80047fc:	e7f4      	b.n	80047e8 <__assert_func+0x14>
 80047fe:	bf00      	nop
 8004800:	20000028 	.word	0x20000028
 8004804:	08005655 	.word	0x08005655
 8004808:	08005627 	.word	0x08005627
 800480c:	0800561a 	.word	0x0800561a

08004810 <_free_r>:
 8004810:	b538      	push	{r3, r4, r5, lr}
 8004812:	4605      	mov	r5, r0
 8004814:	2900      	cmp	r1, #0
 8004816:	d041      	beq.n	800489c <_free_r+0x8c>
 8004818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800481c:	1f0c      	subs	r4, r1, #4
 800481e:	2b00      	cmp	r3, #0
 8004820:	bfb8      	it	lt
 8004822:	18e4      	addlt	r4, r4, r3
 8004824:	f000 f8e8 	bl	80049f8 <__malloc_lock>
 8004828:	4a1d      	ldr	r2, [pc, #116]	@ (80048a0 <_free_r+0x90>)
 800482a:	6813      	ldr	r3, [r2, #0]
 800482c:	b933      	cbnz	r3, 800483c <_free_r+0x2c>
 800482e:	6063      	str	r3, [r4, #4]
 8004830:	6014      	str	r4, [r2, #0]
 8004832:	4628      	mov	r0, r5
 8004834:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004838:	f000 b8e4 	b.w	8004a04 <__malloc_unlock>
 800483c:	42a3      	cmp	r3, r4
 800483e:	d908      	bls.n	8004852 <_free_r+0x42>
 8004840:	6820      	ldr	r0, [r4, #0]
 8004842:	1821      	adds	r1, r4, r0
 8004844:	428b      	cmp	r3, r1
 8004846:	bf01      	itttt	eq
 8004848:	6819      	ldreq	r1, [r3, #0]
 800484a:	685b      	ldreq	r3, [r3, #4]
 800484c:	1809      	addeq	r1, r1, r0
 800484e:	6021      	streq	r1, [r4, #0]
 8004850:	e7ed      	b.n	800482e <_free_r+0x1e>
 8004852:	461a      	mov	r2, r3
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	b10b      	cbz	r3, 800485c <_free_r+0x4c>
 8004858:	42a3      	cmp	r3, r4
 800485a:	d9fa      	bls.n	8004852 <_free_r+0x42>
 800485c:	6811      	ldr	r1, [r2, #0]
 800485e:	1850      	adds	r0, r2, r1
 8004860:	42a0      	cmp	r0, r4
 8004862:	d10b      	bne.n	800487c <_free_r+0x6c>
 8004864:	6820      	ldr	r0, [r4, #0]
 8004866:	4401      	add	r1, r0
 8004868:	1850      	adds	r0, r2, r1
 800486a:	4283      	cmp	r3, r0
 800486c:	6011      	str	r1, [r2, #0]
 800486e:	d1e0      	bne.n	8004832 <_free_r+0x22>
 8004870:	6818      	ldr	r0, [r3, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	6053      	str	r3, [r2, #4]
 8004876:	4408      	add	r0, r1
 8004878:	6010      	str	r0, [r2, #0]
 800487a:	e7da      	b.n	8004832 <_free_r+0x22>
 800487c:	d902      	bls.n	8004884 <_free_r+0x74>
 800487e:	230c      	movs	r3, #12
 8004880:	602b      	str	r3, [r5, #0]
 8004882:	e7d6      	b.n	8004832 <_free_r+0x22>
 8004884:	6820      	ldr	r0, [r4, #0]
 8004886:	1821      	adds	r1, r4, r0
 8004888:	428b      	cmp	r3, r1
 800488a:	bf04      	itt	eq
 800488c:	6819      	ldreq	r1, [r3, #0]
 800488e:	685b      	ldreq	r3, [r3, #4]
 8004890:	6063      	str	r3, [r4, #4]
 8004892:	bf04      	itt	eq
 8004894:	1809      	addeq	r1, r1, r0
 8004896:	6021      	streq	r1, [r4, #0]
 8004898:	6054      	str	r4, [r2, #4]
 800489a:	e7ca      	b.n	8004832 <_free_r+0x22>
 800489c:	bd38      	pop	{r3, r4, r5, pc}
 800489e:	bf00      	nop
 80048a0:	20000564 	.word	0x20000564

080048a4 <malloc>:
 80048a4:	4b02      	ldr	r3, [pc, #8]	@ (80048b0 <malloc+0xc>)
 80048a6:	4601      	mov	r1, r0
 80048a8:	6818      	ldr	r0, [r3, #0]
 80048aa:	f000 b825 	b.w	80048f8 <_malloc_r>
 80048ae:	bf00      	nop
 80048b0:	20000028 	.word	0x20000028

080048b4 <sbrk_aligned>:
 80048b4:	b570      	push	{r4, r5, r6, lr}
 80048b6:	4e0f      	ldr	r6, [pc, #60]	@ (80048f4 <sbrk_aligned+0x40>)
 80048b8:	460c      	mov	r4, r1
 80048ba:	6831      	ldr	r1, [r6, #0]
 80048bc:	4605      	mov	r5, r0
 80048be:	b911      	cbnz	r1, 80048c6 <sbrk_aligned+0x12>
 80048c0:	f000 f964 	bl	8004b8c <_sbrk_r>
 80048c4:	6030      	str	r0, [r6, #0]
 80048c6:	4621      	mov	r1, r4
 80048c8:	4628      	mov	r0, r5
 80048ca:	f000 f95f 	bl	8004b8c <_sbrk_r>
 80048ce:	1c43      	adds	r3, r0, #1
 80048d0:	d103      	bne.n	80048da <sbrk_aligned+0x26>
 80048d2:	f04f 34ff 	mov.w	r4, #4294967295
 80048d6:	4620      	mov	r0, r4
 80048d8:	bd70      	pop	{r4, r5, r6, pc}
 80048da:	1cc4      	adds	r4, r0, #3
 80048dc:	f024 0403 	bic.w	r4, r4, #3
 80048e0:	42a0      	cmp	r0, r4
 80048e2:	d0f8      	beq.n	80048d6 <sbrk_aligned+0x22>
 80048e4:	1a21      	subs	r1, r4, r0
 80048e6:	4628      	mov	r0, r5
 80048e8:	f000 f950 	bl	8004b8c <_sbrk_r>
 80048ec:	3001      	adds	r0, #1
 80048ee:	d1f2      	bne.n	80048d6 <sbrk_aligned+0x22>
 80048f0:	e7ef      	b.n	80048d2 <sbrk_aligned+0x1e>
 80048f2:	bf00      	nop
 80048f4:	20000560 	.word	0x20000560

080048f8 <_malloc_r>:
 80048f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048fc:	1ccd      	adds	r5, r1, #3
 80048fe:	f025 0503 	bic.w	r5, r5, #3
 8004902:	3508      	adds	r5, #8
 8004904:	2d0c      	cmp	r5, #12
 8004906:	bf38      	it	cc
 8004908:	250c      	movcc	r5, #12
 800490a:	2d00      	cmp	r5, #0
 800490c:	4606      	mov	r6, r0
 800490e:	db01      	blt.n	8004914 <_malloc_r+0x1c>
 8004910:	42a9      	cmp	r1, r5
 8004912:	d904      	bls.n	800491e <_malloc_r+0x26>
 8004914:	230c      	movs	r3, #12
 8004916:	6033      	str	r3, [r6, #0]
 8004918:	2000      	movs	r0, #0
 800491a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800491e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80049f4 <_malloc_r+0xfc>
 8004922:	f000 f869 	bl	80049f8 <__malloc_lock>
 8004926:	f8d8 3000 	ldr.w	r3, [r8]
 800492a:	461c      	mov	r4, r3
 800492c:	bb44      	cbnz	r4, 8004980 <_malloc_r+0x88>
 800492e:	4629      	mov	r1, r5
 8004930:	4630      	mov	r0, r6
 8004932:	f7ff ffbf 	bl	80048b4 <sbrk_aligned>
 8004936:	1c43      	adds	r3, r0, #1
 8004938:	4604      	mov	r4, r0
 800493a:	d158      	bne.n	80049ee <_malloc_r+0xf6>
 800493c:	f8d8 4000 	ldr.w	r4, [r8]
 8004940:	4627      	mov	r7, r4
 8004942:	2f00      	cmp	r7, #0
 8004944:	d143      	bne.n	80049ce <_malloc_r+0xd6>
 8004946:	2c00      	cmp	r4, #0
 8004948:	d04b      	beq.n	80049e2 <_malloc_r+0xea>
 800494a:	6823      	ldr	r3, [r4, #0]
 800494c:	4639      	mov	r1, r7
 800494e:	4630      	mov	r0, r6
 8004950:	eb04 0903 	add.w	r9, r4, r3
 8004954:	f000 f91a 	bl	8004b8c <_sbrk_r>
 8004958:	4581      	cmp	r9, r0
 800495a:	d142      	bne.n	80049e2 <_malloc_r+0xea>
 800495c:	6821      	ldr	r1, [r4, #0]
 800495e:	1a6d      	subs	r5, r5, r1
 8004960:	4629      	mov	r1, r5
 8004962:	4630      	mov	r0, r6
 8004964:	f7ff ffa6 	bl	80048b4 <sbrk_aligned>
 8004968:	3001      	adds	r0, #1
 800496a:	d03a      	beq.n	80049e2 <_malloc_r+0xea>
 800496c:	6823      	ldr	r3, [r4, #0]
 800496e:	442b      	add	r3, r5
 8004970:	6023      	str	r3, [r4, #0]
 8004972:	f8d8 3000 	ldr.w	r3, [r8]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	bb62      	cbnz	r2, 80049d4 <_malloc_r+0xdc>
 800497a:	f8c8 7000 	str.w	r7, [r8]
 800497e:	e00f      	b.n	80049a0 <_malloc_r+0xa8>
 8004980:	6822      	ldr	r2, [r4, #0]
 8004982:	1b52      	subs	r2, r2, r5
 8004984:	d420      	bmi.n	80049c8 <_malloc_r+0xd0>
 8004986:	2a0b      	cmp	r2, #11
 8004988:	d917      	bls.n	80049ba <_malloc_r+0xc2>
 800498a:	1961      	adds	r1, r4, r5
 800498c:	42a3      	cmp	r3, r4
 800498e:	6025      	str	r5, [r4, #0]
 8004990:	bf18      	it	ne
 8004992:	6059      	strne	r1, [r3, #4]
 8004994:	6863      	ldr	r3, [r4, #4]
 8004996:	bf08      	it	eq
 8004998:	f8c8 1000 	streq.w	r1, [r8]
 800499c:	5162      	str	r2, [r4, r5]
 800499e:	604b      	str	r3, [r1, #4]
 80049a0:	4630      	mov	r0, r6
 80049a2:	f000 f82f 	bl	8004a04 <__malloc_unlock>
 80049a6:	f104 000b 	add.w	r0, r4, #11
 80049aa:	1d23      	adds	r3, r4, #4
 80049ac:	f020 0007 	bic.w	r0, r0, #7
 80049b0:	1ac2      	subs	r2, r0, r3
 80049b2:	bf1c      	itt	ne
 80049b4:	1a1b      	subne	r3, r3, r0
 80049b6:	50a3      	strne	r3, [r4, r2]
 80049b8:	e7af      	b.n	800491a <_malloc_r+0x22>
 80049ba:	6862      	ldr	r2, [r4, #4]
 80049bc:	42a3      	cmp	r3, r4
 80049be:	bf0c      	ite	eq
 80049c0:	f8c8 2000 	streq.w	r2, [r8]
 80049c4:	605a      	strne	r2, [r3, #4]
 80049c6:	e7eb      	b.n	80049a0 <_malloc_r+0xa8>
 80049c8:	4623      	mov	r3, r4
 80049ca:	6864      	ldr	r4, [r4, #4]
 80049cc:	e7ae      	b.n	800492c <_malloc_r+0x34>
 80049ce:	463c      	mov	r4, r7
 80049d0:	687f      	ldr	r7, [r7, #4]
 80049d2:	e7b6      	b.n	8004942 <_malloc_r+0x4a>
 80049d4:	461a      	mov	r2, r3
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	42a3      	cmp	r3, r4
 80049da:	d1fb      	bne.n	80049d4 <_malloc_r+0xdc>
 80049dc:	2300      	movs	r3, #0
 80049de:	6053      	str	r3, [r2, #4]
 80049e0:	e7de      	b.n	80049a0 <_malloc_r+0xa8>
 80049e2:	230c      	movs	r3, #12
 80049e4:	6033      	str	r3, [r6, #0]
 80049e6:	4630      	mov	r0, r6
 80049e8:	f000 f80c 	bl	8004a04 <__malloc_unlock>
 80049ec:	e794      	b.n	8004918 <_malloc_r+0x20>
 80049ee:	6005      	str	r5, [r0, #0]
 80049f0:	e7d6      	b.n	80049a0 <_malloc_r+0xa8>
 80049f2:	bf00      	nop
 80049f4:	20000564 	.word	0x20000564

080049f8 <__malloc_lock>:
 80049f8:	4801      	ldr	r0, [pc, #4]	@ (8004a00 <__malloc_lock+0x8>)
 80049fa:	f7ff bee8 	b.w	80047ce <__retarget_lock_acquire_recursive>
 80049fe:	bf00      	nop
 8004a00:	2000055c 	.word	0x2000055c

08004a04 <__malloc_unlock>:
 8004a04:	4801      	ldr	r0, [pc, #4]	@ (8004a0c <__malloc_unlock+0x8>)
 8004a06:	f7ff bee3 	b.w	80047d0 <__retarget_lock_release_recursive>
 8004a0a:	bf00      	nop
 8004a0c:	2000055c 	.word	0x2000055c

08004a10 <__sflush_r>:
 8004a10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a18:	0716      	lsls	r6, r2, #28
 8004a1a:	4605      	mov	r5, r0
 8004a1c:	460c      	mov	r4, r1
 8004a1e:	d454      	bmi.n	8004aca <__sflush_r+0xba>
 8004a20:	684b      	ldr	r3, [r1, #4]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	dc02      	bgt.n	8004a2c <__sflush_r+0x1c>
 8004a26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	dd48      	ble.n	8004abe <__sflush_r+0xae>
 8004a2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a2e:	2e00      	cmp	r6, #0
 8004a30:	d045      	beq.n	8004abe <__sflush_r+0xae>
 8004a32:	2300      	movs	r3, #0
 8004a34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004a38:	682f      	ldr	r7, [r5, #0]
 8004a3a:	6a21      	ldr	r1, [r4, #32]
 8004a3c:	602b      	str	r3, [r5, #0]
 8004a3e:	d030      	beq.n	8004aa2 <__sflush_r+0x92>
 8004a40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004a42:	89a3      	ldrh	r3, [r4, #12]
 8004a44:	0759      	lsls	r1, r3, #29
 8004a46:	d505      	bpl.n	8004a54 <__sflush_r+0x44>
 8004a48:	6863      	ldr	r3, [r4, #4]
 8004a4a:	1ad2      	subs	r2, r2, r3
 8004a4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004a4e:	b10b      	cbz	r3, 8004a54 <__sflush_r+0x44>
 8004a50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004a52:	1ad2      	subs	r2, r2, r3
 8004a54:	2300      	movs	r3, #0
 8004a56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004a58:	6a21      	ldr	r1, [r4, #32]
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	47b0      	blx	r6
 8004a5e:	1c43      	adds	r3, r0, #1
 8004a60:	89a3      	ldrh	r3, [r4, #12]
 8004a62:	d106      	bne.n	8004a72 <__sflush_r+0x62>
 8004a64:	6829      	ldr	r1, [r5, #0]
 8004a66:	291d      	cmp	r1, #29
 8004a68:	d82b      	bhi.n	8004ac2 <__sflush_r+0xb2>
 8004a6a:	4a2a      	ldr	r2, [pc, #168]	@ (8004b14 <__sflush_r+0x104>)
 8004a6c:	410a      	asrs	r2, r1
 8004a6e:	07d6      	lsls	r6, r2, #31
 8004a70:	d427      	bmi.n	8004ac2 <__sflush_r+0xb2>
 8004a72:	2200      	movs	r2, #0
 8004a74:	6062      	str	r2, [r4, #4]
 8004a76:	04d9      	lsls	r1, r3, #19
 8004a78:	6922      	ldr	r2, [r4, #16]
 8004a7a:	6022      	str	r2, [r4, #0]
 8004a7c:	d504      	bpl.n	8004a88 <__sflush_r+0x78>
 8004a7e:	1c42      	adds	r2, r0, #1
 8004a80:	d101      	bne.n	8004a86 <__sflush_r+0x76>
 8004a82:	682b      	ldr	r3, [r5, #0]
 8004a84:	b903      	cbnz	r3, 8004a88 <__sflush_r+0x78>
 8004a86:	6560      	str	r0, [r4, #84]	@ 0x54
 8004a88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004a8a:	602f      	str	r7, [r5, #0]
 8004a8c:	b1b9      	cbz	r1, 8004abe <__sflush_r+0xae>
 8004a8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004a92:	4299      	cmp	r1, r3
 8004a94:	d002      	beq.n	8004a9c <__sflush_r+0x8c>
 8004a96:	4628      	mov	r0, r5
 8004a98:	f7ff feba 	bl	8004810 <_free_r>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004aa0:	e00d      	b.n	8004abe <__sflush_r+0xae>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	47b0      	blx	r6
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	1c50      	adds	r0, r2, #1
 8004aac:	d1c9      	bne.n	8004a42 <__sflush_r+0x32>
 8004aae:	682b      	ldr	r3, [r5, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0c6      	beq.n	8004a42 <__sflush_r+0x32>
 8004ab4:	2b1d      	cmp	r3, #29
 8004ab6:	d001      	beq.n	8004abc <__sflush_r+0xac>
 8004ab8:	2b16      	cmp	r3, #22
 8004aba:	d11e      	bne.n	8004afa <__sflush_r+0xea>
 8004abc:	602f      	str	r7, [r5, #0]
 8004abe:	2000      	movs	r0, #0
 8004ac0:	e022      	b.n	8004b08 <__sflush_r+0xf8>
 8004ac2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ac6:	b21b      	sxth	r3, r3
 8004ac8:	e01b      	b.n	8004b02 <__sflush_r+0xf2>
 8004aca:	690f      	ldr	r7, [r1, #16]
 8004acc:	2f00      	cmp	r7, #0
 8004ace:	d0f6      	beq.n	8004abe <__sflush_r+0xae>
 8004ad0:	0793      	lsls	r3, r2, #30
 8004ad2:	680e      	ldr	r6, [r1, #0]
 8004ad4:	bf08      	it	eq
 8004ad6:	694b      	ldreq	r3, [r1, #20]
 8004ad8:	600f      	str	r7, [r1, #0]
 8004ada:	bf18      	it	ne
 8004adc:	2300      	movne	r3, #0
 8004ade:	eba6 0807 	sub.w	r8, r6, r7
 8004ae2:	608b      	str	r3, [r1, #8]
 8004ae4:	f1b8 0f00 	cmp.w	r8, #0
 8004ae8:	dde9      	ble.n	8004abe <__sflush_r+0xae>
 8004aea:	6a21      	ldr	r1, [r4, #32]
 8004aec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004aee:	4643      	mov	r3, r8
 8004af0:	463a      	mov	r2, r7
 8004af2:	4628      	mov	r0, r5
 8004af4:	47b0      	blx	r6
 8004af6:	2800      	cmp	r0, #0
 8004af8:	dc08      	bgt.n	8004b0c <__sflush_r+0xfc>
 8004afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004afe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b02:	81a3      	strh	r3, [r4, #12]
 8004b04:	f04f 30ff 	mov.w	r0, #4294967295
 8004b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b0c:	4407      	add	r7, r0
 8004b0e:	eba8 0800 	sub.w	r8, r8, r0
 8004b12:	e7e7      	b.n	8004ae4 <__sflush_r+0xd4>
 8004b14:	dfbffffe 	.word	0xdfbffffe

08004b18 <_fflush_r>:
 8004b18:	b538      	push	{r3, r4, r5, lr}
 8004b1a:	690b      	ldr	r3, [r1, #16]
 8004b1c:	4605      	mov	r5, r0
 8004b1e:	460c      	mov	r4, r1
 8004b20:	b913      	cbnz	r3, 8004b28 <_fflush_r+0x10>
 8004b22:	2500      	movs	r5, #0
 8004b24:	4628      	mov	r0, r5
 8004b26:	bd38      	pop	{r3, r4, r5, pc}
 8004b28:	b118      	cbz	r0, 8004b32 <_fflush_r+0x1a>
 8004b2a:	6a03      	ldr	r3, [r0, #32]
 8004b2c:	b90b      	cbnz	r3, 8004b32 <_fflush_r+0x1a>
 8004b2e:	f7ff fced 	bl	800450c <__sinit>
 8004b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0f3      	beq.n	8004b22 <_fflush_r+0xa>
 8004b3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004b3c:	07d0      	lsls	r0, r2, #31
 8004b3e:	d404      	bmi.n	8004b4a <_fflush_r+0x32>
 8004b40:	0599      	lsls	r1, r3, #22
 8004b42:	d402      	bmi.n	8004b4a <_fflush_r+0x32>
 8004b44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b46:	f7ff fe42 	bl	80047ce <__retarget_lock_acquire_recursive>
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	4621      	mov	r1, r4
 8004b4e:	f7ff ff5f 	bl	8004a10 <__sflush_r>
 8004b52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004b54:	07da      	lsls	r2, r3, #31
 8004b56:	4605      	mov	r5, r0
 8004b58:	d4e4      	bmi.n	8004b24 <_fflush_r+0xc>
 8004b5a:	89a3      	ldrh	r3, [r4, #12]
 8004b5c:	059b      	lsls	r3, r3, #22
 8004b5e:	d4e1      	bmi.n	8004b24 <_fflush_r+0xc>
 8004b60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b62:	f7ff fe35 	bl	80047d0 <__retarget_lock_release_recursive>
 8004b66:	e7dd      	b.n	8004b24 <_fflush_r+0xc>

08004b68 <fiprintf>:
 8004b68:	b40e      	push	{r1, r2, r3}
 8004b6a:	b503      	push	{r0, r1, lr}
 8004b6c:	4601      	mov	r1, r0
 8004b6e:	ab03      	add	r3, sp, #12
 8004b70:	4805      	ldr	r0, [pc, #20]	@ (8004b88 <fiprintf+0x20>)
 8004b72:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b76:	6800      	ldr	r0, [r0, #0]
 8004b78:	9301      	str	r3, [sp, #4]
 8004b7a:	f000 f847 	bl	8004c0c <_vfiprintf_r>
 8004b7e:	b002      	add	sp, #8
 8004b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b84:	b003      	add	sp, #12
 8004b86:	4770      	bx	lr
 8004b88:	20000028 	.word	0x20000028

08004b8c <_sbrk_r>:
 8004b8c:	b538      	push	{r3, r4, r5, lr}
 8004b8e:	4d06      	ldr	r5, [pc, #24]	@ (8004ba8 <_sbrk_r+0x1c>)
 8004b90:	2300      	movs	r3, #0
 8004b92:	4604      	mov	r4, r0
 8004b94:	4608      	mov	r0, r1
 8004b96:	602b      	str	r3, [r5, #0]
 8004b98:	f7fc fbae 	bl	80012f8 <_sbrk>
 8004b9c:	1c43      	adds	r3, r0, #1
 8004b9e:	d102      	bne.n	8004ba6 <_sbrk_r+0x1a>
 8004ba0:	682b      	ldr	r3, [r5, #0]
 8004ba2:	b103      	cbz	r3, 8004ba6 <_sbrk_r+0x1a>
 8004ba4:	6023      	str	r3, [r4, #0]
 8004ba6:	bd38      	pop	{r3, r4, r5, pc}
 8004ba8:	20000558 	.word	0x20000558

08004bac <abort>:
 8004bac:	b508      	push	{r3, lr}
 8004bae:	2006      	movs	r0, #6
 8004bb0:	f000 fb8e 	bl	80052d0 <raise>
 8004bb4:	2001      	movs	r0, #1
 8004bb6:	f7fc fb26 	bl	8001206 <_exit>

08004bba <__sfputc_r>:
 8004bba:	6893      	ldr	r3, [r2, #8]
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	b410      	push	{r4}
 8004bc2:	6093      	str	r3, [r2, #8]
 8004bc4:	da08      	bge.n	8004bd8 <__sfputc_r+0x1e>
 8004bc6:	6994      	ldr	r4, [r2, #24]
 8004bc8:	42a3      	cmp	r3, r4
 8004bca:	db01      	blt.n	8004bd0 <__sfputc_r+0x16>
 8004bcc:	290a      	cmp	r1, #10
 8004bce:	d103      	bne.n	8004bd8 <__sfputc_r+0x1e>
 8004bd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bd4:	f000 bac0 	b.w	8005158 <__swbuf_r>
 8004bd8:	6813      	ldr	r3, [r2, #0]
 8004bda:	1c58      	adds	r0, r3, #1
 8004bdc:	6010      	str	r0, [r2, #0]
 8004bde:	7019      	strb	r1, [r3, #0]
 8004be0:	4608      	mov	r0, r1
 8004be2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <__sfputs_r>:
 8004be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bea:	4606      	mov	r6, r0
 8004bec:	460f      	mov	r7, r1
 8004bee:	4614      	mov	r4, r2
 8004bf0:	18d5      	adds	r5, r2, r3
 8004bf2:	42ac      	cmp	r4, r5
 8004bf4:	d101      	bne.n	8004bfa <__sfputs_r+0x12>
 8004bf6:	2000      	movs	r0, #0
 8004bf8:	e007      	b.n	8004c0a <__sfputs_r+0x22>
 8004bfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bfe:	463a      	mov	r2, r7
 8004c00:	4630      	mov	r0, r6
 8004c02:	f7ff ffda 	bl	8004bba <__sfputc_r>
 8004c06:	1c43      	adds	r3, r0, #1
 8004c08:	d1f3      	bne.n	8004bf2 <__sfputs_r+0xa>
 8004c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004c0c <_vfiprintf_r>:
 8004c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c10:	460d      	mov	r5, r1
 8004c12:	b09d      	sub	sp, #116	@ 0x74
 8004c14:	4614      	mov	r4, r2
 8004c16:	4698      	mov	r8, r3
 8004c18:	4606      	mov	r6, r0
 8004c1a:	b118      	cbz	r0, 8004c24 <_vfiprintf_r+0x18>
 8004c1c:	6a03      	ldr	r3, [r0, #32]
 8004c1e:	b90b      	cbnz	r3, 8004c24 <_vfiprintf_r+0x18>
 8004c20:	f7ff fc74 	bl	800450c <__sinit>
 8004c24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c26:	07d9      	lsls	r1, r3, #31
 8004c28:	d405      	bmi.n	8004c36 <_vfiprintf_r+0x2a>
 8004c2a:	89ab      	ldrh	r3, [r5, #12]
 8004c2c:	059a      	lsls	r2, r3, #22
 8004c2e:	d402      	bmi.n	8004c36 <_vfiprintf_r+0x2a>
 8004c30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c32:	f7ff fdcc 	bl	80047ce <__retarget_lock_acquire_recursive>
 8004c36:	89ab      	ldrh	r3, [r5, #12]
 8004c38:	071b      	lsls	r3, r3, #28
 8004c3a:	d501      	bpl.n	8004c40 <_vfiprintf_r+0x34>
 8004c3c:	692b      	ldr	r3, [r5, #16]
 8004c3e:	b99b      	cbnz	r3, 8004c68 <_vfiprintf_r+0x5c>
 8004c40:	4629      	mov	r1, r5
 8004c42:	4630      	mov	r0, r6
 8004c44:	f000 fac6 	bl	80051d4 <__swsetup_r>
 8004c48:	b170      	cbz	r0, 8004c68 <_vfiprintf_r+0x5c>
 8004c4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c4c:	07dc      	lsls	r4, r3, #31
 8004c4e:	d504      	bpl.n	8004c5a <_vfiprintf_r+0x4e>
 8004c50:	f04f 30ff 	mov.w	r0, #4294967295
 8004c54:	b01d      	add	sp, #116	@ 0x74
 8004c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c5a:	89ab      	ldrh	r3, [r5, #12]
 8004c5c:	0598      	lsls	r0, r3, #22
 8004c5e:	d4f7      	bmi.n	8004c50 <_vfiprintf_r+0x44>
 8004c60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c62:	f7ff fdb5 	bl	80047d0 <__retarget_lock_release_recursive>
 8004c66:	e7f3      	b.n	8004c50 <_vfiprintf_r+0x44>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c6c:	2320      	movs	r3, #32
 8004c6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c72:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c76:	2330      	movs	r3, #48	@ 0x30
 8004c78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004e28 <_vfiprintf_r+0x21c>
 8004c7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c80:	f04f 0901 	mov.w	r9, #1
 8004c84:	4623      	mov	r3, r4
 8004c86:	469a      	mov	sl, r3
 8004c88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c8c:	b10a      	cbz	r2, 8004c92 <_vfiprintf_r+0x86>
 8004c8e:	2a25      	cmp	r2, #37	@ 0x25
 8004c90:	d1f9      	bne.n	8004c86 <_vfiprintf_r+0x7a>
 8004c92:	ebba 0b04 	subs.w	fp, sl, r4
 8004c96:	d00b      	beq.n	8004cb0 <_vfiprintf_r+0xa4>
 8004c98:	465b      	mov	r3, fp
 8004c9a:	4622      	mov	r2, r4
 8004c9c:	4629      	mov	r1, r5
 8004c9e:	4630      	mov	r0, r6
 8004ca0:	f7ff ffa2 	bl	8004be8 <__sfputs_r>
 8004ca4:	3001      	adds	r0, #1
 8004ca6:	f000 80a7 	beq.w	8004df8 <_vfiprintf_r+0x1ec>
 8004caa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004cac:	445a      	add	r2, fp
 8004cae:	9209      	str	r2, [sp, #36]	@ 0x24
 8004cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 809f 	beq.w	8004df8 <_vfiprintf_r+0x1ec>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8004cc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cc4:	f10a 0a01 	add.w	sl, sl, #1
 8004cc8:	9304      	str	r3, [sp, #16]
 8004cca:	9307      	str	r3, [sp, #28]
 8004ccc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004cd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8004cd2:	4654      	mov	r4, sl
 8004cd4:	2205      	movs	r2, #5
 8004cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cda:	4853      	ldr	r0, [pc, #332]	@ (8004e28 <_vfiprintf_r+0x21c>)
 8004cdc:	f7fb fab0 	bl	8000240 <memchr>
 8004ce0:	9a04      	ldr	r2, [sp, #16]
 8004ce2:	b9d8      	cbnz	r0, 8004d1c <_vfiprintf_r+0x110>
 8004ce4:	06d1      	lsls	r1, r2, #27
 8004ce6:	bf44      	itt	mi
 8004ce8:	2320      	movmi	r3, #32
 8004cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cee:	0713      	lsls	r3, r2, #28
 8004cf0:	bf44      	itt	mi
 8004cf2:	232b      	movmi	r3, #43	@ 0x2b
 8004cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8004cfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cfe:	d015      	beq.n	8004d2c <_vfiprintf_r+0x120>
 8004d00:	9a07      	ldr	r2, [sp, #28]
 8004d02:	4654      	mov	r4, sl
 8004d04:	2000      	movs	r0, #0
 8004d06:	f04f 0c0a 	mov.w	ip, #10
 8004d0a:	4621      	mov	r1, r4
 8004d0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d10:	3b30      	subs	r3, #48	@ 0x30
 8004d12:	2b09      	cmp	r3, #9
 8004d14:	d94b      	bls.n	8004dae <_vfiprintf_r+0x1a2>
 8004d16:	b1b0      	cbz	r0, 8004d46 <_vfiprintf_r+0x13a>
 8004d18:	9207      	str	r2, [sp, #28]
 8004d1a:	e014      	b.n	8004d46 <_vfiprintf_r+0x13a>
 8004d1c:	eba0 0308 	sub.w	r3, r0, r8
 8004d20:	fa09 f303 	lsl.w	r3, r9, r3
 8004d24:	4313      	orrs	r3, r2
 8004d26:	9304      	str	r3, [sp, #16]
 8004d28:	46a2      	mov	sl, r4
 8004d2a:	e7d2      	b.n	8004cd2 <_vfiprintf_r+0xc6>
 8004d2c:	9b03      	ldr	r3, [sp, #12]
 8004d2e:	1d19      	adds	r1, r3, #4
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	9103      	str	r1, [sp, #12]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	bfbb      	ittet	lt
 8004d38:	425b      	neglt	r3, r3
 8004d3a:	f042 0202 	orrlt.w	r2, r2, #2
 8004d3e:	9307      	strge	r3, [sp, #28]
 8004d40:	9307      	strlt	r3, [sp, #28]
 8004d42:	bfb8      	it	lt
 8004d44:	9204      	strlt	r2, [sp, #16]
 8004d46:	7823      	ldrb	r3, [r4, #0]
 8004d48:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d4a:	d10a      	bne.n	8004d62 <_vfiprintf_r+0x156>
 8004d4c:	7863      	ldrb	r3, [r4, #1]
 8004d4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d50:	d132      	bne.n	8004db8 <_vfiprintf_r+0x1ac>
 8004d52:	9b03      	ldr	r3, [sp, #12]
 8004d54:	1d1a      	adds	r2, r3, #4
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	9203      	str	r2, [sp, #12]
 8004d5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d5e:	3402      	adds	r4, #2
 8004d60:	9305      	str	r3, [sp, #20]
 8004d62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004e38 <_vfiprintf_r+0x22c>
 8004d66:	7821      	ldrb	r1, [r4, #0]
 8004d68:	2203      	movs	r2, #3
 8004d6a:	4650      	mov	r0, sl
 8004d6c:	f7fb fa68 	bl	8000240 <memchr>
 8004d70:	b138      	cbz	r0, 8004d82 <_vfiprintf_r+0x176>
 8004d72:	9b04      	ldr	r3, [sp, #16]
 8004d74:	eba0 000a 	sub.w	r0, r0, sl
 8004d78:	2240      	movs	r2, #64	@ 0x40
 8004d7a:	4082      	lsls	r2, r0
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	3401      	adds	r4, #1
 8004d80:	9304      	str	r3, [sp, #16]
 8004d82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d86:	4829      	ldr	r0, [pc, #164]	@ (8004e2c <_vfiprintf_r+0x220>)
 8004d88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d8c:	2206      	movs	r2, #6
 8004d8e:	f7fb fa57 	bl	8000240 <memchr>
 8004d92:	2800      	cmp	r0, #0
 8004d94:	d03f      	beq.n	8004e16 <_vfiprintf_r+0x20a>
 8004d96:	4b26      	ldr	r3, [pc, #152]	@ (8004e30 <_vfiprintf_r+0x224>)
 8004d98:	bb1b      	cbnz	r3, 8004de2 <_vfiprintf_r+0x1d6>
 8004d9a:	9b03      	ldr	r3, [sp, #12]
 8004d9c:	3307      	adds	r3, #7
 8004d9e:	f023 0307 	bic.w	r3, r3, #7
 8004da2:	3308      	adds	r3, #8
 8004da4:	9303      	str	r3, [sp, #12]
 8004da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004da8:	443b      	add	r3, r7
 8004daa:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dac:	e76a      	b.n	8004c84 <_vfiprintf_r+0x78>
 8004dae:	fb0c 3202 	mla	r2, ip, r2, r3
 8004db2:	460c      	mov	r4, r1
 8004db4:	2001      	movs	r0, #1
 8004db6:	e7a8      	b.n	8004d0a <_vfiprintf_r+0xfe>
 8004db8:	2300      	movs	r3, #0
 8004dba:	3401      	adds	r4, #1
 8004dbc:	9305      	str	r3, [sp, #20]
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	f04f 0c0a 	mov.w	ip, #10
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004dca:	3a30      	subs	r2, #48	@ 0x30
 8004dcc:	2a09      	cmp	r2, #9
 8004dce:	d903      	bls.n	8004dd8 <_vfiprintf_r+0x1cc>
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0c6      	beq.n	8004d62 <_vfiprintf_r+0x156>
 8004dd4:	9105      	str	r1, [sp, #20]
 8004dd6:	e7c4      	b.n	8004d62 <_vfiprintf_r+0x156>
 8004dd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ddc:	4604      	mov	r4, r0
 8004dde:	2301      	movs	r3, #1
 8004de0:	e7f0      	b.n	8004dc4 <_vfiprintf_r+0x1b8>
 8004de2:	ab03      	add	r3, sp, #12
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	462a      	mov	r2, r5
 8004de8:	4b12      	ldr	r3, [pc, #72]	@ (8004e34 <_vfiprintf_r+0x228>)
 8004dea:	a904      	add	r1, sp, #16
 8004dec:	4630      	mov	r0, r6
 8004dee:	f3af 8000 	nop.w
 8004df2:	4607      	mov	r7, r0
 8004df4:	1c78      	adds	r0, r7, #1
 8004df6:	d1d6      	bne.n	8004da6 <_vfiprintf_r+0x19a>
 8004df8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004dfa:	07d9      	lsls	r1, r3, #31
 8004dfc:	d405      	bmi.n	8004e0a <_vfiprintf_r+0x1fe>
 8004dfe:	89ab      	ldrh	r3, [r5, #12]
 8004e00:	059a      	lsls	r2, r3, #22
 8004e02:	d402      	bmi.n	8004e0a <_vfiprintf_r+0x1fe>
 8004e04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e06:	f7ff fce3 	bl	80047d0 <__retarget_lock_release_recursive>
 8004e0a:	89ab      	ldrh	r3, [r5, #12]
 8004e0c:	065b      	lsls	r3, r3, #25
 8004e0e:	f53f af1f 	bmi.w	8004c50 <_vfiprintf_r+0x44>
 8004e12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e14:	e71e      	b.n	8004c54 <_vfiprintf_r+0x48>
 8004e16:	ab03      	add	r3, sp, #12
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	462a      	mov	r2, r5
 8004e1c:	4b05      	ldr	r3, [pc, #20]	@ (8004e34 <_vfiprintf_r+0x228>)
 8004e1e:	a904      	add	r1, sp, #16
 8004e20:	4630      	mov	r0, r6
 8004e22:	f000 f879 	bl	8004f18 <_printf_i>
 8004e26:	e7e4      	b.n	8004df2 <_vfiprintf_r+0x1e6>
 8004e28:	08005656 	.word	0x08005656
 8004e2c:	08005660 	.word	0x08005660
 8004e30:	00000000 	.word	0x00000000
 8004e34:	08004be9 	.word	0x08004be9
 8004e38:	0800565c 	.word	0x0800565c

08004e3c <_printf_common>:
 8004e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e40:	4616      	mov	r6, r2
 8004e42:	4698      	mov	r8, r3
 8004e44:	688a      	ldr	r2, [r1, #8]
 8004e46:	690b      	ldr	r3, [r1, #16]
 8004e48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	bfb8      	it	lt
 8004e50:	4613      	movlt	r3, r2
 8004e52:	6033      	str	r3, [r6, #0]
 8004e54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e58:	4607      	mov	r7, r0
 8004e5a:	460c      	mov	r4, r1
 8004e5c:	b10a      	cbz	r2, 8004e62 <_printf_common+0x26>
 8004e5e:	3301      	adds	r3, #1
 8004e60:	6033      	str	r3, [r6, #0]
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	0699      	lsls	r1, r3, #26
 8004e66:	bf42      	ittt	mi
 8004e68:	6833      	ldrmi	r3, [r6, #0]
 8004e6a:	3302      	addmi	r3, #2
 8004e6c:	6033      	strmi	r3, [r6, #0]
 8004e6e:	6825      	ldr	r5, [r4, #0]
 8004e70:	f015 0506 	ands.w	r5, r5, #6
 8004e74:	d106      	bne.n	8004e84 <_printf_common+0x48>
 8004e76:	f104 0a19 	add.w	sl, r4, #25
 8004e7a:	68e3      	ldr	r3, [r4, #12]
 8004e7c:	6832      	ldr	r2, [r6, #0]
 8004e7e:	1a9b      	subs	r3, r3, r2
 8004e80:	42ab      	cmp	r3, r5
 8004e82:	dc26      	bgt.n	8004ed2 <_printf_common+0x96>
 8004e84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e88:	6822      	ldr	r2, [r4, #0]
 8004e8a:	3b00      	subs	r3, #0
 8004e8c:	bf18      	it	ne
 8004e8e:	2301      	movne	r3, #1
 8004e90:	0692      	lsls	r2, r2, #26
 8004e92:	d42b      	bmi.n	8004eec <_printf_common+0xb0>
 8004e94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e98:	4641      	mov	r1, r8
 8004e9a:	4638      	mov	r0, r7
 8004e9c:	47c8      	blx	r9
 8004e9e:	3001      	adds	r0, #1
 8004ea0:	d01e      	beq.n	8004ee0 <_printf_common+0xa4>
 8004ea2:	6823      	ldr	r3, [r4, #0]
 8004ea4:	6922      	ldr	r2, [r4, #16]
 8004ea6:	f003 0306 	and.w	r3, r3, #6
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	bf02      	ittt	eq
 8004eae:	68e5      	ldreq	r5, [r4, #12]
 8004eb0:	6833      	ldreq	r3, [r6, #0]
 8004eb2:	1aed      	subeq	r5, r5, r3
 8004eb4:	68a3      	ldr	r3, [r4, #8]
 8004eb6:	bf0c      	ite	eq
 8004eb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ebc:	2500      	movne	r5, #0
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	bfc4      	itt	gt
 8004ec2:	1a9b      	subgt	r3, r3, r2
 8004ec4:	18ed      	addgt	r5, r5, r3
 8004ec6:	2600      	movs	r6, #0
 8004ec8:	341a      	adds	r4, #26
 8004eca:	42b5      	cmp	r5, r6
 8004ecc:	d11a      	bne.n	8004f04 <_printf_common+0xc8>
 8004ece:	2000      	movs	r0, #0
 8004ed0:	e008      	b.n	8004ee4 <_printf_common+0xa8>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	4652      	mov	r2, sl
 8004ed6:	4641      	mov	r1, r8
 8004ed8:	4638      	mov	r0, r7
 8004eda:	47c8      	blx	r9
 8004edc:	3001      	adds	r0, #1
 8004ede:	d103      	bne.n	8004ee8 <_printf_common+0xac>
 8004ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ee8:	3501      	adds	r5, #1
 8004eea:	e7c6      	b.n	8004e7a <_printf_common+0x3e>
 8004eec:	18e1      	adds	r1, r4, r3
 8004eee:	1c5a      	adds	r2, r3, #1
 8004ef0:	2030      	movs	r0, #48	@ 0x30
 8004ef2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ef6:	4422      	add	r2, r4
 8004ef8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004efc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f00:	3302      	adds	r3, #2
 8004f02:	e7c7      	b.n	8004e94 <_printf_common+0x58>
 8004f04:	2301      	movs	r3, #1
 8004f06:	4622      	mov	r2, r4
 8004f08:	4641      	mov	r1, r8
 8004f0a:	4638      	mov	r0, r7
 8004f0c:	47c8      	blx	r9
 8004f0e:	3001      	adds	r0, #1
 8004f10:	d0e6      	beq.n	8004ee0 <_printf_common+0xa4>
 8004f12:	3601      	adds	r6, #1
 8004f14:	e7d9      	b.n	8004eca <_printf_common+0x8e>
	...

08004f18 <_printf_i>:
 8004f18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f1c:	7e0f      	ldrb	r7, [r1, #24]
 8004f1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f20:	2f78      	cmp	r7, #120	@ 0x78
 8004f22:	4691      	mov	r9, r2
 8004f24:	4680      	mov	r8, r0
 8004f26:	460c      	mov	r4, r1
 8004f28:	469a      	mov	sl, r3
 8004f2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f2e:	d807      	bhi.n	8004f40 <_printf_i+0x28>
 8004f30:	2f62      	cmp	r7, #98	@ 0x62
 8004f32:	d80a      	bhi.n	8004f4a <_printf_i+0x32>
 8004f34:	2f00      	cmp	r7, #0
 8004f36:	f000 80d2 	beq.w	80050de <_printf_i+0x1c6>
 8004f3a:	2f58      	cmp	r7, #88	@ 0x58
 8004f3c:	f000 80b9 	beq.w	80050b2 <_printf_i+0x19a>
 8004f40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f48:	e03a      	b.n	8004fc0 <_printf_i+0xa8>
 8004f4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f4e:	2b15      	cmp	r3, #21
 8004f50:	d8f6      	bhi.n	8004f40 <_printf_i+0x28>
 8004f52:	a101      	add	r1, pc, #4	@ (adr r1, 8004f58 <_printf_i+0x40>)
 8004f54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f58:	08004fb1 	.word	0x08004fb1
 8004f5c:	08004fc5 	.word	0x08004fc5
 8004f60:	08004f41 	.word	0x08004f41
 8004f64:	08004f41 	.word	0x08004f41
 8004f68:	08004f41 	.word	0x08004f41
 8004f6c:	08004f41 	.word	0x08004f41
 8004f70:	08004fc5 	.word	0x08004fc5
 8004f74:	08004f41 	.word	0x08004f41
 8004f78:	08004f41 	.word	0x08004f41
 8004f7c:	08004f41 	.word	0x08004f41
 8004f80:	08004f41 	.word	0x08004f41
 8004f84:	080050c5 	.word	0x080050c5
 8004f88:	08004fef 	.word	0x08004fef
 8004f8c:	0800507f 	.word	0x0800507f
 8004f90:	08004f41 	.word	0x08004f41
 8004f94:	08004f41 	.word	0x08004f41
 8004f98:	080050e7 	.word	0x080050e7
 8004f9c:	08004f41 	.word	0x08004f41
 8004fa0:	08004fef 	.word	0x08004fef
 8004fa4:	08004f41 	.word	0x08004f41
 8004fa8:	08004f41 	.word	0x08004f41
 8004fac:	08005087 	.word	0x08005087
 8004fb0:	6833      	ldr	r3, [r6, #0]
 8004fb2:	1d1a      	adds	r2, r3, #4
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6032      	str	r2, [r6, #0]
 8004fb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e09d      	b.n	8005100 <_printf_i+0x1e8>
 8004fc4:	6833      	ldr	r3, [r6, #0]
 8004fc6:	6820      	ldr	r0, [r4, #0]
 8004fc8:	1d19      	adds	r1, r3, #4
 8004fca:	6031      	str	r1, [r6, #0]
 8004fcc:	0606      	lsls	r6, r0, #24
 8004fce:	d501      	bpl.n	8004fd4 <_printf_i+0xbc>
 8004fd0:	681d      	ldr	r5, [r3, #0]
 8004fd2:	e003      	b.n	8004fdc <_printf_i+0xc4>
 8004fd4:	0645      	lsls	r5, r0, #25
 8004fd6:	d5fb      	bpl.n	8004fd0 <_printf_i+0xb8>
 8004fd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004fdc:	2d00      	cmp	r5, #0
 8004fde:	da03      	bge.n	8004fe8 <_printf_i+0xd0>
 8004fe0:	232d      	movs	r3, #45	@ 0x2d
 8004fe2:	426d      	negs	r5, r5
 8004fe4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fe8:	4859      	ldr	r0, [pc, #356]	@ (8005150 <_printf_i+0x238>)
 8004fea:	230a      	movs	r3, #10
 8004fec:	e011      	b.n	8005012 <_printf_i+0xfa>
 8004fee:	6821      	ldr	r1, [r4, #0]
 8004ff0:	6833      	ldr	r3, [r6, #0]
 8004ff2:	0608      	lsls	r0, r1, #24
 8004ff4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ff8:	d402      	bmi.n	8005000 <_printf_i+0xe8>
 8004ffa:	0649      	lsls	r1, r1, #25
 8004ffc:	bf48      	it	mi
 8004ffe:	b2ad      	uxthmi	r5, r5
 8005000:	2f6f      	cmp	r7, #111	@ 0x6f
 8005002:	4853      	ldr	r0, [pc, #332]	@ (8005150 <_printf_i+0x238>)
 8005004:	6033      	str	r3, [r6, #0]
 8005006:	bf14      	ite	ne
 8005008:	230a      	movne	r3, #10
 800500a:	2308      	moveq	r3, #8
 800500c:	2100      	movs	r1, #0
 800500e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005012:	6866      	ldr	r6, [r4, #4]
 8005014:	60a6      	str	r6, [r4, #8]
 8005016:	2e00      	cmp	r6, #0
 8005018:	bfa2      	ittt	ge
 800501a:	6821      	ldrge	r1, [r4, #0]
 800501c:	f021 0104 	bicge.w	r1, r1, #4
 8005020:	6021      	strge	r1, [r4, #0]
 8005022:	b90d      	cbnz	r5, 8005028 <_printf_i+0x110>
 8005024:	2e00      	cmp	r6, #0
 8005026:	d04b      	beq.n	80050c0 <_printf_i+0x1a8>
 8005028:	4616      	mov	r6, r2
 800502a:	fbb5 f1f3 	udiv	r1, r5, r3
 800502e:	fb03 5711 	mls	r7, r3, r1, r5
 8005032:	5dc7      	ldrb	r7, [r0, r7]
 8005034:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005038:	462f      	mov	r7, r5
 800503a:	42bb      	cmp	r3, r7
 800503c:	460d      	mov	r5, r1
 800503e:	d9f4      	bls.n	800502a <_printf_i+0x112>
 8005040:	2b08      	cmp	r3, #8
 8005042:	d10b      	bne.n	800505c <_printf_i+0x144>
 8005044:	6823      	ldr	r3, [r4, #0]
 8005046:	07df      	lsls	r7, r3, #31
 8005048:	d508      	bpl.n	800505c <_printf_i+0x144>
 800504a:	6923      	ldr	r3, [r4, #16]
 800504c:	6861      	ldr	r1, [r4, #4]
 800504e:	4299      	cmp	r1, r3
 8005050:	bfde      	ittt	le
 8005052:	2330      	movle	r3, #48	@ 0x30
 8005054:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005058:	f106 36ff 	addle.w	r6, r6, #4294967295
 800505c:	1b92      	subs	r2, r2, r6
 800505e:	6122      	str	r2, [r4, #16]
 8005060:	f8cd a000 	str.w	sl, [sp]
 8005064:	464b      	mov	r3, r9
 8005066:	aa03      	add	r2, sp, #12
 8005068:	4621      	mov	r1, r4
 800506a:	4640      	mov	r0, r8
 800506c:	f7ff fee6 	bl	8004e3c <_printf_common>
 8005070:	3001      	adds	r0, #1
 8005072:	d14a      	bne.n	800510a <_printf_i+0x1f2>
 8005074:	f04f 30ff 	mov.w	r0, #4294967295
 8005078:	b004      	add	sp, #16
 800507a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800507e:	6823      	ldr	r3, [r4, #0]
 8005080:	f043 0320 	orr.w	r3, r3, #32
 8005084:	6023      	str	r3, [r4, #0]
 8005086:	4833      	ldr	r0, [pc, #204]	@ (8005154 <_printf_i+0x23c>)
 8005088:	2778      	movs	r7, #120	@ 0x78
 800508a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	6831      	ldr	r1, [r6, #0]
 8005092:	061f      	lsls	r7, r3, #24
 8005094:	f851 5b04 	ldr.w	r5, [r1], #4
 8005098:	d402      	bmi.n	80050a0 <_printf_i+0x188>
 800509a:	065f      	lsls	r7, r3, #25
 800509c:	bf48      	it	mi
 800509e:	b2ad      	uxthmi	r5, r5
 80050a0:	6031      	str	r1, [r6, #0]
 80050a2:	07d9      	lsls	r1, r3, #31
 80050a4:	bf44      	itt	mi
 80050a6:	f043 0320 	orrmi.w	r3, r3, #32
 80050aa:	6023      	strmi	r3, [r4, #0]
 80050ac:	b11d      	cbz	r5, 80050b6 <_printf_i+0x19e>
 80050ae:	2310      	movs	r3, #16
 80050b0:	e7ac      	b.n	800500c <_printf_i+0xf4>
 80050b2:	4827      	ldr	r0, [pc, #156]	@ (8005150 <_printf_i+0x238>)
 80050b4:	e7e9      	b.n	800508a <_printf_i+0x172>
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	f023 0320 	bic.w	r3, r3, #32
 80050bc:	6023      	str	r3, [r4, #0]
 80050be:	e7f6      	b.n	80050ae <_printf_i+0x196>
 80050c0:	4616      	mov	r6, r2
 80050c2:	e7bd      	b.n	8005040 <_printf_i+0x128>
 80050c4:	6833      	ldr	r3, [r6, #0]
 80050c6:	6825      	ldr	r5, [r4, #0]
 80050c8:	6961      	ldr	r1, [r4, #20]
 80050ca:	1d18      	adds	r0, r3, #4
 80050cc:	6030      	str	r0, [r6, #0]
 80050ce:	062e      	lsls	r6, r5, #24
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	d501      	bpl.n	80050d8 <_printf_i+0x1c0>
 80050d4:	6019      	str	r1, [r3, #0]
 80050d6:	e002      	b.n	80050de <_printf_i+0x1c6>
 80050d8:	0668      	lsls	r0, r5, #25
 80050da:	d5fb      	bpl.n	80050d4 <_printf_i+0x1bc>
 80050dc:	8019      	strh	r1, [r3, #0]
 80050de:	2300      	movs	r3, #0
 80050e0:	6123      	str	r3, [r4, #16]
 80050e2:	4616      	mov	r6, r2
 80050e4:	e7bc      	b.n	8005060 <_printf_i+0x148>
 80050e6:	6833      	ldr	r3, [r6, #0]
 80050e8:	1d1a      	adds	r2, r3, #4
 80050ea:	6032      	str	r2, [r6, #0]
 80050ec:	681e      	ldr	r6, [r3, #0]
 80050ee:	6862      	ldr	r2, [r4, #4]
 80050f0:	2100      	movs	r1, #0
 80050f2:	4630      	mov	r0, r6
 80050f4:	f7fb f8a4 	bl	8000240 <memchr>
 80050f8:	b108      	cbz	r0, 80050fe <_printf_i+0x1e6>
 80050fa:	1b80      	subs	r0, r0, r6
 80050fc:	6060      	str	r0, [r4, #4]
 80050fe:	6863      	ldr	r3, [r4, #4]
 8005100:	6123      	str	r3, [r4, #16]
 8005102:	2300      	movs	r3, #0
 8005104:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005108:	e7aa      	b.n	8005060 <_printf_i+0x148>
 800510a:	6923      	ldr	r3, [r4, #16]
 800510c:	4632      	mov	r2, r6
 800510e:	4649      	mov	r1, r9
 8005110:	4640      	mov	r0, r8
 8005112:	47d0      	blx	sl
 8005114:	3001      	adds	r0, #1
 8005116:	d0ad      	beq.n	8005074 <_printf_i+0x15c>
 8005118:	6823      	ldr	r3, [r4, #0]
 800511a:	079b      	lsls	r3, r3, #30
 800511c:	d413      	bmi.n	8005146 <_printf_i+0x22e>
 800511e:	68e0      	ldr	r0, [r4, #12]
 8005120:	9b03      	ldr	r3, [sp, #12]
 8005122:	4298      	cmp	r0, r3
 8005124:	bfb8      	it	lt
 8005126:	4618      	movlt	r0, r3
 8005128:	e7a6      	b.n	8005078 <_printf_i+0x160>
 800512a:	2301      	movs	r3, #1
 800512c:	4632      	mov	r2, r6
 800512e:	4649      	mov	r1, r9
 8005130:	4640      	mov	r0, r8
 8005132:	47d0      	blx	sl
 8005134:	3001      	adds	r0, #1
 8005136:	d09d      	beq.n	8005074 <_printf_i+0x15c>
 8005138:	3501      	adds	r5, #1
 800513a:	68e3      	ldr	r3, [r4, #12]
 800513c:	9903      	ldr	r1, [sp, #12]
 800513e:	1a5b      	subs	r3, r3, r1
 8005140:	42ab      	cmp	r3, r5
 8005142:	dcf2      	bgt.n	800512a <_printf_i+0x212>
 8005144:	e7eb      	b.n	800511e <_printf_i+0x206>
 8005146:	2500      	movs	r5, #0
 8005148:	f104 0619 	add.w	r6, r4, #25
 800514c:	e7f5      	b.n	800513a <_printf_i+0x222>
 800514e:	bf00      	nop
 8005150:	08005667 	.word	0x08005667
 8005154:	08005678 	.word	0x08005678

08005158 <__swbuf_r>:
 8005158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800515a:	460e      	mov	r6, r1
 800515c:	4614      	mov	r4, r2
 800515e:	4605      	mov	r5, r0
 8005160:	b118      	cbz	r0, 800516a <__swbuf_r+0x12>
 8005162:	6a03      	ldr	r3, [r0, #32]
 8005164:	b90b      	cbnz	r3, 800516a <__swbuf_r+0x12>
 8005166:	f7ff f9d1 	bl	800450c <__sinit>
 800516a:	69a3      	ldr	r3, [r4, #24]
 800516c:	60a3      	str	r3, [r4, #8]
 800516e:	89a3      	ldrh	r3, [r4, #12]
 8005170:	071a      	lsls	r2, r3, #28
 8005172:	d501      	bpl.n	8005178 <__swbuf_r+0x20>
 8005174:	6923      	ldr	r3, [r4, #16]
 8005176:	b943      	cbnz	r3, 800518a <__swbuf_r+0x32>
 8005178:	4621      	mov	r1, r4
 800517a:	4628      	mov	r0, r5
 800517c:	f000 f82a 	bl	80051d4 <__swsetup_r>
 8005180:	b118      	cbz	r0, 800518a <__swbuf_r+0x32>
 8005182:	f04f 37ff 	mov.w	r7, #4294967295
 8005186:	4638      	mov	r0, r7
 8005188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	6922      	ldr	r2, [r4, #16]
 800518e:	1a98      	subs	r0, r3, r2
 8005190:	6963      	ldr	r3, [r4, #20]
 8005192:	b2f6      	uxtb	r6, r6
 8005194:	4283      	cmp	r3, r0
 8005196:	4637      	mov	r7, r6
 8005198:	dc05      	bgt.n	80051a6 <__swbuf_r+0x4e>
 800519a:	4621      	mov	r1, r4
 800519c:	4628      	mov	r0, r5
 800519e:	f7ff fcbb 	bl	8004b18 <_fflush_r>
 80051a2:	2800      	cmp	r0, #0
 80051a4:	d1ed      	bne.n	8005182 <__swbuf_r+0x2a>
 80051a6:	68a3      	ldr	r3, [r4, #8]
 80051a8:	3b01      	subs	r3, #1
 80051aa:	60a3      	str	r3, [r4, #8]
 80051ac:	6823      	ldr	r3, [r4, #0]
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	6022      	str	r2, [r4, #0]
 80051b2:	701e      	strb	r6, [r3, #0]
 80051b4:	6962      	ldr	r2, [r4, #20]
 80051b6:	1c43      	adds	r3, r0, #1
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d004      	beq.n	80051c6 <__swbuf_r+0x6e>
 80051bc:	89a3      	ldrh	r3, [r4, #12]
 80051be:	07db      	lsls	r3, r3, #31
 80051c0:	d5e1      	bpl.n	8005186 <__swbuf_r+0x2e>
 80051c2:	2e0a      	cmp	r6, #10
 80051c4:	d1df      	bne.n	8005186 <__swbuf_r+0x2e>
 80051c6:	4621      	mov	r1, r4
 80051c8:	4628      	mov	r0, r5
 80051ca:	f7ff fca5 	bl	8004b18 <_fflush_r>
 80051ce:	2800      	cmp	r0, #0
 80051d0:	d0d9      	beq.n	8005186 <__swbuf_r+0x2e>
 80051d2:	e7d6      	b.n	8005182 <__swbuf_r+0x2a>

080051d4 <__swsetup_r>:
 80051d4:	b538      	push	{r3, r4, r5, lr}
 80051d6:	4b29      	ldr	r3, [pc, #164]	@ (800527c <__swsetup_r+0xa8>)
 80051d8:	4605      	mov	r5, r0
 80051da:	6818      	ldr	r0, [r3, #0]
 80051dc:	460c      	mov	r4, r1
 80051de:	b118      	cbz	r0, 80051e8 <__swsetup_r+0x14>
 80051e0:	6a03      	ldr	r3, [r0, #32]
 80051e2:	b90b      	cbnz	r3, 80051e8 <__swsetup_r+0x14>
 80051e4:	f7ff f992 	bl	800450c <__sinit>
 80051e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051ec:	0719      	lsls	r1, r3, #28
 80051ee:	d422      	bmi.n	8005236 <__swsetup_r+0x62>
 80051f0:	06da      	lsls	r2, r3, #27
 80051f2:	d407      	bmi.n	8005204 <__swsetup_r+0x30>
 80051f4:	2209      	movs	r2, #9
 80051f6:	602a      	str	r2, [r5, #0]
 80051f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051fc:	81a3      	strh	r3, [r4, #12]
 80051fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005202:	e033      	b.n	800526c <__swsetup_r+0x98>
 8005204:	0758      	lsls	r0, r3, #29
 8005206:	d512      	bpl.n	800522e <__swsetup_r+0x5a>
 8005208:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800520a:	b141      	cbz	r1, 800521e <__swsetup_r+0x4a>
 800520c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005210:	4299      	cmp	r1, r3
 8005212:	d002      	beq.n	800521a <__swsetup_r+0x46>
 8005214:	4628      	mov	r0, r5
 8005216:	f7ff fafb 	bl	8004810 <_free_r>
 800521a:	2300      	movs	r3, #0
 800521c:	6363      	str	r3, [r4, #52]	@ 0x34
 800521e:	89a3      	ldrh	r3, [r4, #12]
 8005220:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005224:	81a3      	strh	r3, [r4, #12]
 8005226:	2300      	movs	r3, #0
 8005228:	6063      	str	r3, [r4, #4]
 800522a:	6923      	ldr	r3, [r4, #16]
 800522c:	6023      	str	r3, [r4, #0]
 800522e:	89a3      	ldrh	r3, [r4, #12]
 8005230:	f043 0308 	orr.w	r3, r3, #8
 8005234:	81a3      	strh	r3, [r4, #12]
 8005236:	6923      	ldr	r3, [r4, #16]
 8005238:	b94b      	cbnz	r3, 800524e <__swsetup_r+0x7a>
 800523a:	89a3      	ldrh	r3, [r4, #12]
 800523c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005240:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005244:	d003      	beq.n	800524e <__swsetup_r+0x7a>
 8005246:	4621      	mov	r1, r4
 8005248:	4628      	mov	r0, r5
 800524a:	f000 f883 	bl	8005354 <__smakebuf_r>
 800524e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005252:	f013 0201 	ands.w	r2, r3, #1
 8005256:	d00a      	beq.n	800526e <__swsetup_r+0x9a>
 8005258:	2200      	movs	r2, #0
 800525a:	60a2      	str	r2, [r4, #8]
 800525c:	6962      	ldr	r2, [r4, #20]
 800525e:	4252      	negs	r2, r2
 8005260:	61a2      	str	r2, [r4, #24]
 8005262:	6922      	ldr	r2, [r4, #16]
 8005264:	b942      	cbnz	r2, 8005278 <__swsetup_r+0xa4>
 8005266:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800526a:	d1c5      	bne.n	80051f8 <__swsetup_r+0x24>
 800526c:	bd38      	pop	{r3, r4, r5, pc}
 800526e:	0799      	lsls	r1, r3, #30
 8005270:	bf58      	it	pl
 8005272:	6962      	ldrpl	r2, [r4, #20]
 8005274:	60a2      	str	r2, [r4, #8]
 8005276:	e7f4      	b.n	8005262 <__swsetup_r+0x8e>
 8005278:	2000      	movs	r0, #0
 800527a:	e7f7      	b.n	800526c <__swsetup_r+0x98>
 800527c:	20000028 	.word	0x20000028

08005280 <_raise_r>:
 8005280:	291f      	cmp	r1, #31
 8005282:	b538      	push	{r3, r4, r5, lr}
 8005284:	4605      	mov	r5, r0
 8005286:	460c      	mov	r4, r1
 8005288:	d904      	bls.n	8005294 <_raise_r+0x14>
 800528a:	2316      	movs	r3, #22
 800528c:	6003      	str	r3, [r0, #0]
 800528e:	f04f 30ff 	mov.w	r0, #4294967295
 8005292:	bd38      	pop	{r3, r4, r5, pc}
 8005294:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005296:	b112      	cbz	r2, 800529e <_raise_r+0x1e>
 8005298:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800529c:	b94b      	cbnz	r3, 80052b2 <_raise_r+0x32>
 800529e:	4628      	mov	r0, r5
 80052a0:	f000 f830 	bl	8005304 <_getpid_r>
 80052a4:	4622      	mov	r2, r4
 80052a6:	4601      	mov	r1, r0
 80052a8:	4628      	mov	r0, r5
 80052aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052ae:	f000 b817 	b.w	80052e0 <_kill_r>
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d00a      	beq.n	80052cc <_raise_r+0x4c>
 80052b6:	1c59      	adds	r1, r3, #1
 80052b8:	d103      	bne.n	80052c2 <_raise_r+0x42>
 80052ba:	2316      	movs	r3, #22
 80052bc:	6003      	str	r3, [r0, #0]
 80052be:	2001      	movs	r0, #1
 80052c0:	e7e7      	b.n	8005292 <_raise_r+0x12>
 80052c2:	2100      	movs	r1, #0
 80052c4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80052c8:	4620      	mov	r0, r4
 80052ca:	4798      	blx	r3
 80052cc:	2000      	movs	r0, #0
 80052ce:	e7e0      	b.n	8005292 <_raise_r+0x12>

080052d0 <raise>:
 80052d0:	4b02      	ldr	r3, [pc, #8]	@ (80052dc <raise+0xc>)
 80052d2:	4601      	mov	r1, r0
 80052d4:	6818      	ldr	r0, [r3, #0]
 80052d6:	f7ff bfd3 	b.w	8005280 <_raise_r>
 80052da:	bf00      	nop
 80052dc:	20000028 	.word	0x20000028

080052e0 <_kill_r>:
 80052e0:	b538      	push	{r3, r4, r5, lr}
 80052e2:	4d07      	ldr	r5, [pc, #28]	@ (8005300 <_kill_r+0x20>)
 80052e4:	2300      	movs	r3, #0
 80052e6:	4604      	mov	r4, r0
 80052e8:	4608      	mov	r0, r1
 80052ea:	4611      	mov	r1, r2
 80052ec:	602b      	str	r3, [r5, #0]
 80052ee:	f7fb ff7a 	bl	80011e6 <_kill>
 80052f2:	1c43      	adds	r3, r0, #1
 80052f4:	d102      	bne.n	80052fc <_kill_r+0x1c>
 80052f6:	682b      	ldr	r3, [r5, #0]
 80052f8:	b103      	cbz	r3, 80052fc <_kill_r+0x1c>
 80052fa:	6023      	str	r3, [r4, #0]
 80052fc:	bd38      	pop	{r3, r4, r5, pc}
 80052fe:	bf00      	nop
 8005300:	20000558 	.word	0x20000558

08005304 <_getpid_r>:
 8005304:	f7fb bf67 	b.w	80011d6 <_getpid>

08005308 <__swhatbuf_r>:
 8005308:	b570      	push	{r4, r5, r6, lr}
 800530a:	460c      	mov	r4, r1
 800530c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005310:	2900      	cmp	r1, #0
 8005312:	b096      	sub	sp, #88	@ 0x58
 8005314:	4615      	mov	r5, r2
 8005316:	461e      	mov	r6, r3
 8005318:	da0d      	bge.n	8005336 <__swhatbuf_r+0x2e>
 800531a:	89a3      	ldrh	r3, [r4, #12]
 800531c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005320:	f04f 0100 	mov.w	r1, #0
 8005324:	bf14      	ite	ne
 8005326:	2340      	movne	r3, #64	@ 0x40
 8005328:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800532c:	2000      	movs	r0, #0
 800532e:	6031      	str	r1, [r6, #0]
 8005330:	602b      	str	r3, [r5, #0]
 8005332:	b016      	add	sp, #88	@ 0x58
 8005334:	bd70      	pop	{r4, r5, r6, pc}
 8005336:	466a      	mov	r2, sp
 8005338:	f000 f848 	bl	80053cc <_fstat_r>
 800533c:	2800      	cmp	r0, #0
 800533e:	dbec      	blt.n	800531a <__swhatbuf_r+0x12>
 8005340:	9901      	ldr	r1, [sp, #4]
 8005342:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005346:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800534a:	4259      	negs	r1, r3
 800534c:	4159      	adcs	r1, r3
 800534e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005352:	e7eb      	b.n	800532c <__swhatbuf_r+0x24>

08005354 <__smakebuf_r>:
 8005354:	898b      	ldrh	r3, [r1, #12]
 8005356:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005358:	079d      	lsls	r5, r3, #30
 800535a:	4606      	mov	r6, r0
 800535c:	460c      	mov	r4, r1
 800535e:	d507      	bpl.n	8005370 <__smakebuf_r+0x1c>
 8005360:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005364:	6023      	str	r3, [r4, #0]
 8005366:	6123      	str	r3, [r4, #16]
 8005368:	2301      	movs	r3, #1
 800536a:	6163      	str	r3, [r4, #20]
 800536c:	b003      	add	sp, #12
 800536e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005370:	ab01      	add	r3, sp, #4
 8005372:	466a      	mov	r2, sp
 8005374:	f7ff ffc8 	bl	8005308 <__swhatbuf_r>
 8005378:	9f00      	ldr	r7, [sp, #0]
 800537a:	4605      	mov	r5, r0
 800537c:	4639      	mov	r1, r7
 800537e:	4630      	mov	r0, r6
 8005380:	f7ff faba 	bl	80048f8 <_malloc_r>
 8005384:	b948      	cbnz	r0, 800539a <__smakebuf_r+0x46>
 8005386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800538a:	059a      	lsls	r2, r3, #22
 800538c:	d4ee      	bmi.n	800536c <__smakebuf_r+0x18>
 800538e:	f023 0303 	bic.w	r3, r3, #3
 8005392:	f043 0302 	orr.w	r3, r3, #2
 8005396:	81a3      	strh	r3, [r4, #12]
 8005398:	e7e2      	b.n	8005360 <__smakebuf_r+0xc>
 800539a:	89a3      	ldrh	r3, [r4, #12]
 800539c:	6020      	str	r0, [r4, #0]
 800539e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053a2:	81a3      	strh	r3, [r4, #12]
 80053a4:	9b01      	ldr	r3, [sp, #4]
 80053a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80053aa:	b15b      	cbz	r3, 80053c4 <__smakebuf_r+0x70>
 80053ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053b0:	4630      	mov	r0, r6
 80053b2:	f000 f81d 	bl	80053f0 <_isatty_r>
 80053b6:	b128      	cbz	r0, 80053c4 <__smakebuf_r+0x70>
 80053b8:	89a3      	ldrh	r3, [r4, #12]
 80053ba:	f023 0303 	bic.w	r3, r3, #3
 80053be:	f043 0301 	orr.w	r3, r3, #1
 80053c2:	81a3      	strh	r3, [r4, #12]
 80053c4:	89a3      	ldrh	r3, [r4, #12]
 80053c6:	431d      	orrs	r5, r3
 80053c8:	81a5      	strh	r5, [r4, #12]
 80053ca:	e7cf      	b.n	800536c <__smakebuf_r+0x18>

080053cc <_fstat_r>:
 80053cc:	b538      	push	{r3, r4, r5, lr}
 80053ce:	4d07      	ldr	r5, [pc, #28]	@ (80053ec <_fstat_r+0x20>)
 80053d0:	2300      	movs	r3, #0
 80053d2:	4604      	mov	r4, r0
 80053d4:	4608      	mov	r0, r1
 80053d6:	4611      	mov	r1, r2
 80053d8:	602b      	str	r3, [r5, #0]
 80053da:	f7fb ff64 	bl	80012a6 <_fstat>
 80053de:	1c43      	adds	r3, r0, #1
 80053e0:	d102      	bne.n	80053e8 <_fstat_r+0x1c>
 80053e2:	682b      	ldr	r3, [r5, #0]
 80053e4:	b103      	cbz	r3, 80053e8 <_fstat_r+0x1c>
 80053e6:	6023      	str	r3, [r4, #0]
 80053e8:	bd38      	pop	{r3, r4, r5, pc}
 80053ea:	bf00      	nop
 80053ec:	20000558 	.word	0x20000558

080053f0 <_isatty_r>:
 80053f0:	b538      	push	{r3, r4, r5, lr}
 80053f2:	4d06      	ldr	r5, [pc, #24]	@ (800540c <_isatty_r+0x1c>)
 80053f4:	2300      	movs	r3, #0
 80053f6:	4604      	mov	r4, r0
 80053f8:	4608      	mov	r0, r1
 80053fa:	602b      	str	r3, [r5, #0]
 80053fc:	f7fb ff63 	bl	80012c6 <_isatty>
 8005400:	1c43      	adds	r3, r0, #1
 8005402:	d102      	bne.n	800540a <_isatty_r+0x1a>
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	b103      	cbz	r3, 800540a <_isatty_r+0x1a>
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	bd38      	pop	{r3, r4, r5, pc}
 800540c:	20000558 	.word	0x20000558

08005410 <_init>:
 8005410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005412:	bf00      	nop
 8005414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005416:	bc08      	pop	{r3}
 8005418:	469e      	mov	lr, r3
 800541a:	4770      	bx	lr

0800541c <_fini>:
 800541c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800541e:	bf00      	nop
 8005420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005422:	bc08      	pop	{r3}
 8005424:	469e      	mov	lr, r3
 8005426:	4770      	bx	lr


GameinatorB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040f0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080042c8  080042c8  000052c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004380  08004380  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004380  08004380  00005380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004388  08004388  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004388  08004388  00005388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800438c  0800438c  0000538c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004390  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  2000000c  0800439c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  0800439c  00006360  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ece1  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002114  00000000  00000000  00014d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  00016e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000094a  00000000  00000000  00017a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bc83  00000000  00000000  0001838a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f82e  00000000  00000000  0003400d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b8a9c  00000000  00000000  0004383b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fc2d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030f8  00000000  00000000  000fc31c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000ff414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080042b0 	.word	0x080042b0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080042b0 	.word	0x080042b0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <setLED>:

extern SPI_HandleTypeDef hspi1;


void setLED (int led, int RED, int GREEN, int BLUE)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
 8000514:	603b      	str	r3, [r7, #0]
	LED_Data[led][0] = led;
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	b2d9      	uxtb	r1, r3
 800051a:	4a11      	ldr	r2, [pc, #68]	@ (8000560 <setLED+0x58>)
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[led][1] = GREEN;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	b2d9      	uxtb	r1, r3
 8000526:	4a0e      	ldr	r2, [pc, #56]	@ (8000560 <setLED+0x58>)
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	4413      	add	r3, r2
 800052e:	460a      	mov	r2, r1
 8000530:	705a      	strb	r2, [r3, #1]
	LED_Data[led][2] = RED;
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	b2d9      	uxtb	r1, r3
 8000536:	4a0a      	ldr	r2, [pc, #40]	@ (8000560 <setLED+0x58>)
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	4413      	add	r3, r2
 800053e:	460a      	mov	r2, r1
 8000540:	709a      	strb	r2, [r3, #2]
	LED_Data[led][3] = BLUE;
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	b2d9      	uxtb	r1, r3
 8000546:	4a06      	ldr	r2, [pc, #24]	@ (8000560 <setLED+0x58>)
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	4413      	add	r3, r2
 800054e:	460a      	mov	r2, r1
 8000550:	70da      	strb	r2, [r3, #3]
}
 8000552:	bf00      	nop
 8000554:	3714      	adds	r7, #20
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20000028 	.word	0x20000028

08000564 <ws2812_spi>:


void ws2812_spi (int GREEN, int RED, int BLUE)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08e      	sub	sp, #56	@ 0x38
 8000568:	af00      	add	r7, sp, #0
 800056a:	60f8      	str	r0, [r7, #12]
 800056c:	60b9      	str	r1, [r7, #8]
 800056e:	607a      	str	r2, [r7, #4]
	uint32_t color = GREEN<<16 | RED<<8 | BLUE;
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	041a      	lsls	r2, r3, #16
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	021b      	lsls	r3, r3, #8
 8000578:	431a      	orrs	r2, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4313      	orrs	r3, r2
 800057e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint8_t sendData[24];
	int indx = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	637b      	str	r3, [r7, #52]	@ 0x34

	for (int i = 23; i>=0; i--)
 8000584:	2317      	movs	r3, #23
 8000586:	633b      	str	r3, [r7, #48]	@ 0x30
 8000588:	e01b      	b.n	80005c2 <ws2812_spi+0x5e>
	{
		if (((color>>i)&0x01) == 1) sendData[indx++] = 0b110;
 800058a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800058c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800058e:	fa22 f303 	lsr.w	r3, r2, r3
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	2b00      	cmp	r3, #0
 8000598:	d008      	beq.n	80005ac <ws2812_spi+0x48>
 800059a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800059c:	1c5a      	adds	r2, r3, #1
 800059e:	637a      	str	r2, [r7, #52]	@ 0x34
 80005a0:	3338      	adds	r3, #56	@ 0x38
 80005a2:	443b      	add	r3, r7
 80005a4:	2206      	movs	r2, #6
 80005a6:	f803 2c24 	strb.w	r2, [r3, #-36]
 80005aa:	e007      	b.n	80005bc <ws2812_spi+0x58>
		else sendData[indx++] = 0b100;
 80005ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80005ae:	1c5a      	adds	r2, r3, #1
 80005b0:	637a      	str	r2, [r7, #52]	@ 0x34
 80005b2:	3338      	adds	r3, #56	@ 0x38
 80005b4:	443b      	add	r3, r7
 80005b6:	2204      	movs	r2, #4
 80005b8:	f803 2c24 	strb.w	r2, [r3, #-36]
	for (int i = 23; i>=0; i--)
 80005bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005be:	3b01      	subs	r3, #1
 80005c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80005c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dae0      	bge.n	800058a <ws2812_spi+0x26>
	}

	HAL_SPI_Transmit(&hspi1, sendData, 24, 1000);
 80005c8:	f107 0114 	add.w	r1, r7, #20
 80005cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005d0:	2218      	movs	r2, #24
 80005d2:	4803      	ldr	r0, [pc, #12]	@ (80005e0 <ws2812_spi+0x7c>)
 80005d4:	f002 fb8d 	bl	8002cf2 <HAL_SPI_Transmit>
}
 80005d8:	bf00      	nop
 80005da:	3738      	adds	r7, #56	@ 0x38
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000064 	.word	0x20000064

080005e4 <WS2812_Send>:

void WS2812_Send (void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
	for (int i=0; i<NUM_LED; i++)
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	e016      	b.n	800061e <WS2812_Send+0x3a>
	{
		ws2812_spi(LED_Data[i][1],LED_Data[i][2],LED_Data[i][3]);
 80005f0:	4a10      	ldr	r2, [pc, #64]	@ (8000634 <WS2812_Send+0x50>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	4413      	add	r3, r2
 80005f8:	785b      	ldrb	r3, [r3, #1]
 80005fa:	4618      	mov	r0, r3
 80005fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000634 <WS2812_Send+0x50>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	4413      	add	r3, r2
 8000604:	789b      	ldrb	r3, [r3, #2]
 8000606:	4619      	mov	r1, r3
 8000608:	4a0a      	ldr	r2, [pc, #40]	@ (8000634 <WS2812_Send+0x50>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	4413      	add	r3, r2
 8000610:	78db      	ldrb	r3, [r3, #3]
 8000612:	461a      	mov	r2, r3
 8000614:	f7ff ffa6 	bl	8000564 <ws2812_spi>
	for (int i=0; i<NUM_LED; i++)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3301      	adds	r3, #1
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b0e      	cmp	r3, #14
 8000622:	dde5      	ble.n	80005f0 <WS2812_Send+0xc>
	}
	HAL_Delay (1);
 8000624:	2001      	movs	r0, #1
 8000626:	f000 ffcb 	bl	80015c0 <HAL_Delay>
}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000028 	.word	0x20000028

08000638 <FreeUARTBuffer>:
  * @brief  The application entry point.
  * @retval int
  */

void FreeUARTBuffer(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
    // Step 1: Abort UART communication
    HAL_UART_Abort(&huart2);
 800063c:	480c      	ldr	r0, [pc, #48]	@ (8000670 <FreeUARTBuffer+0x38>)
 800063e:	f002 ff0f 	bl	8003460 <HAL_UART_Abort>

    // Step 2: Clear any application-level buffers
    // Example: Assuming you have an Rx buffer
    memset(RxBuffer, 0, sizeof(RxBuffer));
 8000642:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000646:	2100      	movs	r1, #0
 8000648:	480a      	ldr	r0, [pc, #40]	@ (8000674 <FreeUARTBuffer+0x3c>)
 800064a:	f003 fe05 	bl	8004258 <memset>
    memset(TxBuffer, 0, sizeof(TxBuffer));
 800064e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000652:	2100      	movs	r1, #0
 8000654:	4808      	ldr	r0, [pc, #32]	@ (8000678 <FreeUARTBuffer+0x40>)
 8000656:	f003 fdff 	bl	8004258 <memset>

    // Step 3: Reinitialize UART (optional)
    if (HAL_UART_Init(&huart2) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	@ (8000670 <FreeUARTBuffer+0x38>)
 800065c:	f002 fe22 	bl	80032a4 <HAL_UART_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <FreeUARTBuffer+0x32>
    {
        // Initialization Error
        Error_Handler();
 8000666:	f000 fe0b 	bl	8001280 <Error_Handler>
    }
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200000c8 	.word	0x200000c8
 8000674:	2000015c 	.word	0x2000015c
 8000678:	2000025c 	.word	0x2000025c

0800067c <main>:

int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b0b2      	sub	sp, #200	@ 0xc8
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000682:	f000 ff2c 	bl	80014de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000686:	f000 fc9b 	bl	8000fc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068a:	f000 fd83 	bl	8001194 <MX_GPIO_Init>
  MX_SPI1_Init();
 800068e:	f000 fce3 	bl	8001058 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000692:	f000 fd1f 	bl	80010d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  int counter_1 = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  int counter_2 = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  int counter_3 = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  int counter_4 = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  int counter_5 = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  int counter_6 = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  int counter_7 = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  int counter_8 = 0;
 80006c0:	2300      	movs	r3, #0
 80006c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  int counter_9 = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  int counter_10 = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int counter_11 = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  int counter_12 = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  int counter_13 = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  int counter_14 = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  int counter_15 = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int turn_counter = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  setLED(0, 80, 80, 80);
 80006f6:	2350      	movs	r3, #80	@ 0x50
 80006f8:	2250      	movs	r2, #80	@ 0x50
 80006fa:	2150      	movs	r1, #80	@ 0x50
 80006fc:	2000      	movs	r0, #0
 80006fe:	f7ff ff03 	bl	8000508 <setLED>
  setLED(1, 80, 80, 80);
 8000702:	2350      	movs	r3, #80	@ 0x50
 8000704:	2250      	movs	r2, #80	@ 0x50
 8000706:	2150      	movs	r1, #80	@ 0x50
 8000708:	2001      	movs	r0, #1
 800070a:	f7ff fefd 	bl	8000508 <setLED>
  setLED(2, 80, 80, 80);
 800070e:	2350      	movs	r3, #80	@ 0x50
 8000710:	2250      	movs	r2, #80	@ 0x50
 8000712:	2150      	movs	r1, #80	@ 0x50
 8000714:	2002      	movs	r0, #2
 8000716:	f7ff fef7 	bl	8000508 <setLED>
  setLED(3, 80, 80, 80);
 800071a:	2350      	movs	r3, #80	@ 0x50
 800071c:	2250      	movs	r2, #80	@ 0x50
 800071e:	2150      	movs	r1, #80	@ 0x50
 8000720:	2003      	movs	r0, #3
 8000722:	f7ff fef1 	bl	8000508 <setLED>
  setLED(4, 80, 80, 80);
 8000726:	2350      	movs	r3, #80	@ 0x50
 8000728:	2250      	movs	r2, #80	@ 0x50
 800072a:	2150      	movs	r1, #80	@ 0x50
 800072c:	2004      	movs	r0, #4
 800072e:	f7ff feeb 	bl	8000508 <setLED>
  setLED(5, 80, 80, 80);
 8000732:	2350      	movs	r3, #80	@ 0x50
 8000734:	2250      	movs	r2, #80	@ 0x50
 8000736:	2150      	movs	r1, #80	@ 0x50
 8000738:	2005      	movs	r0, #5
 800073a:	f7ff fee5 	bl	8000508 <setLED>
  setLED(6, 80, 80, 80);
 800073e:	2350      	movs	r3, #80	@ 0x50
 8000740:	2250      	movs	r2, #80	@ 0x50
 8000742:	2150      	movs	r1, #80	@ 0x50
 8000744:	2006      	movs	r0, #6
 8000746:	f7ff fedf 	bl	8000508 <setLED>
  setLED(7, 80, 80, 80);
 800074a:	2350      	movs	r3, #80	@ 0x50
 800074c:	2250      	movs	r2, #80	@ 0x50
 800074e:	2150      	movs	r1, #80	@ 0x50
 8000750:	2007      	movs	r0, #7
 8000752:	f7ff fed9 	bl	8000508 <setLED>
  setLED(8, 80, 80, 80);
 8000756:	2350      	movs	r3, #80	@ 0x50
 8000758:	2250      	movs	r2, #80	@ 0x50
 800075a:	2150      	movs	r1, #80	@ 0x50
 800075c:	2008      	movs	r0, #8
 800075e:	f7ff fed3 	bl	8000508 <setLED>
  setLED(9, 80, 80, 80);
 8000762:	2350      	movs	r3, #80	@ 0x50
 8000764:	2250      	movs	r2, #80	@ 0x50
 8000766:	2150      	movs	r1, #80	@ 0x50
 8000768:	2009      	movs	r0, #9
 800076a:	f7ff fecd 	bl	8000508 <setLED>
  setLED(10, 80, 80, 80);
 800076e:	2350      	movs	r3, #80	@ 0x50
 8000770:	2250      	movs	r2, #80	@ 0x50
 8000772:	2150      	movs	r1, #80	@ 0x50
 8000774:	200a      	movs	r0, #10
 8000776:	f7ff fec7 	bl	8000508 <setLED>
  setLED(11, 80, 80, 80);
 800077a:	2350      	movs	r3, #80	@ 0x50
 800077c:	2250      	movs	r2, #80	@ 0x50
 800077e:	2150      	movs	r1, #80	@ 0x50
 8000780:	200b      	movs	r0, #11
 8000782:	f7ff fec1 	bl	8000508 <setLED>
  setLED(12, 80, 80, 80);
 8000786:	2350      	movs	r3, #80	@ 0x50
 8000788:	2250      	movs	r2, #80	@ 0x50
 800078a:	2150      	movs	r1, #80	@ 0x50
 800078c:	200c      	movs	r0, #12
 800078e:	f7ff febb 	bl	8000508 <setLED>
  setLED(13, 80, 80, 80);
 8000792:	2350      	movs	r3, #80	@ 0x50
 8000794:	2250      	movs	r2, #80	@ 0x50
 8000796:	2150      	movs	r1, #80	@ 0x50
 8000798:	200d      	movs	r0, #13
 800079a:	f7ff feb5 	bl	8000508 <setLED>
  setLED(14, 80, 80, 80);
 800079e:	2350      	movs	r3, #80	@ 0x50
 80007a0:	2250      	movs	r2, #80	@ 0x50
 80007a2:	2150      	movs	r1, #80	@ 0x50
 80007a4:	200e      	movs	r0, #14
 80007a6:	f7ff feaf 	bl	8000508 <setLED>
  WS2812_Send();
 80007aa:	f7ff ff1b 	bl	80005e4 <WS2812_Send>
  /* USER CODE BEGIN WHILE */
  while (1)
   {
    /* USER CODE END WHILE */

      if(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_RXNE))
 80007ae:	4bc6      	ldr	r3, [pc, #792]	@ (8000ac8 <main+0x44c>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	69db      	ldr	r3, [r3, #28]
 80007b4:	f003 0320 	and.w	r3, r3, #32
 80007b8:	2b20      	cmp	r3, #32
 80007ba:	f040 80af 	bne.w	800091c <main+0x2a0>
      {
          if(turn_counter==0)
 80007be:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d11e      	bne.n	8000804 <main+0x188>
          {
              for(int i=0; i<=14; i++)
 80007c6:	2300      	movs	r3, #0
 80007c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80007cc:	e010      	b.n	80007f0 <main+0x174>
              {
                  setLED(i, 20, 0, 0);
 80007ce:	2300      	movs	r3, #0
 80007d0:	2200      	movs	r2, #0
 80007d2:	2114      	movs	r1, #20
 80007d4:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80007d8:	f7ff fe96 	bl	8000508 <setLED>
                  WS2812_Send();
 80007dc:	f7ff ff02 	bl	80005e4 <WS2812_Send>
                  HAL_Delay(50);
 80007e0:	2032      	movs	r0, #50	@ 0x32
 80007e2:	f000 feed 	bl	80015c0 <HAL_Delay>
              for(int i=0; i<=14; i++)
 80007e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80007ea:	3301      	adds	r3, #1
 80007ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80007f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80007f4:	2b0e      	cmp	r3, #14
 80007f6:	ddea      	ble.n	80007ce <main+0x152>
              }
              turn_counter = 1;
 80007f8:	2301      	movs	r3, #1
 80007fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
              FreeUARTBuffer();
 80007fe:	f7ff ff1b 	bl	8000638 <FreeUARTBuffer>
 8000802:	e08b      	b.n	800091c <main+0x2a0>
          }
          else if(turn_counter==1)
 8000804:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000808:	2b01      	cmp	r3, #1
 800080a:	d11e      	bne.n	800084a <main+0x1ce>
          {
              for(int i=0; i<=14; i++)
 800080c:	2300      	movs	r3, #0
 800080e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000812:	e010      	b.n	8000836 <main+0x1ba>
              {
                  setLED(i, 0, 20, 0);
 8000814:	2300      	movs	r3, #0
 8000816:	2214      	movs	r2, #20
 8000818:	2100      	movs	r1, #0
 800081a:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800081e:	f7ff fe73 	bl	8000508 <setLED>
                  WS2812_Send();
 8000822:	f7ff fedf 	bl	80005e4 <WS2812_Send>
                  HAL_Delay(50);
 8000826:	2032      	movs	r0, #50	@ 0x32
 8000828:	f000 feca 	bl	80015c0 <HAL_Delay>
              for(int i=0; i<=14; i++)
 800082c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000830:	3301      	adds	r3, #1
 8000832:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000836:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800083a:	2b0e      	cmp	r3, #14
 800083c:	ddea      	ble.n	8000814 <main+0x198>
              }
              turn_counter = 2;
 800083e:	2302      	movs	r3, #2
 8000840:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
              FreeUARTBuffer();
 8000844:	f7ff fef8 	bl	8000638 <FreeUARTBuffer>
 8000848:	e068      	b.n	800091c <main+0x2a0>
          }
          else if(turn_counter==2)
 800084a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800084e:	2b02      	cmp	r3, #2
 8000850:	d130      	bne.n	80008b4 <main+0x238>
          {
              for(int i=0; i<=14; i++)
 8000852:	2300      	movs	r3, #0
 8000854:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000856:	e00d      	b.n	8000874 <main+0x1f8>
              {
                  setLED(i, 0, 0, 20);
 8000858:	2314      	movs	r3, #20
 800085a:	2200      	movs	r2, #0
 800085c:	2100      	movs	r1, #0
 800085e:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8000860:	f7ff fe52 	bl	8000508 <setLED>
                  WS2812_Send();
 8000864:	f7ff febe 	bl	80005e4 <WS2812_Send>
                  HAL_Delay(50);
 8000868:	2032      	movs	r0, #50	@ 0x32
 800086a:	f000 fea9 	bl	80015c0 <HAL_Delay>
              for(int i=0; i<=14; i++)
 800086e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000870:	3301      	adds	r3, #1
 8000872:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000874:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000876:	2b0e      	cmp	r3, #14
 8000878:	ddee      	ble.n	8000858 <main+0x1dc>
              }
              setLED(0, 20, 20, 80);
 800087a:	2350      	movs	r3, #80	@ 0x50
 800087c:	2214      	movs	r2, #20
 800087e:	2114      	movs	r1, #20
 8000880:	2000      	movs	r0, #0
 8000882:	f7ff fe41 	bl	8000508 <setLED>
              setLED(1, 20, 20, 80);
 8000886:	2350      	movs	r3, #80	@ 0x50
 8000888:	2214      	movs	r2, #20
 800088a:	2114      	movs	r1, #20
 800088c:	2001      	movs	r0, #1
 800088e:	f7ff fe3b 	bl	8000508 <setLED>
              setLED(2, 20, 20, 80);
 8000892:	2350      	movs	r3, #80	@ 0x50
 8000894:	2214      	movs	r2, #20
 8000896:	2114      	movs	r1, #20
 8000898:	2002      	movs	r0, #2
 800089a:	f7ff fe35 	bl	8000508 <setLED>
              WS2812_Send();
 800089e:	f7ff fea1 	bl	80005e4 <WS2812_Send>
              HAL_Delay(50);
 80008a2:	2032      	movs	r0, #50	@ 0x32
 80008a4:	f000 fe8c 	bl	80015c0 <HAL_Delay>
              turn_counter = 3;
 80008a8:	2303      	movs	r3, #3
 80008aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
              FreeUARTBuffer();
 80008ae:	f7ff fec3 	bl	8000638 <FreeUARTBuffer>
 80008b2:	e033      	b.n	800091c <main+0x2a0>
          }
          else if(turn_counter==3)
 80008b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80008b8:	2b03      	cmp	r3, #3
 80008ba:	d12f      	bne.n	800091c <main+0x2a0>
          {
              for(int i=0; i<=14; i++)
 80008bc:	2300      	movs	r3, #0
 80008be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80008c0:	e00d      	b.n	80008de <main+0x262>
              {
                  setLED(i, 20, 20, 0);
 80008c2:	2300      	movs	r3, #0
 80008c4:	2214      	movs	r2, #20
 80008c6:	2114      	movs	r1, #20
 80008c8:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80008ca:	f7ff fe1d 	bl	8000508 <setLED>
                  WS2812_Send();
 80008ce:	f7ff fe89 	bl	80005e4 <WS2812_Send>
                  HAL_Delay(50);
 80008d2:	2032      	movs	r0, #50	@ 0x32
 80008d4:	f000 fe74 	bl	80015c0 <HAL_Delay>
              for(int i=0; i<=14; i++)
 80008d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80008da:	3301      	adds	r3, #1
 80008dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80008de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80008e0:	2b0e      	cmp	r3, #14
 80008e2:	ddee      	ble.n	80008c2 <main+0x246>
              }
              setLED(12, 80, 80, 20);
 80008e4:	2314      	movs	r3, #20
 80008e6:	2250      	movs	r2, #80	@ 0x50
 80008e8:	2150      	movs	r1, #80	@ 0x50
 80008ea:	200c      	movs	r0, #12
 80008ec:	f7ff fe0c 	bl	8000508 <setLED>
              setLED(13, 80, 80, 20);
 80008f0:	2314      	movs	r3, #20
 80008f2:	2250      	movs	r2, #80	@ 0x50
 80008f4:	2150      	movs	r1, #80	@ 0x50
 80008f6:	200d      	movs	r0, #13
 80008f8:	f7ff fe06 	bl	8000508 <setLED>
              setLED(14, 80, 80, 20);
 80008fc:	2314      	movs	r3, #20
 80008fe:	2250      	movs	r2, #80	@ 0x50
 8000900:	2150      	movs	r1, #80	@ 0x50
 8000902:	200e      	movs	r0, #14
 8000904:	f7ff fe00 	bl	8000508 <setLED>
              WS2812_Send();
 8000908:	f7ff fe6c 	bl	80005e4 <WS2812_Send>
              HAL_Delay(50);
 800090c:	2032      	movs	r0, #50	@ 0x32
 800090e:	f000 fe57 	bl	80015c0 <HAL_Delay>
              turn_counter = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
              FreeUARTBuffer();
 8000918:	f7ff fe8e 	bl	8000638 <FreeUARTBuffer>
          }
      }
  	  if(HAL_GPIO_ReadPin(SENSOR1_GPIO_Port, SENSOR1_Pin)) // Doesn't work
 800091c:	2102      	movs	r1, #2
 800091e:	486b      	ldr	r0, [pc, #428]	@ (8000acc <main+0x450>)
 8000920:	f001 f93a 	bl	8001b98 <HAL_GPIO_ReadPin>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d02d      	beq.n	8000986 <main+0x30a>
  	  {
  		  if (counter_1 == 0)
 800092a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800092e:	2b00      	cmp	r3, #0
 8000930:	d11c      	bne.n	800096c <main+0x2f0>
  		  {
  			  uint8_t data[] = "B3 S1 ";
 8000932:	4a67      	ldr	r2, [pc, #412]	@ (8000ad0 <main+0x454>)
 8000934:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000938:	e892 0003 	ldmia.w	r2, {r0, r1}
 800093c:	6018      	str	r0, [r3, #0]
 800093e:	3304      	adds	r3, #4
 8000940:	8019      	strh	r1, [r3, #0]
 8000942:	3302      	adds	r3, #2
 8000944:	0c0a      	lsrs	r2, r1, #16
 8000946:	701a      	strb	r2, [r3, #0]
  			  HAL_UART_Transmit(&huart2,data,6,10);
 8000948:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 800094c:	230a      	movs	r3, #10
 800094e:	2206      	movs	r2, #6
 8000950:	485d      	ldr	r0, [pc, #372]	@ (8000ac8 <main+0x44c>)
 8000952:	f002 fcf7 	bl	8003344 <HAL_UART_Transmit>
  			  FreeUARTBuffer();
 8000956:	f7ff fe6f 	bl	8000638 <FreeUARTBuffer>
  			  counter_1 = 1500;
 800095a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800095e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  			  HAL_Delay(1500);
 8000962:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000966:	f000 fe2b 	bl	80015c0 <HAL_Delay>
 800096a:	e00c      	b.n	8000986 <main+0x30a>
  		  }
  		  else if(counter_1 < 0)
 800096c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000970:	2b00      	cmp	r3, #0
 8000972:	da03      	bge.n	800097c <main+0x300>
  		  {
  			  counter_1 =0;
 8000974:	2300      	movs	r3, #0
 8000976:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800097a:	e004      	b.n	8000986 <main+0x30a>
  		  }
  		  else
  		  {
  			  counter_1--;
 800097c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000980:	3b01      	subs	r3, #1
 8000982:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  		  }
  	  }
  	  if(HAL_GPIO_ReadPin(SENSOR2_GPIO_Port, SENSOR2_Pin)) // Doesn't work
 8000986:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800098a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800098e:	f001 f903 	bl	8001b98 <HAL_GPIO_ReadPin>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d02d      	beq.n	80009f4 <main+0x378>
  	  {
  		  if (counter_2 == 0)
 8000998:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d11c      	bne.n	80009da <main+0x35e>
  		  {
  			  uint8_t data[] = "B3 S2 ";
 80009a0:	4a4c      	ldr	r2, [pc, #304]	@ (8000ad4 <main+0x458>)
 80009a2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80009a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009aa:	6018      	str	r0, [r3, #0]
 80009ac:	3304      	adds	r3, #4
 80009ae:	8019      	strh	r1, [r3, #0]
 80009b0:	3302      	adds	r3, #2
 80009b2:	0c0a      	lsrs	r2, r1, #16
 80009b4:	701a      	strb	r2, [r3, #0]
  			  HAL_UART_Transmit(&huart2,data,6,10);
 80009b6:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80009ba:	230a      	movs	r3, #10
 80009bc:	2206      	movs	r2, #6
 80009be:	4842      	ldr	r0, [pc, #264]	@ (8000ac8 <main+0x44c>)
 80009c0:	f002 fcc0 	bl	8003344 <HAL_UART_Transmit>
  			  FreeUARTBuffer();
 80009c4:	f7ff fe38 	bl	8000638 <FreeUARTBuffer>
  			  counter_2 = 1500;
 80009c8:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80009cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  			  HAL_Delay(1500);
 80009d0:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80009d4:	f000 fdf4 	bl	80015c0 <HAL_Delay>
 80009d8:	e00c      	b.n	80009f4 <main+0x378>
  		  }
  		  else if(counter_2 < 0)
 80009da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	da03      	bge.n	80009ea <main+0x36e>
  		  {
  			  counter_2 =0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80009e8:	e004      	b.n	80009f4 <main+0x378>
  		  }
  		  else
  		  {
  			  counter_2--;
 80009ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80009ee:	3b01      	subs	r3, #1
 80009f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  		  }
  	  }
  	  if(HAL_GPIO_ReadPin(SENSOR3_GPIO_Port, SENSOR3_Pin))
 80009f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009fc:	f001 f8cc 	bl	8001b98 <HAL_GPIO_ReadPin>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d02d      	beq.n	8000a62 <main+0x3e6>
  	  {
  		  if (counter_3 == 0)
 8000a06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d11c      	bne.n	8000a48 <main+0x3cc>
  		  {
  			  uint8_t data[] = "B3 S3 ";
 8000a0e:	4a32      	ldr	r2, [pc, #200]	@ (8000ad8 <main+0x45c>)
 8000a10:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000a14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a18:	6018      	str	r0, [r3, #0]
 8000a1a:	3304      	adds	r3, #4
 8000a1c:	8019      	strh	r1, [r3, #0]
 8000a1e:	3302      	adds	r3, #2
 8000a20:	0c0a      	lsrs	r2, r1, #16
 8000a22:	701a      	strb	r2, [r3, #0]
  			  HAL_UART_Transmit(&huart2,data,6,10);
 8000a24:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8000a28:	230a      	movs	r3, #10
 8000a2a:	2206      	movs	r2, #6
 8000a2c:	4826      	ldr	r0, [pc, #152]	@ (8000ac8 <main+0x44c>)
 8000a2e:	f002 fc89 	bl	8003344 <HAL_UART_Transmit>
  			  FreeUARTBuffer();
 8000a32:	f7ff fe01 	bl	8000638 <FreeUARTBuffer>
  			  counter_3 = 1500;
 8000a36:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000a3a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  			  HAL_Delay(1500);
 8000a3e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000a42:	f000 fdbd 	bl	80015c0 <HAL_Delay>
 8000a46:	e00c      	b.n	8000a62 <main+0x3e6>
  		  }
  		  else if(counter_3 < 0)
 8000a48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	da03      	bge.n	8000a58 <main+0x3dc>
  		  {
  			  counter_3 =0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8000a56:	e004      	b.n	8000a62 <main+0x3e6>
  		  }
  		  else
  		  {
  			  counter_3--;
 8000a58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000a5c:	3b01      	subs	r3, #1
 8000a5e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  		  }
  	  }
  	  if(HAL_GPIO_ReadPin(SENSOR4_GPIO_Port, SENSOR4_Pin))
 8000a62:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6a:	f001 f895 	bl	8001b98 <HAL_GPIO_ReadPin>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d03a      	beq.n	8000aea <main+0x46e>
  	  {
  		  if (counter_4 == 0)
 8000a74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d11c      	bne.n	8000ab6 <main+0x43a>
  		  {
  			  uint8_t data[] = "B3 S4 ";
 8000a7c:	4a17      	ldr	r2, [pc, #92]	@ (8000adc <main+0x460>)
 8000a7e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000a82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a86:	6018      	str	r0, [r3, #0]
 8000a88:	3304      	adds	r3, #4
 8000a8a:	8019      	strh	r1, [r3, #0]
 8000a8c:	3302      	adds	r3, #2
 8000a8e:	0c0a      	lsrs	r2, r1, #16
 8000a90:	701a      	strb	r2, [r3, #0]
  			  HAL_UART_Transmit(&huart2,data,6,10);
 8000a92:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000a96:	230a      	movs	r3, #10
 8000a98:	2206      	movs	r2, #6
 8000a9a:	480b      	ldr	r0, [pc, #44]	@ (8000ac8 <main+0x44c>)
 8000a9c:	f002 fc52 	bl	8003344 <HAL_UART_Transmit>
  			  FreeUARTBuffer();
 8000aa0:	f7ff fdca 	bl	8000638 <FreeUARTBuffer>
  			  counter_4 = 1500;
 8000aa4:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000aa8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  			  HAL_Delay(1500);
 8000aac:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000ab0:	f000 fd86 	bl	80015c0 <HAL_Delay>
 8000ab4:	e019      	b.n	8000aea <main+0x46e>
  		  }
  		  else if(counter_4 < 0)
 8000ab6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	da10      	bge.n	8000ae0 <main+0x464>
  		  {
  			  counter_4 =0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8000ac4:	e011      	b.n	8000aea <main+0x46e>
 8000ac6:	bf00      	nop
 8000ac8:	200000c8 	.word	0x200000c8
 8000acc:	48000800 	.word	0x48000800
 8000ad0:	080042c8 	.word	0x080042c8
 8000ad4:	080042d0 	.word	0x080042d0
 8000ad8:	080042d8 	.word	0x080042d8
 8000adc:	080042e0 	.word	0x080042e0
  		  }
  		  else
  		  {
  			  counter_4--;
 8000ae0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000ae4:	3b01      	subs	r3, #1
 8000ae6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  		  }
  	  }
  	  if(HAL_GPIO_ReadPin(SENSOR5_GPIO_Port, SENSOR5_Pin))
 8000aea:	2101      	movs	r1, #1
 8000aec:	48b6      	ldr	r0, [pc, #728]	@ (8000dc8 <main+0x74c>)
 8000aee:	f001 f853 	bl	8001b98 <HAL_GPIO_ReadPin>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d02d      	beq.n	8000b54 <main+0x4d8>
  	  {
  		  if (counter_5 == 0)
 8000af8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d11c      	bne.n	8000b3a <main+0x4be>
  		  {
  			  uint8_t data[] = "B3 S5 ";
 8000b00:	4ab2      	ldr	r2, [pc, #712]	@ (8000dcc <main+0x750>)
 8000b02:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000b06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b0a:	6018      	str	r0, [r3, #0]
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	8019      	strh	r1, [r3, #0]
 8000b10:	3302      	adds	r3, #2
 8000b12:	0c0a      	lsrs	r2, r1, #16
 8000b14:	701a      	strb	r2, [r3, #0]
  			  HAL_UART_Transmit(&huart2,data,6,10);
 8000b16:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8000b1a:	230a      	movs	r3, #10
 8000b1c:	2206      	movs	r2, #6
 8000b1e:	48ac      	ldr	r0, [pc, #688]	@ (8000dd0 <main+0x754>)
 8000b20:	f002 fc10 	bl	8003344 <HAL_UART_Transmit>
  			  FreeUARTBuffer();
 8000b24:	f7ff fd88 	bl	8000638 <FreeUARTBuffer>
  			  counter_5 = 1500;
 8000b28:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000b2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  			  HAL_Delay(1500);
 8000b30:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000b34:	f000 fd44 	bl	80015c0 <HAL_Delay>
 8000b38:	e00c      	b.n	8000b54 <main+0x4d8>
  		  }
  		  else if(counter_5 < 0)
 8000b3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	da03      	bge.n	8000b4a <main+0x4ce>
  		  {
  			  counter_5 =0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000b48:	e004      	b.n	8000b54 <main+0x4d8>
  		  }
  		  else
  		  {
  			  counter_5--;
 8000b4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  		  }
  	  }
  	  if(HAL_GPIO_ReadPin(SENSOR6_GPIO_Port, SENSOR6_Pin))
 8000b54:	2102      	movs	r1, #2
 8000b56:	489c      	ldr	r0, [pc, #624]	@ (8000dc8 <main+0x74c>)
 8000b58:	f001 f81e 	bl	8001b98 <HAL_GPIO_ReadPin>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d02d      	beq.n	8000bbe <main+0x542>
  	  {
  		  if (counter_6 == 0)
 8000b62:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d11c      	bne.n	8000ba4 <main+0x528>
  		  {
  			  uint8_t data[] = "B3 S6 ";
 8000b6a:	4a9a      	ldr	r2, [pc, #616]	@ (8000dd4 <main+0x758>)
 8000b6c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b74:	6018      	str	r0, [r3, #0]
 8000b76:	3304      	adds	r3, #4
 8000b78:	8019      	strh	r1, [r3, #0]
 8000b7a:	3302      	adds	r3, #2
 8000b7c:	0c0a      	lsrs	r2, r1, #16
 8000b7e:	701a      	strb	r2, [r3, #0]
  			  HAL_UART_Transmit(&huart2,data,6,10);
 8000b80:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8000b84:	230a      	movs	r3, #10
 8000b86:	2206      	movs	r2, #6
 8000b88:	4891      	ldr	r0, [pc, #580]	@ (8000dd0 <main+0x754>)
 8000b8a:	f002 fbdb 	bl	8003344 <HAL_UART_Transmit>
  			  FreeUARTBuffer();
 8000b8e:	f7ff fd53 	bl	8000638 <FreeUARTBuffer>
  			  counter_6 = 1500;
 8000b92:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000b96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  			  HAL_Delay(1500);
 8000b9a:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000b9e:	f000 fd0f 	bl	80015c0 <HAL_Delay>
 8000ba2:	e00c      	b.n	8000bbe <main+0x542>
  		  }
  		  else if(counter_6 < 0)
 8000ba4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	da03      	bge.n	8000bb4 <main+0x538>
  		  {
  			  counter_6 =0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000bb2:	e004      	b.n	8000bbe <main+0x542>
  		  }
  		  else
  		  {
  			  counter_6--;
 8000bb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  		  }
  	  }
  	  if(HAL_GPIO_ReadPin(SENSOR7_GPIO_Port, SENSOR7_Pin))
 8000bbe:	2104      	movs	r1, #4
 8000bc0:	4881      	ldr	r0, [pc, #516]	@ (8000dc8 <main+0x74c>)
 8000bc2:	f000 ffe9 	bl	8001b98 <HAL_GPIO_ReadPin>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d02d      	beq.n	8000c28 <main+0x5ac>
  	  {
  		  if (counter_7 == 0)
 8000bcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d11c      	bne.n	8000c0e <main+0x592>
  		  {
  			  uint8_t data[] = "B3 S7 ";
 8000bd4:	4a80      	ldr	r2, [pc, #512]	@ (8000dd8 <main+0x75c>)
 8000bd6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bde:	6018      	str	r0, [r3, #0]
 8000be0:	3304      	adds	r3, #4
 8000be2:	8019      	strh	r1, [r3, #0]
 8000be4:	3302      	adds	r3, #2
 8000be6:	0c0a      	lsrs	r2, r1, #16
 8000be8:	701a      	strb	r2, [r3, #0]
  			  HAL_UART_Transmit(&huart2,data,6,10);
 8000bea:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8000bee:	230a      	movs	r3, #10
 8000bf0:	2206      	movs	r2, #6
 8000bf2:	4877      	ldr	r0, [pc, #476]	@ (8000dd0 <main+0x754>)
 8000bf4:	f002 fba6 	bl	8003344 <HAL_UART_Transmit>
  			  FreeUARTBuffer();
 8000bf8:	f7ff fd1e 	bl	8000638 <FreeUARTBuffer>
  			  counter_7 = 1500;
 8000bfc:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000c00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  			  HAL_Delay(1500);
 8000c04:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000c08:	f000 fcda 	bl	80015c0 <HAL_Delay>
 8000c0c:	e00c      	b.n	8000c28 <main+0x5ac>
  		  }
  		  else if(counter_7 < 0)
 8000c0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	da03      	bge.n	8000c1e <main+0x5a2>
  		  {
  			  counter_7 =0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000c1c:	e004      	b.n	8000c28 <main+0x5ac>
  		  }
  		  else
  		  {
  			  counter_7--;
 8000c1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000c22:	3b01      	subs	r3, #1
 8000c24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  		  }
  	  }
  	  if(HAL_GPIO_ReadPin(SENSOR8_GPIO_Port, SENSOR8_Pin))
 8000c28:	2110      	movs	r1, #16
 8000c2a:	4867      	ldr	r0, [pc, #412]	@ (8000dc8 <main+0x74c>)
 8000c2c:	f000 ffb4 	bl	8001b98 <HAL_GPIO_ReadPin>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d02d      	beq.n	8000c92 <main+0x616>
  	  {
  		  if (counter_8 == 0)
 8000c36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d11c      	bne.n	8000c78 <main+0x5fc>
  		  {
  			  uint8_t data[] = "B3 S8 ";
 8000c3e:	4a67      	ldr	r2, [pc, #412]	@ (8000ddc <main+0x760>)
 8000c40:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c48:	6018      	str	r0, [r3, #0]
 8000c4a:	3304      	adds	r3, #4
 8000c4c:	8019      	strh	r1, [r3, #0]
 8000c4e:	3302      	adds	r3, #2
 8000c50:	0c0a      	lsrs	r2, r1, #16
 8000c52:	701a      	strb	r2, [r3, #0]
  			  HAL_UART_Transmit(&huart2,data,6,10);
 8000c54:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8000c58:	230a      	movs	r3, #10
 8000c5a:	2206      	movs	r2, #6
 8000c5c:	485c      	ldr	r0, [pc, #368]	@ (8000dd0 <main+0x754>)
 8000c5e:	f002 fb71 	bl	8003344 <HAL_UART_Transmit>
  			  FreeUARTBuffer();
 8000c62:	f7ff fce9 	bl	8000638 <FreeUARTBuffer>
  			  counter_8 = 1500;
 8000c66:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000c6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  			  HAL_Delay(1500);
 8000c6e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000c72:	f000 fca5 	bl	80015c0 <HAL_Delay>
 8000c76:	e00c      	b.n	8000c92 <main+0x616>
  		  }
  		  else if(counter_8 < 0)
 8000c78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	da03      	bge.n	8000c88 <main+0x60c>
  		  {
  			  counter_8 =0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000c86:	e004      	b.n	8000c92 <main+0x616>
  		  }
  		  else
  		  {
  			  counter_8--;
 8000c88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  		  }
  	  }
  	  if(HAL_GPIO_ReadPin(SENSOR9_GPIO_Port, SENSOR9_Pin)) // Doesn't work
 8000c92:	2120      	movs	r1, #32
 8000c94:	484c      	ldr	r0, [pc, #304]	@ (8000dc8 <main+0x74c>)
 8000c96:	f000 ff7f 	bl	8001b98 <HAL_GPIO_ReadPin>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d02d      	beq.n	8000cfc <main+0x680>
  	  {
  		  if (counter_9 == 0)
 8000ca0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d11c      	bne.n	8000ce2 <main+0x666>
  		  {
  			  uint8_t data[] = "B3 S9 ";
 8000ca8:	4a4d      	ldr	r2, [pc, #308]	@ (8000de0 <main+0x764>)
 8000caa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cb2:	6018      	str	r0, [r3, #0]
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	8019      	strh	r1, [r3, #0]
 8000cb8:	3302      	adds	r3, #2
 8000cba:	0c0a      	lsrs	r2, r1, #16
 8000cbc:	701a      	strb	r2, [r3, #0]
  			  HAL_UART_Transmit(&huart2,data,6,10);
 8000cbe:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000cc2:	230a      	movs	r3, #10
 8000cc4:	2206      	movs	r2, #6
 8000cc6:	4842      	ldr	r0, [pc, #264]	@ (8000dd0 <main+0x754>)
 8000cc8:	f002 fb3c 	bl	8003344 <HAL_UART_Transmit>
  			  FreeUARTBuffer();
 8000ccc:	f7ff fcb4 	bl	8000638 <FreeUARTBuffer>
  			  counter_9 = 1500;
 8000cd0:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000cd4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  			  HAL_Delay(1500);
 8000cd8:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000cdc:	f000 fc70 	bl	80015c0 <HAL_Delay>
 8000ce0:	e00c      	b.n	8000cfc <main+0x680>
  		  }
  		  else if(counter_9 < 0)
 8000ce2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	da03      	bge.n	8000cf2 <main+0x676>
  		  {
  			  counter_9 =0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000cf0:	e004      	b.n	8000cfc <main+0x680>
  		  }
  		  else
  		  {
  			  counter_9--;
 8000cf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  		  }
  	  }
  	  if(HAL_GPIO_ReadPin(SENSOR10_GPIO_Port, SENSOR10_Pin))
 8000cfc:	2140      	movs	r1, #64	@ 0x40
 8000cfe:	4832      	ldr	r0, [pc, #200]	@ (8000dc8 <main+0x74c>)
 8000d00:	f000 ff4a 	bl	8001b98 <HAL_GPIO_ReadPin>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d02d      	beq.n	8000d66 <main+0x6ea>
  	  {
  		  if (counter_10 == 0)
 8000d0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d11c      	bne.n	8000d4c <main+0x6d0>
  		  {
  			  uint8_t data[] = "B3 S10";
 8000d12:	4a34      	ldr	r2, [pc, #208]	@ (8000de4 <main+0x768>)
 8000d14:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d1c:	6018      	str	r0, [r3, #0]
 8000d1e:	3304      	adds	r3, #4
 8000d20:	8019      	strh	r1, [r3, #0]
 8000d22:	3302      	adds	r3, #2
 8000d24:	0c0a      	lsrs	r2, r1, #16
 8000d26:	701a      	strb	r2, [r3, #0]
  			  HAL_UART_Transmit(&huart2,data,6,10);
 8000d28:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000d2c:	230a      	movs	r3, #10
 8000d2e:	2206      	movs	r2, #6
 8000d30:	4827      	ldr	r0, [pc, #156]	@ (8000dd0 <main+0x754>)
 8000d32:	f002 fb07 	bl	8003344 <HAL_UART_Transmit>
  			  FreeUARTBuffer();
 8000d36:	f7ff fc7f 	bl	8000638 <FreeUARTBuffer>
  			  counter_10 = 1500;
 8000d3a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000d3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  			  HAL_Delay(1500);
 8000d42:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000d46:	f000 fc3b 	bl	80015c0 <HAL_Delay>
 8000d4a:	e00c      	b.n	8000d66 <main+0x6ea>
  		  }
  		  else if(counter_10 < 0)
 8000d4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	da03      	bge.n	8000d5c <main+0x6e0>
  		  {
  			  counter_10 =0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000d5a:	e004      	b.n	8000d66 <main+0x6ea>
  		  }
  		  else
  		  {
  			  counter_10--;
 8000d5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000d60:	3b01      	subs	r3, #1
 8000d62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  		  }
  	  }
  	  if(HAL_GPIO_ReadPin(SENSOR11_GPIO_Port, SENSOR11_Pin))
 8000d66:	2180      	movs	r1, #128	@ 0x80
 8000d68:	4817      	ldr	r0, [pc, #92]	@ (8000dc8 <main+0x74c>)
 8000d6a:	f000 ff15 	bl	8001b98 <HAL_GPIO_ReadPin>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d040      	beq.n	8000df6 <main+0x77a>
  	  {
  		  if (counter_11 == 0)
 8000d74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d11c      	bne.n	8000db6 <main+0x73a>
  		  {
  			  uint8_t data[] = "B3 S11";
 8000d7c:	4a1a      	ldr	r2, [pc, #104]	@ (8000de8 <main+0x76c>)
 8000d7e:	f107 0320 	add.w	r3, r7, #32
 8000d82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d86:	6018      	str	r0, [r3, #0]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	8019      	strh	r1, [r3, #0]
 8000d8c:	3302      	adds	r3, #2
 8000d8e:	0c0a      	lsrs	r2, r1, #16
 8000d90:	701a      	strb	r2, [r3, #0]
  			  HAL_UART_Transmit(&huart2,data,6,10);
 8000d92:	f107 0120 	add.w	r1, r7, #32
 8000d96:	230a      	movs	r3, #10
 8000d98:	2206      	movs	r2, #6
 8000d9a:	480d      	ldr	r0, [pc, #52]	@ (8000dd0 <main+0x754>)
 8000d9c:	f002 fad2 	bl	8003344 <HAL_UART_Transmit>
  			  FreeUARTBuffer();
 8000da0:	f7ff fc4a 	bl	8000638 <FreeUARTBuffer>
  			  counter_11 = 1500;
 8000da4:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000da8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  			  HAL_Delay(1500);
 8000dac:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000db0:	f000 fc06 	bl	80015c0 <HAL_Delay>
 8000db4:	e01f      	b.n	8000df6 <main+0x77a>
  		  }
  		  else if(counter_11 < 0)
 8000db6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	da16      	bge.n	8000dec <main+0x770>
  		  {
  			  counter_11 =0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000dc4:	e017      	b.n	8000df6 <main+0x77a>
 8000dc6:	bf00      	nop
 8000dc8:	48000400 	.word	0x48000400
 8000dcc:	080042e8 	.word	0x080042e8
 8000dd0:	200000c8 	.word	0x200000c8
 8000dd4:	080042f0 	.word	0x080042f0
 8000dd8:	080042f8 	.word	0x080042f8
 8000ddc:	08004300 	.word	0x08004300
 8000de0:	08004308 	.word	0x08004308
 8000de4:	08004310 	.word	0x08004310
 8000de8:	08004318 	.word	0x08004318
  		  }
  		  else
  		  {
  			  counter_11--;
 8000dec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000df0:	3b01      	subs	r3, #1
 8000df2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  		  }
  	  }
  	  if(HAL_GPIO_ReadPin(SENSOR12_GPIO_Port, SENSOR12_Pin)) // Doesn't work
 8000df6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dfa:	486b      	ldr	r0, [pc, #428]	@ (8000fa8 <main+0x92c>)
 8000dfc:	f000 fecc 	bl	8001b98 <HAL_GPIO_ReadPin>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d02d      	beq.n	8000e62 <main+0x7e6>
  	  {
  		  if (counter_12 == 0)
 8000e06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d11c      	bne.n	8000e48 <main+0x7cc>
  		  {
  			  uint8_t data[] = "B3 S12";
 8000e0e:	4a67      	ldr	r2, [pc, #412]	@ (8000fac <main+0x930>)
 8000e10:	f107 0318 	add.w	r3, r7, #24
 8000e14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e18:	6018      	str	r0, [r3, #0]
 8000e1a:	3304      	adds	r3, #4
 8000e1c:	8019      	strh	r1, [r3, #0]
 8000e1e:	3302      	adds	r3, #2
 8000e20:	0c0a      	lsrs	r2, r1, #16
 8000e22:	701a      	strb	r2, [r3, #0]
  			  HAL_UART_Transmit(&huart2,data,6,10);
 8000e24:	f107 0118 	add.w	r1, r7, #24
 8000e28:	230a      	movs	r3, #10
 8000e2a:	2206      	movs	r2, #6
 8000e2c:	4860      	ldr	r0, [pc, #384]	@ (8000fb0 <main+0x934>)
 8000e2e:	f002 fa89 	bl	8003344 <HAL_UART_Transmit>
  			  FreeUARTBuffer();
 8000e32:	f7ff fc01 	bl	8000638 <FreeUARTBuffer>
  			  counter_12 = 1500;
 8000e36:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000e3a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  			  HAL_Delay(1500);
 8000e3e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000e42:	f000 fbbd 	bl	80015c0 <HAL_Delay>
 8000e46:	e00c      	b.n	8000e62 <main+0x7e6>
  		  }
  		  else if(counter_12 < 0)
 8000e48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	da03      	bge.n	8000e58 <main+0x7dc>
  		  {
  			  counter_12 =0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000e56:	e004      	b.n	8000e62 <main+0x7e6>
  		  }
  		  else
  		  {
  			  counter_12--;
 8000e58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  		  }
  	  }
  	  if(HAL_GPIO_ReadPin(SENSOR13_GPIO_Port, SENSOR13_Pin)) // Doesn't work
 8000e62:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e66:	4850      	ldr	r0, [pc, #320]	@ (8000fa8 <main+0x92c>)
 8000e68:	f000 fe96 	bl	8001b98 <HAL_GPIO_ReadPin>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d02d      	beq.n	8000ece <main+0x852>
  	  {
  		  if (counter_13 == 0)
 8000e72:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d11c      	bne.n	8000eb4 <main+0x838>
  		  {
  			  uint8_t data[] = "B3 S13";
 8000e7a:	4a4e      	ldr	r2, [pc, #312]	@ (8000fb4 <main+0x938>)
 8000e7c:	f107 0310 	add.w	r3, r7, #16
 8000e80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e84:	6018      	str	r0, [r3, #0]
 8000e86:	3304      	adds	r3, #4
 8000e88:	8019      	strh	r1, [r3, #0]
 8000e8a:	3302      	adds	r3, #2
 8000e8c:	0c0a      	lsrs	r2, r1, #16
 8000e8e:	701a      	strb	r2, [r3, #0]
  			  HAL_UART_Transmit(&huart2,data,6,10);
 8000e90:	f107 0110 	add.w	r1, r7, #16
 8000e94:	230a      	movs	r3, #10
 8000e96:	2206      	movs	r2, #6
 8000e98:	4845      	ldr	r0, [pc, #276]	@ (8000fb0 <main+0x934>)
 8000e9a:	f002 fa53 	bl	8003344 <HAL_UART_Transmit>
  			  FreeUARTBuffer();
 8000e9e:	f7ff fbcb 	bl	8000638 <FreeUARTBuffer>
  			  counter_13 = 1500;
 8000ea2:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000ea6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  			  HAL_Delay(1500);
 8000eaa:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000eae:	f000 fb87 	bl	80015c0 <HAL_Delay>
 8000eb2:	e00c      	b.n	8000ece <main+0x852>
  		  }
  		  else if(counter_13 < 0)
 8000eb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	da03      	bge.n	8000ec4 <main+0x848>
  		  {
  			  counter_13 =0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000ec2:	e004      	b.n	8000ece <main+0x852>
  		  }
  		  else
  		  {
  			  counter_13--;
 8000ec4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  		  }
  	  }
  	  if(HAL_GPIO_ReadPin(SENSOR14_GPIO_Port, SENSOR14_Pin))
 8000ece:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ed2:	4835      	ldr	r0, [pc, #212]	@ (8000fa8 <main+0x92c>)
 8000ed4:	f000 fe60 	bl	8001b98 <HAL_GPIO_ReadPin>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d02d      	beq.n	8000f3a <main+0x8be>
  	  {
  		  if (counter_14 == 0)
 8000ede:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d11c      	bne.n	8000f20 <main+0x8a4>
  		  {
  			  uint8_t data[] = "B3 S14";
 8000ee6:	4a34      	ldr	r2, [pc, #208]	@ (8000fb8 <main+0x93c>)
 8000ee8:	f107 0308 	add.w	r3, r7, #8
 8000eec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ef0:	6018      	str	r0, [r3, #0]
 8000ef2:	3304      	adds	r3, #4
 8000ef4:	8019      	strh	r1, [r3, #0]
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	0c0a      	lsrs	r2, r1, #16
 8000efa:	701a      	strb	r2, [r3, #0]
  			  HAL_UART_Transmit(&huart2,data,6,10);
 8000efc:	f107 0108 	add.w	r1, r7, #8
 8000f00:	230a      	movs	r3, #10
 8000f02:	2206      	movs	r2, #6
 8000f04:	482a      	ldr	r0, [pc, #168]	@ (8000fb0 <main+0x934>)
 8000f06:	f002 fa1d 	bl	8003344 <HAL_UART_Transmit>
  			  FreeUARTBuffer();
 8000f0a:	f7ff fb95 	bl	8000638 <FreeUARTBuffer>
  			  counter_14 = 1500;
 8000f0e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000f12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  			  HAL_Delay(1500);
 8000f16:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000f1a:	f000 fb51 	bl	80015c0 <HAL_Delay>
 8000f1e:	e00c      	b.n	8000f3a <main+0x8be>
  		  }
  		  else if(counter_14 < 0)
 8000f20:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	da03      	bge.n	8000f30 <main+0x8b4>
  		  {
  			  counter_14 =0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000f2e:	e004      	b.n	8000f3a <main+0x8be>
  		  }
  		  else
  		  {
  			  counter_14--;
 8000f30:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000f34:	3b01      	subs	r3, #1
 8000f36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  		  }
  	  }
  	  if(HAL_GPIO_ReadPin(SENSOR15_GPIO_Port, SENSOR15_Pin))
 8000f3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f3e:	481a      	ldr	r0, [pc, #104]	@ (8000fa8 <main+0x92c>)
 8000f40:	f000 fe2a 	bl	8001b98 <HAL_GPIO_ReadPin>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f43f ac31 	beq.w	80007ae <main+0x132>
  	  {
  		  if (counter_15 == 0)
 8000f4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d11a      	bne.n	8000f8a <main+0x90e>
  		  {
  			  uint8_t data[] = "B3 S15";
 8000f54:	4a19      	ldr	r2, [pc, #100]	@ (8000fbc <main+0x940>)
 8000f56:	463b      	mov	r3, r7
 8000f58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f5c:	6018      	str	r0, [r3, #0]
 8000f5e:	3304      	adds	r3, #4
 8000f60:	8019      	strh	r1, [r3, #0]
 8000f62:	3302      	adds	r3, #2
 8000f64:	0c0a      	lsrs	r2, r1, #16
 8000f66:	701a      	strb	r2, [r3, #0]
  			  HAL_UART_Transmit(&huart2,data,6,10);
 8000f68:	4639      	mov	r1, r7
 8000f6a:	230a      	movs	r3, #10
 8000f6c:	2206      	movs	r2, #6
 8000f6e:	4810      	ldr	r0, [pc, #64]	@ (8000fb0 <main+0x934>)
 8000f70:	f002 f9e8 	bl	8003344 <HAL_UART_Transmit>
  			  FreeUARTBuffer();
 8000f74:	f7ff fb60 	bl	8000638 <FreeUARTBuffer>
  			  counter_15 = 1500;
 8000f78:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000f7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  			  HAL_Delay(1500);
 8000f80:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000f84:	f000 fb1c 	bl	80015c0 <HAL_Delay>
 8000f88:	e411      	b.n	80007ae <main+0x132>
  		  }
  		  else if(counter_15 < 0)
 8000f8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	da03      	bge.n	8000f9a <main+0x91e>
  		  {
  			  counter_15 =0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000f98:	e409      	b.n	80007ae <main+0x132>
  		  }
  		  else
  		  {
  			  counter_15--;
 8000f9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_RXNE))
 8000fa4:	e403      	b.n	80007ae <main+0x132>
 8000fa6:	bf00      	nop
 8000fa8:	48000400 	.word	0x48000400
 8000fac:	08004320 	.word	0x08004320
 8000fb0:	200000c8 	.word	0x200000c8
 8000fb4:	08004328 	.word	0x08004328
 8000fb8:	08004330 	.word	0x08004330
 8000fbc:	08004338 	.word	0x08004338

08000fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b094      	sub	sp, #80	@ 0x50
 8000fc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc6:	f107 0318 	add.w	r3, r7, #24
 8000fca:	2238      	movs	r2, #56	@ 0x38
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f003 f942 	bl	8004258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fe6:	f000 fe07 	bl	8001bf8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fea:	2302      	movs	r3, #2
 8000fec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ff4:	2340      	movs	r3, #64	@ 0x40
 8000ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001000:	2301      	movs	r3, #1
 8001002:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001004:	230a      	movs	r3, #10
 8001006:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001008:	2302      	movs	r3, #2
 800100a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800100c:	2302      	movs	r3, #2
 800100e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001010:	2302      	movs	r3, #2
 8001012:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001014:	f107 0318 	add.w	r3, r7, #24
 8001018:	4618      	mov	r0, r3
 800101a:	f000 fea1 	bl	8001d60 <HAL_RCC_OscConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001024:	f000 f92c 	bl	8001280 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001028:	230f      	movs	r3, #15
 800102a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102c:	2303      	movs	r3, #3
 800102e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	2102      	movs	r1, #2
 8001040:	4618      	mov	r0, r3
 8001042:	f001 f99f 	bl	8002384 <HAL_RCC_ClockConfig>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800104c:	f000 f918 	bl	8001280 <Error_Handler>
  }
}
 8001050:	bf00      	nop
 8001052:	3750      	adds	r7, #80	@ 0x50
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800105c:	4b1b      	ldr	r3, [pc, #108]	@ (80010cc <MX_SPI1_Init+0x74>)
 800105e:	4a1c      	ldr	r2, [pc, #112]	@ (80010d0 <MX_SPI1_Init+0x78>)
 8001060:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001062:	4b1a      	ldr	r3, [pc, #104]	@ (80010cc <MX_SPI1_Init+0x74>)
 8001064:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001068:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800106a:	4b18      	ldr	r3, [pc, #96]	@ (80010cc <MX_SPI1_Init+0x74>)
 800106c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001070:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001072:	4b16      	ldr	r3, [pc, #88]	@ (80010cc <MX_SPI1_Init+0x74>)
 8001074:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001078:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800107a:	4b14      	ldr	r3, [pc, #80]	@ (80010cc <MX_SPI1_Init+0x74>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001080:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <MX_SPI1_Init+0x74>)
 8001082:	2200      	movs	r2, #0
 8001084:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001086:	4b11      	ldr	r3, [pc, #68]	@ (80010cc <MX_SPI1_Init+0x74>)
 8001088:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800108c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800108e:	4b0f      	ldr	r3, [pc, #60]	@ (80010cc <MX_SPI1_Init+0x74>)
 8001090:	2220      	movs	r2, #32
 8001092:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001094:	4b0d      	ldr	r3, [pc, #52]	@ (80010cc <MX_SPI1_Init+0x74>)
 8001096:	2200      	movs	r2, #0
 8001098:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800109a:	4b0c      	ldr	r3, [pc, #48]	@ (80010cc <MX_SPI1_Init+0x74>)
 800109c:	2200      	movs	r2, #0
 800109e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010a0:	4b0a      	ldr	r3, [pc, #40]	@ (80010cc <MX_SPI1_Init+0x74>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80010a6:	4b09      	ldr	r3, [pc, #36]	@ (80010cc <MX_SPI1_Init+0x74>)
 80010a8:	2207      	movs	r2, #7
 80010aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010ac:	4b07      	ldr	r3, [pc, #28]	@ (80010cc <MX_SPI1_Init+0x74>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010b2:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <MX_SPI1_Init+0x74>)
 80010b4:	2208      	movs	r2, #8
 80010b6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010b8:	4804      	ldr	r0, [pc, #16]	@ (80010cc <MX_SPI1_Init+0x74>)
 80010ba:	f001 fd6f 	bl	8002b9c <HAL_SPI_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80010c4:	f000 f8dc 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000064 	.word	0x20000064
 80010d0:	40013000 	.word	0x40013000

080010d4 <MX_USART2_UART_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80010d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001184 <MX_USART2_UART_Init+0xb0>)
 80010da:	4a2b      	ldr	r2, [pc, #172]	@ (8001188 <MX_USART2_UART_Init+0xb4>)
 80010dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80010de:	4b29      	ldr	r3, [pc, #164]	@ (8001184 <MX_USART2_UART_Init+0xb0>)
 80010e0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80010e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010e6:	4b27      	ldr	r3, [pc, #156]	@ (8001184 <MX_USART2_UART_Init+0xb0>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010ec:	4b25      	ldr	r3, [pc, #148]	@ (8001184 <MX_USART2_UART_Init+0xb0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010f2:	4b24      	ldr	r3, [pc, #144]	@ (8001184 <MX_USART2_UART_Init+0xb0>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010f8:	4b22      	ldr	r3, [pc, #136]	@ (8001184 <MX_USART2_UART_Init+0xb0>)
 80010fa:	220c      	movs	r2, #12
 80010fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fe:	4b21      	ldr	r3, [pc, #132]	@ (8001184 <MX_USART2_UART_Init+0xb0>)
 8001100:	2200      	movs	r2, #0
 8001102:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001104:	4b1f      	ldr	r3, [pc, #124]	@ (8001184 <MX_USART2_UART_Init+0xb0>)
 8001106:	2200      	movs	r2, #0
 8001108:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800110a:	4b1e      	ldr	r3, [pc, #120]	@ (8001184 <MX_USART2_UART_Init+0xb0>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001110:	4b1c      	ldr	r3, [pc, #112]	@ (8001184 <MX_USART2_UART_Init+0xb0>)
 8001112:	2200      	movs	r2, #0
 8001114:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001116:	4b1b      	ldr	r3, [pc, #108]	@ (8001184 <MX_USART2_UART_Init+0xb0>)
 8001118:	2200      	movs	r2, #0
 800111a:	629a      	str	r2, [r3, #40]	@ 0x28

  // Assign Tx and Rx buffer pointers
  huart2.pTxBuffPtr = TxBuffer;
 800111c:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <MX_USART2_UART_Init+0xb0>)
 800111e:	4a1b      	ldr	r2, [pc, #108]	@ (800118c <MX_USART2_UART_Init+0xb8>)
 8001120:	651a      	str	r2, [r3, #80]	@ 0x50
  huart2.TxXferSize = TX_BUFFER_SIZE;
 8001122:	4b18      	ldr	r3, [pc, #96]	@ (8001184 <MX_USART2_UART_Init+0xb0>)
 8001124:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001128:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  huart2.pRxBuffPtr = RxBuffer;
 800112c:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <MX_USART2_UART_Init+0xb0>)
 800112e:	4a18      	ldr	r2, [pc, #96]	@ (8001190 <MX_USART2_UART_Init+0xbc>)
 8001130:	659a      	str	r2, [r3, #88]	@ 0x58
  huart2.RxXferSize = RX_BUFFER_SIZE;
 8001132:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <MX_USART2_UART_Init+0xb0>)
 8001134:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001138:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  if (HAL_UART_Init(&huart2) != HAL_OK)
 800113c:	4811      	ldr	r0, [pc, #68]	@ (8001184 <MX_USART2_UART_Init+0xb0>)
 800113e:	f002 f8b1 	bl	80032a4 <HAL_UART_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_USART2_UART_Init+0x78>
  {
    Error_Handler();
 8001148:	f000 f89a 	bl	8001280 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800114c:	2100      	movs	r1, #0
 800114e:	480d      	ldr	r0, [pc, #52]	@ (8001184 <MX_USART2_UART_Init+0xb0>)
 8001150:	f002 ffb8 	bl	80040c4 <HAL_UARTEx_SetTxFifoThreshold>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 800115a:	f000 f891 	bl	8001280 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800115e:	2100      	movs	r1, #0
 8001160:	4808      	ldr	r0, [pc, #32]	@ (8001184 <MX_USART2_UART_Init+0xb0>)
 8001162:	f002 ffed 	bl	8004140 <HAL_UARTEx_SetRxFifoThreshold>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_USART2_UART_Init+0x9c>
  {
    Error_Handler();
 800116c:	f000 f888 	bl	8001280 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001170:	4804      	ldr	r0, [pc, #16]	@ (8001184 <MX_USART2_UART_Init+0xb0>)
 8001172:	f002 ff6e 	bl	8004052 <HAL_UARTEx_DisableFifoMode>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_USART2_UART_Init+0xac>
  {
    Error_Handler();
 800117c:	f000 f880 	bl	8001280 <Error_Handler>
  }
}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200000c8 	.word	0x200000c8
 8001188:	40004400 	.word	0x40004400
 800118c:	2000025c 	.word	0x2000025c
 8001190:	2000015c 	.word	0x2000015c

08001194 <MX_GPIO_Init>:
static void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	4b32      	ldr	r3, [pc, #200]	@ (8001274 <MX_GPIO_Init+0xe0>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ae:	4a31      	ldr	r2, [pc, #196]	@ (8001274 <MX_GPIO_Init+0xe0>)
 80011b0:	f043 0304 	orr.w	r3, r3, #4
 80011b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001274 <MX_GPIO_Init+0xe0>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ba:	f003 0304 	and.w	r3, r3, #4
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001274 <MX_GPIO_Init+0xe0>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	4a2b      	ldr	r2, [pc, #172]	@ (8001274 <MX_GPIO_Init+0xe0>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ce:	4b29      	ldr	r3, [pc, #164]	@ (8001274 <MX_GPIO_Init+0xe0>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011da:	4b26      	ldr	r3, [pc, #152]	@ (8001274 <MX_GPIO_Init+0xe0>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011de:	4a25      	ldr	r2, [pc, #148]	@ (8001274 <MX_GPIO_Init+0xe0>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e6:	4b23      	ldr	r3, [pc, #140]	@ (8001274 <MX_GPIO_Init+0xe0>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	603b      	str	r3, [r7, #0]
 80011f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2110      	movs	r1, #16
 80011f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011fa:	f000 fce5 	bl	8001bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SENSOR1_Pin */
  GPIO_InitStruct.Pin = SENSOR1_Pin;
 80011fe:	2302      	movs	r3, #2
 8001200:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001206:	2302      	movs	r3, #2
 8001208:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SENSOR1_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 030c 	add.w	r3, r7, #12
 800120e:	4619      	mov	r1, r3
 8001210:	4819      	ldr	r0, [pc, #100]	@ (8001278 <MX_GPIO_Init+0xe4>)
 8001212:	f000 fb3f 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001216:	2310      	movs	r3, #16
 8001218:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121a:	2301      	movs	r3, #1
 800121c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	f107 030c 	add.w	r3, r7, #12
 800122a:	4619      	mov	r1, r3
 800122c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001230:	f000 fb30 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR5_Pin SENSOR6_Pin SENSOR7_Pin SENSOR13_Pin
                           SENSOR14_Pin SENSOR15_Pin SENSOR8_Pin SENSOR9_Pin
                           SENSOR10_Pin SENSOR11_Pin SENSOR12_Pin */
  GPIO_InitStruct.Pin = SENSOR5_Pin|SENSOR6_Pin|SENSOR7_Pin|SENSOR13_Pin
 8001234:	f641 63f7 	movw	r3, #7927	@ 0x1ef7
 8001238:	60fb      	str	r3, [r7, #12]
                          |SENSOR14_Pin|SENSOR15_Pin|SENSOR8_Pin|SENSOR9_Pin
                          |SENSOR10_Pin|SENSOR11_Pin|SENSOR12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800123e:	2302      	movs	r3, #2
 8001240:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001242:	f107 030c 	add.w	r3, r7, #12
 8001246:	4619      	mov	r1, r3
 8001248:	480c      	ldr	r0, [pc, #48]	@ (800127c <MX_GPIO_Init+0xe8>)
 800124a:	f000 fb23 	bl	8001894 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR2_Pin SENSOR3_Pin SENSOR4_Pin */
  GPIO_InitStruct.Pin = SENSOR2_Pin|SENSOR3_Pin|SENSOR4_Pin;
 800124e:	f44f 4318 	mov.w	r3, #38912	@ 0x9800
 8001252:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001258:	2302      	movs	r3, #2
 800125a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	4619      	mov	r1, r3
 8001262:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001266:	f000 fb15 	bl	8001894 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800126a:	bf00      	nop
 800126c:	3720      	adds	r7, #32
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000
 8001278:	48000800 	.word	0x48000800
 800127c:	48000400 	.word	0x48000400

08001280 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001284:	b672      	cpsid	i
}
 8001286:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <Error_Handler+0x8>

0800128c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001292:	4b0f      	ldr	r3, [pc, #60]	@ (80012d0 <HAL_MspInit+0x44>)
 8001294:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001296:	4a0e      	ldr	r2, [pc, #56]	@ (80012d0 <HAL_MspInit+0x44>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6613      	str	r3, [r2, #96]	@ 0x60
 800129e:	4b0c      	ldr	r3, [pc, #48]	@ (80012d0 <HAL_MspInit+0x44>)
 80012a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012aa:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <HAL_MspInit+0x44>)
 80012ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ae:	4a08      	ldr	r2, [pc, #32]	@ (80012d0 <HAL_MspInit+0x44>)
 80012b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80012b6:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <HAL_MspInit+0x44>)
 80012b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012c2:	f000 fd3d 	bl	8001d40 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40021000 	.word	0x40021000

080012d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	@ 0x28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a17      	ldr	r2, [pc, #92]	@ (8001350 <HAL_SPI_MspInit+0x7c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d128      	bne.n	8001348 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012f6:	4b17      	ldr	r3, [pc, #92]	@ (8001354 <HAL_SPI_MspInit+0x80>)
 80012f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012fa:	4a16      	ldr	r2, [pc, #88]	@ (8001354 <HAL_SPI_MspInit+0x80>)
 80012fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001300:	6613      	str	r3, [r2, #96]	@ 0x60
 8001302:	4b14      	ldr	r3, [pc, #80]	@ (8001354 <HAL_SPI_MspInit+0x80>)
 8001304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001306:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <HAL_SPI_MspInit+0x80>)
 8001310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001312:	4a10      	ldr	r2, [pc, #64]	@ (8001354 <HAL_SPI_MspInit+0x80>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800131a:	4b0e      	ldr	r3, [pc, #56]	@ (8001354 <HAL_SPI_MspInit+0x80>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001326:	23a0      	movs	r3, #160	@ 0xa0
 8001328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001332:	2300      	movs	r3, #0
 8001334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001336:	2305      	movs	r3, #5
 8001338:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4619      	mov	r1, r3
 8001340:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001344:	f000 faa6 	bl	8001894 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001348:	bf00      	nop
 800134a:	3728      	adds	r7, #40	@ 0x28
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40013000 	.word	0x40013000
 8001354:	40021000 	.word	0x40021000

08001358 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b09a      	sub	sp, #104	@ 0x68
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001370:	f107 0310 	add.w	r3, r7, #16
 8001374:	2244      	movs	r2, #68	@ 0x44
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f002 ff6d 	bl	8004258 <memset>
  if(huart->Instance==USART2)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a1f      	ldr	r2, [pc, #124]	@ (8001400 <HAL_UART_MspInit+0xa8>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d136      	bne.n	80013f6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001388:	2302      	movs	r3, #2
 800138a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800138c:	2300      	movs	r3, #0
 800138e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001390:	f107 0310 	add.w	r3, r7, #16
 8001394:	4618      	mov	r0, r3
 8001396:	f001 fa11 	bl	80027bc <HAL_RCCEx_PeriphCLKConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013a0:	f7ff ff6e 	bl	8001280 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013a4:	4b17      	ldr	r3, [pc, #92]	@ (8001404 <HAL_UART_MspInit+0xac>)
 80013a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a8:	4a16      	ldr	r2, [pc, #88]	@ (8001404 <HAL_UART_MspInit+0xac>)
 80013aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80013b0:	4b14      	ldr	r3, [pc, #80]	@ (8001404 <HAL_UART_MspInit+0xac>)
 80013b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013bc:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <HAL_UART_MspInit+0xac>)
 80013be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c0:	4a10      	ldr	r2, [pc, #64]	@ (8001404 <HAL_UART_MspInit+0xac>)
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001404 <HAL_UART_MspInit+0xac>)
 80013ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013d4:	230c      	movs	r3, #12
 80013d6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013e4:	2307      	movs	r3, #7
 80013e6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013ec:	4619      	mov	r1, r3
 80013ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013f2:	f000 fa4f 	bl	8001894 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013f6:	bf00      	nop
 80013f8:	3768      	adds	r7, #104	@ 0x68
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40004400 	.word	0x40004400
 8001404:	40021000 	.word	0x40021000

08001408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <NMI_Handler+0x4>

08001410 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <HardFault_Handler+0x4>

08001418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <MemManage_Handler+0x4>

08001420 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <BusFault_Handler+0x4>

08001428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <UsageFault_Handler+0x4>

08001430 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800145e:	f000 f891 	bl	8001584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800146c:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <SystemInit+0x20>)
 800146e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001472:	4a05      	ldr	r2, [pc, #20]	@ (8001488 <SystemInit+0x20>)
 8001474:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001478:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800148c:	480d      	ldr	r0, [pc, #52]	@ (80014c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800148e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001490:	f7ff ffea 	bl	8001468 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001494:	480c      	ldr	r0, [pc, #48]	@ (80014c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001496:	490d      	ldr	r1, [pc, #52]	@ (80014cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001498:	4a0d      	ldr	r2, [pc, #52]	@ (80014d0 <LoopForever+0xe>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800149c:	e002      	b.n	80014a4 <LoopCopyDataInit>

0800149e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014a2:	3304      	adds	r3, #4

080014a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a8:	d3f9      	bcc.n	800149e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014aa:	4a0a      	ldr	r2, [pc, #40]	@ (80014d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014ac:	4c0a      	ldr	r4, [pc, #40]	@ (80014d8 <LoopForever+0x16>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b0:	e001      	b.n	80014b6 <LoopFillZerobss>

080014b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b4:	3204      	adds	r2, #4

080014b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b8:	d3fb      	bcc.n	80014b2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80014ba:	f002 fed5 	bl	8004268 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014be:	f7ff f8dd 	bl	800067c <main>

080014c2 <LoopForever>:

LoopForever:
    b LoopForever
 80014c2:	e7fe      	b.n	80014c2 <LoopForever>
  ldr   r0, =_estack
 80014c4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80014c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014d0:	08004390 	.word	0x08004390
  ldr r2, =_sbss
 80014d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014d8:	20000360 	.word	0x20000360

080014dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014dc:	e7fe      	b.n	80014dc <ADC1_2_IRQHandler>

080014de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e8:	2003      	movs	r0, #3
 80014ea:	f000 f93d 	bl	8001768 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ee:	200f      	movs	r0, #15
 80014f0:	f000 f80e 	bl	8001510 <HAL_InitTick>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d002      	beq.n	8001500 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	71fb      	strb	r3, [r7, #7]
 80014fe:	e001      	b.n	8001504 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001500:	f7ff fec4 	bl	800128c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001504:	79fb      	ldrb	r3, [r7, #7]

}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001518:	2300      	movs	r3, #0
 800151a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800151c:	4b16      	ldr	r3, [pc, #88]	@ (8001578 <HAL_InitTick+0x68>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d022      	beq.n	800156a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001524:	4b15      	ldr	r3, [pc, #84]	@ (800157c <HAL_InitTick+0x6c>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b13      	ldr	r3, [pc, #76]	@ (8001578 <HAL_InitTick+0x68>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001530:	fbb1 f3f3 	udiv	r3, r1, r3
 8001534:	fbb2 f3f3 	udiv	r3, r2, r3
 8001538:	4618      	mov	r0, r3
 800153a:	f000 f93a 	bl	80017b2 <HAL_SYSTICK_Config>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d10f      	bne.n	8001564 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b0f      	cmp	r3, #15
 8001548:	d809      	bhi.n	800155e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800154a:	2200      	movs	r2, #0
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	f04f 30ff 	mov.w	r0, #4294967295
 8001552:	f000 f914 	bl	800177e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001556:	4a0a      	ldr	r2, [pc, #40]	@ (8001580 <HAL_InitTick+0x70>)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	e007      	b.n	800156e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	73fb      	strb	r3, [r7, #15]
 8001562:	e004      	b.n	800156e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	73fb      	strb	r3, [r7, #15]
 8001568:	e001      	b.n	800156e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800156e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000008 	.word	0x20000008
 800157c:	20000000 	.word	0x20000000
 8001580:	20000004 	.word	0x20000004

08001584 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001588:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <HAL_IncTick+0x1c>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b05      	ldr	r3, [pc, #20]	@ (80015a4 <HAL_IncTick+0x20>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4413      	add	r3, r2
 8001592:	4a03      	ldr	r2, [pc, #12]	@ (80015a0 <HAL_IncTick+0x1c>)
 8001594:	6013      	str	r3, [r2, #0]
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	2000035c 	.word	0x2000035c
 80015a4:	20000008 	.word	0x20000008

080015a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return uwTick;
 80015ac:	4b03      	ldr	r3, [pc, #12]	@ (80015bc <HAL_GetTick+0x14>)
 80015ae:	681b      	ldr	r3, [r3, #0]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	2000035c 	.word	0x2000035c

080015c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c8:	f7ff ffee 	bl	80015a8 <HAL_GetTick>
 80015cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d8:	d004      	beq.n	80015e4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80015da:	4b09      	ldr	r3, [pc, #36]	@ (8001600 <HAL_Delay+0x40>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	4413      	add	r3, r2
 80015e2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015e4:	bf00      	nop
 80015e6:	f7ff ffdf 	bl	80015a8 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d8f7      	bhi.n	80015e6 <HAL_Delay+0x26>
  {
  }
}
 80015f6:	bf00      	nop
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000008 	.word	0x20000008

08001604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001614:	4b0c      	ldr	r3, [pc, #48]	@ (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001620:	4013      	ands	r3, r2
 8001622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800162c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001630:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001636:	4a04      	ldr	r2, [pc, #16]	@ (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	60d3      	str	r3, [r2, #12]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001650:	4b04      	ldr	r3, [pc, #16]	@ (8001664 <__NVIC_GetPriorityGrouping+0x18>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	0a1b      	lsrs	r3, r3, #8
 8001656:	f003 0307 	and.w	r3, r3, #7
}
 800165a:	4618      	mov	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	2b00      	cmp	r3, #0
 800167a:	db0a      	blt.n	8001692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	490c      	ldr	r1, [pc, #48]	@ (80016b4 <__NVIC_SetPriority+0x4c>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	0112      	lsls	r2, r2, #4
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	440b      	add	r3, r1
 800168c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001690:	e00a      	b.n	80016a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4908      	ldr	r1, [pc, #32]	@ (80016b8 <__NVIC_SetPriority+0x50>)
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	3b04      	subs	r3, #4
 80016a0:	0112      	lsls	r2, r2, #4
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	440b      	add	r3, r1
 80016a6:	761a      	strb	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000e100 	.word	0xe000e100
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b089      	sub	sp, #36	@ 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f1c3 0307 	rsb	r3, r3, #7
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	bf28      	it	cs
 80016da:	2304      	movcs	r3, #4
 80016dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3304      	adds	r3, #4
 80016e2:	2b06      	cmp	r3, #6
 80016e4:	d902      	bls.n	80016ec <NVIC_EncodePriority+0x30>
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3b03      	subs	r3, #3
 80016ea:	e000      	b.n	80016ee <NVIC_EncodePriority+0x32>
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	f04f 32ff 	mov.w	r2, #4294967295
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43da      	mvns	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	401a      	ands	r2, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001704:	f04f 31ff 	mov.w	r1, #4294967295
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
 800170e:	43d9      	mvns	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001714:	4313      	orrs	r3, r2
         );
}
 8001716:	4618      	mov	r0, r3
 8001718:	3724      	adds	r7, #36	@ 0x24
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001734:	d301      	bcc.n	800173a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001736:	2301      	movs	r3, #1
 8001738:	e00f      	b.n	800175a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173a:	4a0a      	ldr	r2, [pc, #40]	@ (8001764 <SysTick_Config+0x40>)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3b01      	subs	r3, #1
 8001740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001742:	210f      	movs	r1, #15
 8001744:	f04f 30ff 	mov.w	r0, #4294967295
 8001748:	f7ff ff8e 	bl	8001668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800174c:	4b05      	ldr	r3, [pc, #20]	@ (8001764 <SysTick_Config+0x40>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001752:	4b04      	ldr	r3, [pc, #16]	@ (8001764 <SysTick_Config+0x40>)
 8001754:	2207      	movs	r2, #7
 8001756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	e000e010 	.word	0xe000e010

08001768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff ff47 	bl	8001604 <__NVIC_SetPriorityGrouping>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b086      	sub	sp, #24
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	607a      	str	r2, [r7, #4]
 800178a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800178c:	f7ff ff5e 	bl	800164c <__NVIC_GetPriorityGrouping>
 8001790:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	6978      	ldr	r0, [r7, #20]
 8001798:	f7ff ff90 	bl	80016bc <NVIC_EncodePriority>
 800179c:	4602      	mov	r2, r0
 800179e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff5f 	bl	8001668 <__NVIC_SetPriority>
}
 80017aa:	bf00      	nop
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff ffb2 	bl	8001724 <SysTick_Config>
 80017c0:	4603      	mov	r3, r0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b085      	sub	sp, #20
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017d2:	2300      	movs	r3, #0
 80017d4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d005      	beq.n	80017ee <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2204      	movs	r2, #4
 80017e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	73fb      	strb	r3, [r7, #15]
 80017ec:	e037      	b.n	800185e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 020e 	bic.w	r2, r2, #14
 80017fc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001808:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800180c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f022 0201 	bic.w	r2, r2, #1
 800181c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001822:	f003 021f 	and.w	r2, r3, #31
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182a:	2101      	movs	r1, #1
 800182c:	fa01 f202 	lsl.w	r2, r1, r2
 8001830:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800183a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001840:	2b00      	cmp	r3, #0
 8001842:	d00c      	beq.n	800185e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800184e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001852:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800185c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800186e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001894:	b480      	push	{r7}
 8001896:	b087      	sub	sp, #28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80018a2:	e15a      	b.n	8001b5a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	2101      	movs	r1, #1
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	fa01 f303 	lsl.w	r3, r1, r3
 80018b0:	4013      	ands	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 814c 	beq.w	8001b54 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d005      	beq.n	80018d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d130      	bne.n	8001936 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	2203      	movs	r2, #3
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800190a:	2201      	movs	r2, #1
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43db      	mvns	r3, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4013      	ands	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	091b      	lsrs	r3, r3, #4
 8001920:	f003 0201 	and.w	r2, r3, #1
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	2b03      	cmp	r3, #3
 8001940:	d017      	beq.n	8001972 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	2203      	movs	r2, #3
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4013      	ands	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d123      	bne.n	80019c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	08da      	lsrs	r2, r3, #3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3208      	adds	r2, #8
 8001986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800198a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	220f      	movs	r2, #15
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	4013      	ands	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	691a      	ldr	r2, [r3, #16]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	08da      	lsrs	r2, r3, #3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3208      	adds	r2, #8
 80019c0:	6939      	ldr	r1, [r7, #16]
 80019c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	2203      	movs	r2, #3
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 0203 	and.w	r2, r3, #3
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 80a6 	beq.w	8001b54 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a08:	4b5b      	ldr	r3, [pc, #364]	@ (8001b78 <HAL_GPIO_Init+0x2e4>)
 8001a0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a0c:	4a5a      	ldr	r2, [pc, #360]	@ (8001b78 <HAL_GPIO_Init+0x2e4>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a14:	4b58      	ldr	r3, [pc, #352]	@ (8001b78 <HAL_GPIO_Init+0x2e4>)
 8001a16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a20:	4a56      	ldr	r2, [pc, #344]	@ (8001b7c <HAL_GPIO_Init+0x2e8>)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	3302      	adds	r3, #2
 8001a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	220f      	movs	r2, #15
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4013      	ands	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a4a:	d01f      	beq.n	8001a8c <HAL_GPIO_Init+0x1f8>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a4c      	ldr	r2, [pc, #304]	@ (8001b80 <HAL_GPIO_Init+0x2ec>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d019      	beq.n	8001a88 <HAL_GPIO_Init+0x1f4>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a4b      	ldr	r2, [pc, #300]	@ (8001b84 <HAL_GPIO_Init+0x2f0>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d013      	beq.n	8001a84 <HAL_GPIO_Init+0x1f0>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a4a      	ldr	r2, [pc, #296]	@ (8001b88 <HAL_GPIO_Init+0x2f4>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d00d      	beq.n	8001a80 <HAL_GPIO_Init+0x1ec>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a49      	ldr	r2, [pc, #292]	@ (8001b8c <HAL_GPIO_Init+0x2f8>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d007      	beq.n	8001a7c <HAL_GPIO_Init+0x1e8>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a48      	ldr	r2, [pc, #288]	@ (8001b90 <HAL_GPIO_Init+0x2fc>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d101      	bne.n	8001a78 <HAL_GPIO_Init+0x1e4>
 8001a74:	2305      	movs	r3, #5
 8001a76:	e00a      	b.n	8001a8e <HAL_GPIO_Init+0x1fa>
 8001a78:	2306      	movs	r3, #6
 8001a7a:	e008      	b.n	8001a8e <HAL_GPIO_Init+0x1fa>
 8001a7c:	2304      	movs	r3, #4
 8001a7e:	e006      	b.n	8001a8e <HAL_GPIO_Init+0x1fa>
 8001a80:	2303      	movs	r3, #3
 8001a82:	e004      	b.n	8001a8e <HAL_GPIO_Init+0x1fa>
 8001a84:	2302      	movs	r3, #2
 8001a86:	e002      	b.n	8001a8e <HAL_GPIO_Init+0x1fa>
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e000      	b.n	8001a8e <HAL_GPIO_Init+0x1fa>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	f002 0203 	and.w	r2, r2, #3
 8001a94:	0092      	lsls	r2, r2, #2
 8001a96:	4093      	lsls	r3, r2
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a9e:	4937      	ldr	r1, [pc, #220]	@ (8001b7c <HAL_GPIO_Init+0x2e8>)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	089b      	lsrs	r3, r3, #2
 8001aa4:	3302      	adds	r3, #2
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001aac:	4b39      	ldr	r3, [pc, #228]	@ (8001b94 <HAL_GPIO_Init+0x300>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ad0:	4a30      	ldr	r2, [pc, #192]	@ (8001b94 <HAL_GPIO_Init+0x300>)
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ad6:	4b2f      	ldr	r3, [pc, #188]	@ (8001b94 <HAL_GPIO_Init+0x300>)
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001afa:	4a26      	ldr	r2, [pc, #152]	@ (8001b94 <HAL_GPIO_Init+0x300>)
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001b00:	4b24      	ldr	r3, [pc, #144]	@ (8001b94 <HAL_GPIO_Init+0x300>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b24:	4a1b      	ldr	r2, [pc, #108]	@ (8001b94 <HAL_GPIO_Init+0x300>)
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001b94 <HAL_GPIO_Init+0x300>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	43db      	mvns	r3, r3
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	4013      	ands	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b4e:	4a11      	ldr	r2, [pc, #68]	@ (8001b94 <HAL_GPIO_Init+0x300>)
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	3301      	adds	r3, #1
 8001b58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	fa22 f303 	lsr.w	r3, r2, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f47f ae9d 	bne.w	80018a4 <HAL_GPIO_Init+0x10>
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	bf00      	nop
 8001b6e:	371c      	adds	r7, #28
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40010000 	.word	0x40010000
 8001b80:	48000400 	.word	0x48000400
 8001b84:	48000800 	.word	0x48000800
 8001b88:	48000c00 	.word	0x48000c00
 8001b8c:	48001000 	.word	0x48001000
 8001b90:	48001400 	.word	0x48001400
 8001b94:	40010400 	.word	0x40010400

08001b98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	887b      	ldrh	r3, [r7, #2]
 8001baa:	4013      	ands	r3, r2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d002      	beq.n	8001bb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	73fb      	strb	r3, [r7, #15]
 8001bb4:	e001      	b.n	8001bba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	807b      	strh	r3, [r7, #2]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bd8:	787b      	ldrb	r3, [r7, #1]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bde:	887a      	ldrh	r2, [r7, #2]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001be4:	e002      	b.n	8001bec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001be6:	887a      	ldrh	r2, [r7, #2]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d141      	bne.n	8001c8a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c06:	4b4b      	ldr	r3, [pc, #300]	@ (8001d34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c12:	d131      	bne.n	8001c78 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c14:	4b47      	ldr	r3, [pc, #284]	@ (8001d34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c1a:	4a46      	ldr	r2, [pc, #280]	@ (8001d34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c24:	4b43      	ldr	r3, [pc, #268]	@ (8001d34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c2c:	4a41      	ldr	r2, [pc, #260]	@ (8001d34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c34:	4b40      	ldr	r3, [pc, #256]	@ (8001d38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2232      	movs	r2, #50	@ 0x32
 8001c3a:	fb02 f303 	mul.w	r3, r2, r3
 8001c3e:	4a3f      	ldr	r2, [pc, #252]	@ (8001d3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c40:	fba2 2303 	umull	r2, r3, r2, r3
 8001c44:	0c9b      	lsrs	r3, r3, #18
 8001c46:	3301      	adds	r3, #1
 8001c48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c4a:	e002      	b.n	8001c52 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c52:	4b38      	ldr	r3, [pc, #224]	@ (8001d34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c5e:	d102      	bne.n	8001c66 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f2      	bne.n	8001c4c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c66:	4b33      	ldr	r3, [pc, #204]	@ (8001d34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c72:	d158      	bne.n	8001d26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e057      	b.n	8001d28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c78:	4b2e      	ldr	r3, [pc, #184]	@ (8001d34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c7e:	4a2d      	ldr	r2, [pc, #180]	@ (8001d34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c84:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c88:	e04d      	b.n	8001d26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c90:	d141      	bne.n	8001d16 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c92:	4b28      	ldr	r3, [pc, #160]	@ (8001d34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c9e:	d131      	bne.n	8001d04 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ca0:	4b24      	ldr	r3, [pc, #144]	@ (8001d34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ca6:	4a23      	ldr	r2, [pc, #140]	@ (8001d34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cb0:	4b20      	ldr	r3, [pc, #128]	@ (8001d34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001cb8:	4a1e      	ldr	r2, [pc, #120]	@ (8001d34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cbe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d38 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2232      	movs	r2, #50	@ 0x32
 8001cc6:	fb02 f303 	mul.w	r3, r2, r3
 8001cca:	4a1c      	ldr	r2, [pc, #112]	@ (8001d3c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd0:	0c9b      	lsrs	r3, r3, #18
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cd6:	e002      	b.n	8001cde <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cde:	4b15      	ldr	r3, [pc, #84]	@ (8001d34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ce6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cea:	d102      	bne.n	8001cf2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f2      	bne.n	8001cd8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cf2:	4b10      	ldr	r3, [pc, #64]	@ (8001d34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cfe:	d112      	bne.n	8001d26 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e011      	b.n	8001d28 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d04:	4b0b      	ldr	r3, [pc, #44]	@ (8001d34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d10:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001d14:	e007      	b.n	8001d26 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d16:	4b07      	ldr	r3, [pc, #28]	@ (8001d34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d1e:	4a05      	ldr	r2, [pc, #20]	@ (8001d34 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d20:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d24:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	40007000 	.word	0x40007000
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	431bde83 	.word	0x431bde83

08001d40 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001d44:	4b05      	ldr	r3, [pc, #20]	@ (8001d5c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	4a04      	ldr	r2, [pc, #16]	@ (8001d5c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d4e:	6093      	str	r3, [r2, #8]
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40007000 	.word	0x40007000

08001d60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b088      	sub	sp, #32
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e2fe      	b.n	8002370 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d075      	beq.n	8001e6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d7e:	4b97      	ldr	r3, [pc, #604]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 030c 	and.w	r3, r3, #12
 8001d86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d88:	4b94      	ldr	r3, [pc, #592]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	2b0c      	cmp	r3, #12
 8001d96:	d102      	bne.n	8001d9e <HAL_RCC_OscConfig+0x3e>
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d002      	beq.n	8001da4 <HAL_RCC_OscConfig+0x44>
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d10b      	bne.n	8001dbc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da4:	4b8d      	ldr	r3, [pc, #564]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d05b      	beq.n	8001e68 <HAL_RCC_OscConfig+0x108>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d157      	bne.n	8001e68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e2d9      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dc4:	d106      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x74>
 8001dc6:	4b85      	ldr	r3, [pc, #532]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a84      	ldr	r2, [pc, #528]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	e01d      	b.n	8001e10 <HAL_RCC_OscConfig+0xb0>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ddc:	d10c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x98>
 8001dde:	4b7f      	ldr	r3, [pc, #508]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a7e      	ldr	r2, [pc, #504]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001de4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	4b7c      	ldr	r3, [pc, #496]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a7b      	ldr	r2, [pc, #492]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001df0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	e00b      	b.n	8001e10 <HAL_RCC_OscConfig+0xb0>
 8001df8:	4b78      	ldr	r3, [pc, #480]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a77      	ldr	r2, [pc, #476]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001dfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	4b75      	ldr	r3, [pc, #468]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a74      	ldr	r2, [pc, #464]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001e0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d013      	beq.n	8001e40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e18:	f7ff fbc6 	bl	80015a8 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e20:	f7ff fbc2 	bl	80015a8 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b64      	cmp	r3, #100	@ 0x64
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e29e      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e32:	4b6a      	ldr	r3, [pc, #424]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0f0      	beq.n	8001e20 <HAL_RCC_OscConfig+0xc0>
 8001e3e:	e014      	b.n	8001e6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e40:	f7ff fbb2 	bl	80015a8 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e48:	f7ff fbae 	bl	80015a8 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b64      	cmp	r3, #100	@ 0x64
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e28a      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e5a:	4b60      	ldr	r3, [pc, #384]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0xe8>
 8001e66:	e000      	b.n	8001e6a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d075      	beq.n	8001f62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e76:	4b59      	ldr	r3, [pc, #356]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
 8001e7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e80:	4b56      	ldr	r3, [pc, #344]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	2b0c      	cmp	r3, #12
 8001e8e:	d102      	bne.n	8001e96 <HAL_RCC_OscConfig+0x136>
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d002      	beq.n	8001e9c <HAL_RCC_OscConfig+0x13c>
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	d11f      	bne.n	8001edc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e9c:	4b4f      	ldr	r3, [pc, #316]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d005      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x154>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e25d      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb4:	4b49      	ldr	r3, [pc, #292]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	061b      	lsls	r3, r3, #24
 8001ec2:	4946      	ldr	r1, [pc, #280]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ec8:	4b45      	ldr	r3, [pc, #276]	@ (8001fe0 <HAL_RCC_OscConfig+0x280>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fb1f 	bl	8001510 <HAL_InitTick>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d043      	beq.n	8001f60 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e249      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d023      	beq.n	8001f2c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ee4:	4b3d      	ldr	r3, [pc, #244]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a3c      	ldr	r2, [pc, #240]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001eea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef0:	f7ff fb5a 	bl	80015a8 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef8:	f7ff fb56 	bl	80015a8 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e232      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f0a:	4b34      	ldr	r3, [pc, #208]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f16:	4b31      	ldr	r3, [pc, #196]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	061b      	lsls	r3, r3, #24
 8001f24:	492d      	ldr	r1, [pc, #180]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	604b      	str	r3, [r1, #4]
 8001f2a:	e01a      	b.n	8001f62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f2c:	4b2b      	ldr	r3, [pc, #172]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a2a      	ldr	r2, [pc, #168]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001f32:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f38:	f7ff fb36 	bl	80015a8 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f40:	f7ff fb32 	bl	80015a8 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e20e      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f52:	4b22      	ldr	r3, [pc, #136]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f0      	bne.n	8001f40 <HAL_RCC_OscConfig+0x1e0>
 8001f5e:	e000      	b.n	8001f62 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d041      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d01c      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f76:	4b19      	ldr	r3, [pc, #100]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f7c:	4a17      	ldr	r2, [pc, #92]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001f7e:	f043 0301 	orr.w	r3, r3, #1
 8001f82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f86:	f7ff fb0f 	bl	80015a8 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f8e:	f7ff fb0b 	bl	80015a8 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e1e7      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0ef      	beq.n	8001f8e <HAL_RCC_OscConfig+0x22e>
 8001fae:	e020      	b.n	8001ff2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fb6:	4a09      	ldr	r2, [pc, #36]	@ (8001fdc <HAL_RCC_OscConfig+0x27c>)
 8001fb8:	f023 0301 	bic.w	r3, r3, #1
 8001fbc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc0:	f7ff faf2 	bl	80015a8 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fc6:	e00d      	b.n	8001fe4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc8:	f7ff faee 	bl	80015a8 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d906      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e1ca      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
 8001fda:	bf00      	nop
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fe4:	4b8c      	ldr	r3, [pc, #560]	@ (8002218 <HAL_RCC_OscConfig+0x4b8>)
 8001fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1ea      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 80a6 	beq.w	800214c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002000:	2300      	movs	r3, #0
 8002002:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002004:	4b84      	ldr	r3, [pc, #528]	@ (8002218 <HAL_RCC_OscConfig+0x4b8>)
 8002006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002008:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_RCC_OscConfig+0x2b4>
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <HAL_RCC_OscConfig+0x2b6>
 8002014:	2300      	movs	r3, #0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00d      	beq.n	8002036 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800201a:	4b7f      	ldr	r3, [pc, #508]	@ (8002218 <HAL_RCC_OscConfig+0x4b8>)
 800201c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201e:	4a7e      	ldr	r2, [pc, #504]	@ (8002218 <HAL_RCC_OscConfig+0x4b8>)
 8002020:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002024:	6593      	str	r3, [r2, #88]	@ 0x58
 8002026:	4b7c      	ldr	r3, [pc, #496]	@ (8002218 <HAL_RCC_OscConfig+0x4b8>)
 8002028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800202a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002032:	2301      	movs	r3, #1
 8002034:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002036:	4b79      	ldr	r3, [pc, #484]	@ (800221c <HAL_RCC_OscConfig+0x4bc>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800203e:	2b00      	cmp	r3, #0
 8002040:	d118      	bne.n	8002074 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002042:	4b76      	ldr	r3, [pc, #472]	@ (800221c <HAL_RCC_OscConfig+0x4bc>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a75      	ldr	r2, [pc, #468]	@ (800221c <HAL_RCC_OscConfig+0x4bc>)
 8002048:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800204c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800204e:	f7ff faab 	bl	80015a8 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002056:	f7ff faa7 	bl	80015a8 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e183      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002068:	4b6c      	ldr	r3, [pc, #432]	@ (800221c <HAL_RCC_OscConfig+0x4bc>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0f0      	beq.n	8002056 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d108      	bne.n	800208e <HAL_RCC_OscConfig+0x32e>
 800207c:	4b66      	ldr	r3, [pc, #408]	@ (8002218 <HAL_RCC_OscConfig+0x4b8>)
 800207e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002082:	4a65      	ldr	r2, [pc, #404]	@ (8002218 <HAL_RCC_OscConfig+0x4b8>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800208c:	e024      	b.n	80020d8 <HAL_RCC_OscConfig+0x378>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2b05      	cmp	r3, #5
 8002094:	d110      	bne.n	80020b8 <HAL_RCC_OscConfig+0x358>
 8002096:	4b60      	ldr	r3, [pc, #384]	@ (8002218 <HAL_RCC_OscConfig+0x4b8>)
 8002098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800209c:	4a5e      	ldr	r2, [pc, #376]	@ (8002218 <HAL_RCC_OscConfig+0x4b8>)
 800209e:	f043 0304 	orr.w	r3, r3, #4
 80020a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020a6:	4b5c      	ldr	r3, [pc, #368]	@ (8002218 <HAL_RCC_OscConfig+0x4b8>)
 80020a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ac:	4a5a      	ldr	r2, [pc, #360]	@ (8002218 <HAL_RCC_OscConfig+0x4b8>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020b6:	e00f      	b.n	80020d8 <HAL_RCC_OscConfig+0x378>
 80020b8:	4b57      	ldr	r3, [pc, #348]	@ (8002218 <HAL_RCC_OscConfig+0x4b8>)
 80020ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020be:	4a56      	ldr	r2, [pc, #344]	@ (8002218 <HAL_RCC_OscConfig+0x4b8>)
 80020c0:	f023 0301 	bic.w	r3, r3, #1
 80020c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020c8:	4b53      	ldr	r3, [pc, #332]	@ (8002218 <HAL_RCC_OscConfig+0x4b8>)
 80020ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ce:	4a52      	ldr	r2, [pc, #328]	@ (8002218 <HAL_RCC_OscConfig+0x4b8>)
 80020d0:	f023 0304 	bic.w	r3, r3, #4
 80020d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d016      	beq.n	800210e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e0:	f7ff fa62 	bl	80015a8 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e6:	e00a      	b.n	80020fe <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e8:	f7ff fa5e 	bl	80015a8 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e138      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020fe:	4b46      	ldr	r3, [pc, #280]	@ (8002218 <HAL_RCC_OscConfig+0x4b8>)
 8002100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0ed      	beq.n	80020e8 <HAL_RCC_OscConfig+0x388>
 800210c:	e015      	b.n	800213a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210e:	f7ff fa4b 	bl	80015a8 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002114:	e00a      	b.n	800212c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002116:	f7ff fa47 	bl	80015a8 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002124:	4293      	cmp	r3, r2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e121      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800212c:	4b3a      	ldr	r3, [pc, #232]	@ (8002218 <HAL_RCC_OscConfig+0x4b8>)
 800212e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1ed      	bne.n	8002116 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800213a:	7ffb      	ldrb	r3, [r7, #31]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d105      	bne.n	800214c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002140:	4b35      	ldr	r3, [pc, #212]	@ (8002218 <HAL_RCC_OscConfig+0x4b8>)
 8002142:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002144:	4a34      	ldr	r2, [pc, #208]	@ (8002218 <HAL_RCC_OscConfig+0x4b8>)
 8002146:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800214a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0320 	and.w	r3, r3, #32
 8002154:	2b00      	cmp	r3, #0
 8002156:	d03c      	beq.n	80021d2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d01c      	beq.n	800219a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002160:	4b2d      	ldr	r3, [pc, #180]	@ (8002218 <HAL_RCC_OscConfig+0x4b8>)
 8002162:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002166:	4a2c      	ldr	r2, [pc, #176]	@ (8002218 <HAL_RCC_OscConfig+0x4b8>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002170:	f7ff fa1a 	bl	80015a8 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002178:	f7ff fa16 	bl	80015a8 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e0f2      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800218a:	4b23      	ldr	r3, [pc, #140]	@ (8002218 <HAL_RCC_OscConfig+0x4b8>)
 800218c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0ef      	beq.n	8002178 <HAL_RCC_OscConfig+0x418>
 8002198:	e01b      	b.n	80021d2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800219a:	4b1f      	ldr	r3, [pc, #124]	@ (8002218 <HAL_RCC_OscConfig+0x4b8>)
 800219c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021a0:	4a1d      	ldr	r2, [pc, #116]	@ (8002218 <HAL_RCC_OscConfig+0x4b8>)
 80021a2:	f023 0301 	bic.w	r3, r3, #1
 80021a6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021aa:	f7ff f9fd 	bl	80015a8 <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021b0:	e008      	b.n	80021c4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021b2:	f7ff f9f9 	bl	80015a8 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d901      	bls.n	80021c4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80021c0:	2303      	movs	r3, #3
 80021c2:	e0d5      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021c4:	4b14      	ldr	r3, [pc, #80]	@ (8002218 <HAL_RCC_OscConfig+0x4b8>)
 80021c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1ef      	bne.n	80021b2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 80c9 	beq.w	800236e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002218 <HAL_RCC_OscConfig+0x4b8>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 030c 	and.w	r3, r3, #12
 80021e4:	2b0c      	cmp	r3, #12
 80021e6:	f000 8083 	beq.w	80022f0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d15e      	bne.n	80022b0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f2:	4b09      	ldr	r3, [pc, #36]	@ (8002218 <HAL_RCC_OscConfig+0x4b8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a08      	ldr	r2, [pc, #32]	@ (8002218 <HAL_RCC_OscConfig+0x4b8>)
 80021f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fe:	f7ff f9d3 	bl	80015a8 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002204:	e00c      	b.n	8002220 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002206:	f7ff f9cf 	bl	80015a8 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d905      	bls.n	8002220 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e0ab      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
 8002218:	40021000 	.word	0x40021000
 800221c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002220:	4b55      	ldr	r3, [pc, #340]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1ec      	bne.n	8002206 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800222c:	4b52      	ldr	r3, [pc, #328]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	4b52      	ldr	r3, [pc, #328]	@ (800237c <HAL_RCC_OscConfig+0x61c>)
 8002232:	4013      	ands	r3, r2
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6a11      	ldr	r1, [r2, #32]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800223c:	3a01      	subs	r2, #1
 800223e:	0112      	lsls	r2, r2, #4
 8002240:	4311      	orrs	r1, r2
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002246:	0212      	lsls	r2, r2, #8
 8002248:	4311      	orrs	r1, r2
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800224e:	0852      	lsrs	r2, r2, #1
 8002250:	3a01      	subs	r2, #1
 8002252:	0552      	lsls	r2, r2, #21
 8002254:	4311      	orrs	r1, r2
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800225a:	0852      	lsrs	r2, r2, #1
 800225c:	3a01      	subs	r2, #1
 800225e:	0652      	lsls	r2, r2, #25
 8002260:	4311      	orrs	r1, r2
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002266:	06d2      	lsls	r2, r2, #27
 8002268:	430a      	orrs	r2, r1
 800226a:	4943      	ldr	r1, [pc, #268]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 800226c:	4313      	orrs	r3, r2
 800226e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002270:	4b41      	ldr	r3, [pc, #260]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a40      	ldr	r2, [pc, #256]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 8002276:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800227a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800227c:	4b3e      	ldr	r3, [pc, #248]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4a3d      	ldr	r2, [pc, #244]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 8002282:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002286:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002288:	f7ff f98e 	bl	80015a8 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002290:	f7ff f98a 	bl	80015a8 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e066      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022a2:	4b35      	ldr	r3, [pc, #212]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0x530>
 80022ae:	e05e      	b.n	800236e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b0:	4b31      	ldr	r3, [pc, #196]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a30      	ldr	r2, [pc, #192]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 80022b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022bc:	f7ff f974 	bl	80015a8 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c4:	f7ff f970 	bl	80015a8 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e04c      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022d6:	4b28      	ldr	r3, [pc, #160]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80022e2:	4b25      	ldr	r3, [pc, #148]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	4924      	ldr	r1, [pc, #144]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 80022e8:	4b25      	ldr	r3, [pc, #148]	@ (8002380 <HAL_RCC_OscConfig+0x620>)
 80022ea:	4013      	ands	r3, r2
 80022ec:	60cb      	str	r3, [r1, #12]
 80022ee:	e03e      	b.n	800236e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d101      	bne.n	80022fc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e039      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80022fc:	4b1e      	ldr	r3, [pc, #120]	@ (8002378 <HAL_RCC_OscConfig+0x618>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f003 0203 	and.w	r2, r3, #3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	429a      	cmp	r2, r3
 800230e:	d12c      	bne.n	800236a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231a:	3b01      	subs	r3, #1
 800231c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800231e:	429a      	cmp	r2, r3
 8002320:	d123      	bne.n	800236a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800232e:	429a      	cmp	r2, r3
 8002330:	d11b      	bne.n	800236a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800233e:	429a      	cmp	r2, r3
 8002340:	d113      	bne.n	800236a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234c:	085b      	lsrs	r3, r3, #1
 800234e:	3b01      	subs	r3, #1
 8002350:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002352:	429a      	cmp	r2, r3
 8002354:	d109      	bne.n	800236a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002360:	085b      	lsrs	r3, r3, #1
 8002362:	3b01      	subs	r3, #1
 8002364:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002366:	429a      	cmp	r2, r3
 8002368:	d001      	beq.n	800236e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3720      	adds	r7, #32
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40021000 	.word	0x40021000
 800237c:	019f800c 	.word	0x019f800c
 8002380:	feeefffc 	.word	0xfeeefffc

08002384 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800238e:	2300      	movs	r3, #0
 8002390:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e11e      	b.n	80025da <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800239c:	4b91      	ldr	r3, [pc, #580]	@ (80025e4 <HAL_RCC_ClockConfig+0x260>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 030f 	and.w	r3, r3, #15
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d910      	bls.n	80023cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023aa:	4b8e      	ldr	r3, [pc, #568]	@ (80025e4 <HAL_RCC_ClockConfig+0x260>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 020f 	bic.w	r2, r3, #15
 80023b2:	498c      	ldr	r1, [pc, #560]	@ (80025e4 <HAL_RCC_ClockConfig+0x260>)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ba:	4b8a      	ldr	r3, [pc, #552]	@ (80025e4 <HAL_RCC_ClockConfig+0x260>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d001      	beq.n	80023cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e106      	b.n	80025da <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d073      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b03      	cmp	r3, #3
 80023de:	d129      	bne.n	8002434 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023e0:	4b81      	ldr	r3, [pc, #516]	@ (80025e8 <HAL_RCC_ClockConfig+0x264>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0f4      	b.n	80025da <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80023f0:	f000 f99e 	bl	8002730 <RCC_GetSysClockFreqFromPLLSource>
 80023f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4a7c      	ldr	r2, [pc, #496]	@ (80025ec <HAL_RCC_ClockConfig+0x268>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d93f      	bls.n	800247e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023fe:	4b7a      	ldr	r3, [pc, #488]	@ (80025e8 <HAL_RCC_ClockConfig+0x264>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d009      	beq.n	800241e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002412:	2b00      	cmp	r3, #0
 8002414:	d033      	beq.n	800247e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800241a:	2b00      	cmp	r3, #0
 800241c:	d12f      	bne.n	800247e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800241e:	4b72      	ldr	r3, [pc, #456]	@ (80025e8 <HAL_RCC_ClockConfig+0x264>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002426:	4a70      	ldr	r2, [pc, #448]	@ (80025e8 <HAL_RCC_ClockConfig+0x264>)
 8002428:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800242c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800242e:	2380      	movs	r3, #128	@ 0x80
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	e024      	b.n	800247e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b02      	cmp	r3, #2
 800243a:	d107      	bne.n	800244c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800243c:	4b6a      	ldr	r3, [pc, #424]	@ (80025e8 <HAL_RCC_ClockConfig+0x264>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d109      	bne.n	800245c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e0c6      	b.n	80025da <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800244c:	4b66      	ldr	r3, [pc, #408]	@ (80025e8 <HAL_RCC_ClockConfig+0x264>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e0be      	b.n	80025da <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800245c:	f000 f8ce 	bl	80025fc <HAL_RCC_GetSysClockFreq>
 8002460:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4a61      	ldr	r2, [pc, #388]	@ (80025ec <HAL_RCC_ClockConfig+0x268>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d909      	bls.n	800247e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800246a:	4b5f      	ldr	r3, [pc, #380]	@ (80025e8 <HAL_RCC_ClockConfig+0x264>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002472:	4a5d      	ldr	r2, [pc, #372]	@ (80025e8 <HAL_RCC_ClockConfig+0x264>)
 8002474:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002478:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800247a:	2380      	movs	r3, #128	@ 0x80
 800247c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800247e:	4b5a      	ldr	r3, [pc, #360]	@ (80025e8 <HAL_RCC_ClockConfig+0x264>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f023 0203 	bic.w	r2, r3, #3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	4957      	ldr	r1, [pc, #348]	@ (80025e8 <HAL_RCC_ClockConfig+0x264>)
 800248c:	4313      	orrs	r3, r2
 800248e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002490:	f7ff f88a 	bl	80015a8 <HAL_GetTick>
 8002494:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	e00a      	b.n	80024ae <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002498:	f7ff f886 	bl	80015a8 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e095      	b.n	80025da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ae:	4b4e      	ldr	r3, [pc, #312]	@ (80025e8 <HAL_RCC_ClockConfig+0x264>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 020c 	and.w	r2, r3, #12
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	429a      	cmp	r2, r3
 80024be:	d1eb      	bne.n	8002498 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d023      	beq.n	8002514 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024d8:	4b43      	ldr	r3, [pc, #268]	@ (80025e8 <HAL_RCC_ClockConfig+0x264>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	4a42      	ldr	r2, [pc, #264]	@ (80025e8 <HAL_RCC_ClockConfig+0x264>)
 80024de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024e2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0308 	and.w	r3, r3, #8
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d007      	beq.n	8002500 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80024f0:	4b3d      	ldr	r3, [pc, #244]	@ (80025e8 <HAL_RCC_ClockConfig+0x264>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80024f8:	4a3b      	ldr	r2, [pc, #236]	@ (80025e8 <HAL_RCC_ClockConfig+0x264>)
 80024fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002500:	4b39      	ldr	r3, [pc, #228]	@ (80025e8 <HAL_RCC_ClockConfig+0x264>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	4936      	ldr	r1, [pc, #216]	@ (80025e8 <HAL_RCC_ClockConfig+0x264>)
 800250e:	4313      	orrs	r3, r2
 8002510:	608b      	str	r3, [r1, #8]
 8002512:	e008      	b.n	8002526 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	2b80      	cmp	r3, #128	@ 0x80
 8002518:	d105      	bne.n	8002526 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800251a:	4b33      	ldr	r3, [pc, #204]	@ (80025e8 <HAL_RCC_ClockConfig+0x264>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	4a32      	ldr	r2, [pc, #200]	@ (80025e8 <HAL_RCC_ClockConfig+0x264>)
 8002520:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002524:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002526:	4b2f      	ldr	r3, [pc, #188]	@ (80025e4 <HAL_RCC_ClockConfig+0x260>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d21d      	bcs.n	8002570 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002534:	4b2b      	ldr	r3, [pc, #172]	@ (80025e4 <HAL_RCC_ClockConfig+0x260>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f023 020f 	bic.w	r2, r3, #15
 800253c:	4929      	ldr	r1, [pc, #164]	@ (80025e4 <HAL_RCC_ClockConfig+0x260>)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	4313      	orrs	r3, r2
 8002542:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002544:	f7ff f830 	bl	80015a8 <HAL_GetTick>
 8002548:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800254a:	e00a      	b.n	8002562 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800254c:	f7ff f82c 	bl	80015a8 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800255a:	4293      	cmp	r3, r2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e03b      	b.n	80025da <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002562:	4b20      	ldr	r3, [pc, #128]	@ (80025e4 <HAL_RCC_ClockConfig+0x260>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d1ed      	bne.n	800254c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800257c:	4b1a      	ldr	r3, [pc, #104]	@ (80025e8 <HAL_RCC_ClockConfig+0x264>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	4917      	ldr	r1, [pc, #92]	@ (80025e8 <HAL_RCC_ClockConfig+0x264>)
 800258a:	4313      	orrs	r3, r2
 800258c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d009      	beq.n	80025ae <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800259a:	4b13      	ldr	r3, [pc, #76]	@ (80025e8 <HAL_RCC_ClockConfig+0x264>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	490f      	ldr	r1, [pc, #60]	@ (80025e8 <HAL_RCC_ClockConfig+0x264>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025ae:	f000 f825 	bl	80025fc <HAL_RCC_GetSysClockFreq>
 80025b2:	4602      	mov	r2, r0
 80025b4:	4b0c      	ldr	r3, [pc, #48]	@ (80025e8 <HAL_RCC_ClockConfig+0x264>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	490c      	ldr	r1, [pc, #48]	@ (80025f0 <HAL_RCC_ClockConfig+0x26c>)
 80025c0:	5ccb      	ldrb	r3, [r1, r3]
 80025c2:	f003 031f 	and.w	r3, r3, #31
 80025c6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ca:	4a0a      	ldr	r2, [pc, #40]	@ (80025f4 <HAL_RCC_ClockConfig+0x270>)
 80025cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80025ce:	4b0a      	ldr	r3, [pc, #40]	@ (80025f8 <HAL_RCC_ClockConfig+0x274>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe ff9c 	bl	8001510 <HAL_InitTick>
 80025d8:	4603      	mov	r3, r0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40022000 	.word	0x40022000
 80025e8:	40021000 	.word	0x40021000
 80025ec:	04c4b400 	.word	0x04c4b400
 80025f0:	08004340 	.word	0x08004340
 80025f4:	20000000 	.word	0x20000000
 80025f8:	20000004 	.word	0x20000004

080025fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002602:	4b2c      	ldr	r3, [pc, #176]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 030c 	and.w	r3, r3, #12
 800260a:	2b04      	cmp	r3, #4
 800260c:	d102      	bne.n	8002614 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800260e:	4b2a      	ldr	r3, [pc, #168]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	e047      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002614:	4b27      	ldr	r3, [pc, #156]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 030c 	and.w	r3, r3, #12
 800261c:	2b08      	cmp	r3, #8
 800261e:	d102      	bne.n	8002626 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002620:	4b26      	ldr	r3, [pc, #152]	@ (80026bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	e03e      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002626:	4b23      	ldr	r3, [pc, #140]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	2b0c      	cmp	r3, #12
 8002630:	d136      	bne.n	80026a0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002632:	4b20      	ldr	r3, [pc, #128]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800263c:	4b1d      	ldr	r3, [pc, #116]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	091b      	lsrs	r3, r3, #4
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	3301      	adds	r3, #1
 8002648:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2b03      	cmp	r3, #3
 800264e:	d10c      	bne.n	800266a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002650:	4a1a      	ldr	r2, [pc, #104]	@ (80026bc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	fbb2 f3f3 	udiv	r3, r2, r3
 8002658:	4a16      	ldr	r2, [pc, #88]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800265a:	68d2      	ldr	r2, [r2, #12]
 800265c:	0a12      	lsrs	r2, r2, #8
 800265e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002662:	fb02 f303 	mul.w	r3, r2, r3
 8002666:	617b      	str	r3, [r7, #20]
      break;
 8002668:	e00c      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800266a:	4a13      	ldr	r2, [pc, #76]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002672:	4a10      	ldr	r2, [pc, #64]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002674:	68d2      	ldr	r2, [r2, #12]
 8002676:	0a12      	lsrs	r2, r2, #8
 8002678:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800267c:	fb02 f303 	mul.w	r3, r2, r3
 8002680:	617b      	str	r3, [r7, #20]
      break;
 8002682:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002684:	4b0b      	ldr	r3, [pc, #44]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	0e5b      	lsrs	r3, r3, #25
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	3301      	adds	r3, #1
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	fbb2 f3f3 	udiv	r3, r2, r3
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	e001      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80026a4:	693b      	ldr	r3, [r7, #16]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	371c      	adds	r7, #28
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40021000 	.word	0x40021000
 80026b8:	00f42400 	.word	0x00f42400
 80026bc:	007a1200 	.word	0x007a1200

080026c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026c4:	4b03      	ldr	r3, [pc, #12]	@ (80026d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026c6:	681b      	ldr	r3, [r3, #0]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000000 	.word	0x20000000

080026d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026dc:	f7ff fff0 	bl	80026c0 <HAL_RCC_GetHCLKFreq>
 80026e0:	4602      	mov	r2, r0
 80026e2:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	0a1b      	lsrs	r3, r3, #8
 80026e8:	f003 0307 	and.w	r3, r3, #7
 80026ec:	4904      	ldr	r1, [pc, #16]	@ (8002700 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026ee:	5ccb      	ldrb	r3, [r1, r3]
 80026f0:	f003 031f 	and.w	r3, r3, #31
 80026f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40021000 	.word	0x40021000
 8002700:	08004350 	.word	0x08004350

08002704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002708:	f7ff ffda 	bl	80026c0 <HAL_RCC_GetHCLKFreq>
 800270c:	4602      	mov	r2, r0
 800270e:	4b06      	ldr	r3, [pc, #24]	@ (8002728 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	0adb      	lsrs	r3, r3, #11
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	4904      	ldr	r1, [pc, #16]	@ (800272c <HAL_RCC_GetPCLK2Freq+0x28>)
 800271a:	5ccb      	ldrb	r3, [r1, r3]
 800271c:	f003 031f 	and.w	r3, r3, #31
 8002720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002724:	4618      	mov	r0, r3
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40021000 	.word	0x40021000
 800272c:	08004350 	.word	0x08004350

08002730 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002730:	b480      	push	{r7}
 8002732:	b087      	sub	sp, #28
 8002734:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002736:	4b1e      	ldr	r3, [pc, #120]	@ (80027b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002740:	4b1b      	ldr	r3, [pc, #108]	@ (80027b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	091b      	lsrs	r3, r3, #4
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	3301      	adds	r3, #1
 800274c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	2b03      	cmp	r3, #3
 8002752:	d10c      	bne.n	800276e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002754:	4a17      	ldr	r2, [pc, #92]	@ (80027b4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	fbb2 f3f3 	udiv	r3, r2, r3
 800275c:	4a14      	ldr	r2, [pc, #80]	@ (80027b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800275e:	68d2      	ldr	r2, [r2, #12]
 8002760:	0a12      	lsrs	r2, r2, #8
 8002762:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002766:	fb02 f303 	mul.w	r3, r2, r3
 800276a:	617b      	str	r3, [r7, #20]
    break;
 800276c:	e00c      	b.n	8002788 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800276e:	4a12      	ldr	r2, [pc, #72]	@ (80027b8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	fbb2 f3f3 	udiv	r3, r2, r3
 8002776:	4a0e      	ldr	r2, [pc, #56]	@ (80027b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002778:	68d2      	ldr	r2, [r2, #12]
 800277a:	0a12      	lsrs	r2, r2, #8
 800277c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002780:	fb02 f303 	mul.w	r3, r2, r3
 8002784:	617b      	str	r3, [r7, #20]
    break;
 8002786:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002788:	4b09      	ldr	r3, [pc, #36]	@ (80027b0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	0e5b      	lsrs	r3, r3, #25
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	3301      	adds	r3, #1
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80027a2:	687b      	ldr	r3, [r7, #4]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	371c      	adds	r7, #28
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	40021000 	.word	0x40021000
 80027b4:	007a1200 	.word	0x007a1200
 80027b8:	00f42400 	.word	0x00f42400

080027bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027c4:	2300      	movs	r3, #0
 80027c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027c8:	2300      	movs	r3, #0
 80027ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 8098 	beq.w	800290a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027da:	2300      	movs	r3, #0
 80027dc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027de:	4b43      	ldr	r3, [pc, #268]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10d      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ea:	4b40      	ldr	r3, [pc, #256]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ee:	4a3f      	ldr	r2, [pc, #252]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80027f6:	4b3d      	ldr	r3, [pc, #244]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002802:	2301      	movs	r3, #1
 8002804:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002806:	4b3a      	ldr	r3, [pc, #232]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a39      	ldr	r2, [pc, #228]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800280c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002810:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002812:	f7fe fec9 	bl	80015a8 <HAL_GetTick>
 8002816:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002818:	e009      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800281a:	f7fe fec5 	bl	80015a8 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d902      	bls.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	74fb      	strb	r3, [r7, #19]
        break;
 800282c:	e005      	b.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800282e:	4b30      	ldr	r3, [pc, #192]	@ (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0ef      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800283a:	7cfb      	ldrb	r3, [r7, #19]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d159      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002840:	4b2a      	ldr	r3, [pc, #168]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002846:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800284a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d01e      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	429a      	cmp	r2, r3
 800285a:	d019      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800285c:	4b23      	ldr	r3, [pc, #140]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800285e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002862:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002866:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002868:	4b20      	ldr	r3, [pc, #128]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800286e:	4a1f      	ldr	r2, [pc, #124]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002870:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002874:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002878:	4b1c      	ldr	r3, [pc, #112]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800287a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287e:	4a1b      	ldr	r2, [pc, #108]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002880:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002884:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002888:	4a18      	ldr	r2, [pc, #96]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d016      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289a:	f7fe fe85 	bl	80015a8 <HAL_GetTick>
 800289e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028a0:	e00b      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028a2:	f7fe fe81 	bl	80015a8 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d902      	bls.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	74fb      	strb	r3, [r7, #19]
            break;
 80028b8:	e006      	b.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ba:	4b0c      	ldr	r3, [pc, #48]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0ec      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80028c8:	7cfb      	ldrb	r3, [r7, #19]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10b      	bne.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028ce:	4b07      	ldr	r3, [pc, #28]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028dc:	4903      	ldr	r1, [pc, #12]	@ (80028ec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80028e4:	e008      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028e6:	7cfb      	ldrb	r3, [r7, #19]
 80028e8:	74bb      	strb	r3, [r7, #18]
 80028ea:	e005      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f4:	7cfb      	ldrb	r3, [r7, #19]
 80028f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028f8:	7c7b      	ldrb	r3, [r7, #17]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d105      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028fe:	4ba6      	ldr	r3, [pc, #664]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002902:	4aa5      	ldr	r2, [pc, #660]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002904:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002908:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00a      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002916:	4ba0      	ldr	r3, [pc, #640]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800291c:	f023 0203 	bic.w	r2, r3, #3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	499c      	ldr	r1, [pc, #624]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002926:	4313      	orrs	r3, r2
 8002928:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00a      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002938:	4b97      	ldr	r3, [pc, #604]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800293a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800293e:	f023 020c 	bic.w	r2, r3, #12
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	4994      	ldr	r1, [pc, #592]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002948:	4313      	orrs	r3, r2
 800294a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0304 	and.w	r3, r3, #4
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00a      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800295a:	4b8f      	ldr	r3, [pc, #572]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800295c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002960:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	498b      	ldr	r1, [pc, #556]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800296a:	4313      	orrs	r3, r2
 800296c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0308 	and.w	r3, r3, #8
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00a      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800297c:	4b86      	ldr	r3, [pc, #536]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002982:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	4983      	ldr	r1, [pc, #524]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800298c:	4313      	orrs	r3, r2
 800298e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0320 	and.w	r3, r3, #32
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00a      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800299e:	4b7e      	ldr	r3, [pc, #504]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	497a      	ldr	r1, [pc, #488]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00a      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029c0:	4b75      	ldr	r3, [pc, #468]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	4972      	ldr	r1, [pc, #456]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00a      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029e2:	4b6d      	ldr	r3, [pc, #436]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	4969      	ldr	r1, [pc, #420]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00a      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a04:	4b64      	ldr	r3, [pc, #400]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a0a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	4961      	ldr	r1, [pc, #388]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a26:	4b5c      	ldr	r3, [pc, #368]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a2c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a34:	4958      	ldr	r1, [pc, #352]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d015      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a48:	4b53      	ldr	r3, [pc, #332]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a56:	4950      	ldr	r1, [pc, #320]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a66:	d105      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a68:	4b4b      	ldr	r3, [pc, #300]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	4a4a      	ldr	r2, [pc, #296]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a72:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d015      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a80:	4b45      	ldr	r3, [pc, #276]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a86:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8e:	4942      	ldr	r1, [pc, #264]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a9e:	d105      	bne.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aa0:	4b3d      	ldr	r3, [pc, #244]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	4a3c      	ldr	r2, [pc, #240]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002aaa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d015      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ab8:	4b37      	ldr	r3, [pc, #220]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002abe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac6:	4934      	ldr	r1, [pc, #208]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ad6:	d105      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ad8:	4b2f      	ldr	r3, [pc, #188]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	4a2e      	ldr	r2, [pc, #184]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ade:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ae2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d015      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002af0:	4b29      	ldr	r3, [pc, #164]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002afe:	4926      	ldr	r1, [pc, #152]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b0e:	d105      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b10:	4b21      	ldr	r3, [pc, #132]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	4a20      	ldr	r2, [pc, #128]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b1a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d015      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b28:	4b1b      	ldr	r3, [pc, #108]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b2e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b36:	4918      	ldr	r1, [pc, #96]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b46:	d105      	bne.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b48:	4b13      	ldr	r3, [pc, #76]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	4a12      	ldr	r2, [pc, #72]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b52:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d015      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b60:	4b0d      	ldr	r3, [pc, #52]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b66:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b6e:	490a      	ldr	r1, [pc, #40]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b7e:	d105      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b80:	4b05      	ldr	r3, [pc, #20]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	4a04      	ldr	r2, [pc, #16]	@ (8002b98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b8a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002b8c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40021000 	.word	0x40021000

08002b9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e09d      	b.n	8002cea <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d108      	bne.n	8002bc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bbe:	d009      	beq.n	8002bd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	61da      	str	r2, [r3, #28]
 8002bc6:	e005      	b.n	8002bd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d106      	bne.n	8002bf4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7fe fb70 	bl	80012d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c0a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c14:	d902      	bls.n	8002c1c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	e002      	b.n	8002c22 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c20:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002c2a:	d007      	beq.n	8002c3c <HAL_SPI_Init+0xa0>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c34:	d002      	beq.n	8002c3c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	431a      	orrs	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c7e:	ea42 0103 	orr.w	r1, r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c86:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	0c1b      	lsrs	r3, r3, #16
 8002c98:	f003 0204 	and.w	r2, r3, #4
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca0:	f003 0310 	and.w	r3, r3, #16
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002cb8:	ea42 0103 	orr.w	r1, r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	69da      	ldr	r2, [r3, #28]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b088      	sub	sp, #32
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	60b9      	str	r1, [r7, #8]
 8002cfc:	603b      	str	r3, [r7, #0]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_SPI_Transmit+0x22>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e15f      	b.n	8002fd4 <HAL_SPI_Transmit+0x2e2>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d1c:	f7fe fc44 	bl	80015a8 <HAL_GetTick>
 8002d20:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d22:	88fb      	ldrh	r3, [r7, #6]
 8002d24:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d002      	beq.n	8002d38 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d32:	2302      	movs	r3, #2
 8002d34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d36:	e148      	b.n	8002fca <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <HAL_SPI_Transmit+0x52>
 8002d3e:	88fb      	ldrh	r3, [r7, #6]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d102      	bne.n	8002d4a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d48:	e13f      	b.n	8002fca <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	88fa      	ldrh	r2, [r7, #6]
 8002d62:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	88fa      	ldrh	r2, [r7, #6]
 8002d68:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d94:	d10f      	bne.n	8002db6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002da4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002db4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dc0:	2b40      	cmp	r3, #64	@ 0x40
 8002dc2:	d007      	beq.n	8002dd4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002dd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ddc:	d94f      	bls.n	8002e7e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <HAL_SPI_Transmit+0xfa>
 8002de6:	8afb      	ldrh	r3, [r7, #22]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d142      	bne.n	8002e72 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df0:	881a      	ldrh	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dfc:	1c9a      	adds	r2, r3, #2
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e10:	e02f      	b.n	8002e72 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d112      	bne.n	8002e46 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e24:	881a      	ldrh	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e30:	1c9a      	adds	r2, r3, #2
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e44:	e015      	b.n	8002e72 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e46:	f7fe fbaf 	bl	80015a8 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d803      	bhi.n	8002e5e <HAL_SPI_Transmit+0x16c>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5c:	d102      	bne.n	8002e64 <HAL_SPI_Transmit+0x172>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d106      	bne.n	8002e72 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002e70:	e0ab      	b.n	8002fca <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1ca      	bne.n	8002e12 <HAL_SPI_Transmit+0x120>
 8002e7c:	e080      	b.n	8002f80 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <HAL_SPI_Transmit+0x19a>
 8002e86:	8afb      	ldrh	r3, [r7, #22]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d174      	bne.n	8002f76 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d912      	bls.n	8002ebc <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e9a:	881a      	ldrh	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea6:	1c9a      	adds	r2, r3, #2
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	3b02      	subs	r3, #2
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002eba:	e05c      	b.n	8002f76 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	330c      	adds	r3, #12
 8002ec6:	7812      	ldrb	r2, [r2, #0]
 8002ec8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002ee2:	e048      	b.n	8002f76 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d12b      	bne.n	8002f4a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d912      	bls.n	8002f22 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f00:	881a      	ldrh	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f0c:	1c9a      	adds	r2, r3, #2
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	3b02      	subs	r3, #2
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f20:	e029      	b.n	8002f76 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	330c      	adds	r3, #12
 8002f2c:	7812      	ldrb	r2, [r2, #0]
 8002f2e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f48:	e015      	b.n	8002f76 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f4a:	f7fe fb2d 	bl	80015a8 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d803      	bhi.n	8002f62 <HAL_SPI_Transmit+0x270>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f60:	d102      	bne.n	8002f68 <HAL_SPI_Transmit+0x276>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d106      	bne.n	8002f76 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002f74:	e029      	b.n	8002fca <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1b1      	bne.n	8002ee4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	6839      	ldr	r1, [r7, #0]
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 f947 	bl	8003218 <SPI_EndRxTxTransaction>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2220      	movs	r2, #32
 8002f94:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10a      	bne.n	8002fb4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d002      	beq.n	8002fc2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	77fb      	strb	r3, [r7, #31]
 8002fc0:	e003      	b.n	8002fca <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002fd2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3720      	adds	r7, #32
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b088      	sub	sp, #32
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	603b      	str	r3, [r7, #0]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002fec:	f7fe fadc 	bl	80015a8 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff4:	1a9b      	subs	r3, r3, r2
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ffc:	f7fe fad4 	bl	80015a8 <HAL_GetTick>
 8003000:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003002:	4b39      	ldr	r3, [pc, #228]	@ (80030e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	015b      	lsls	r3, r3, #5
 8003008:	0d1b      	lsrs	r3, r3, #20
 800300a:	69fa      	ldr	r2, [r7, #28]
 800300c:	fb02 f303 	mul.w	r3, r2, r3
 8003010:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003012:	e054      	b.n	80030be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301a:	d050      	beq.n	80030be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800301c:	f7fe fac4 	bl	80015a8 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	69fa      	ldr	r2, [r7, #28]
 8003028:	429a      	cmp	r2, r3
 800302a:	d902      	bls.n	8003032 <SPI_WaitFlagStateUntilTimeout+0x56>
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d13d      	bne.n	80030ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003040:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800304a:	d111      	bne.n	8003070 <SPI_WaitFlagStateUntilTimeout+0x94>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003054:	d004      	beq.n	8003060 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800305e:	d107      	bne.n	8003070 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800306e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003074:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003078:	d10f      	bne.n	800309a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003088:	601a      	str	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003098:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e017      	b.n	80030de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	4013      	ands	r3, r2
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	bf0c      	ite	eq
 80030ce:	2301      	moveq	r3, #1
 80030d0:	2300      	movne	r3, #0
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	461a      	mov	r2, r3
 80030d6:	79fb      	ldrb	r3, [r7, #7]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d19b      	bne.n	8003014 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3720      	adds	r7, #32
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	20000000 	.word	0x20000000

080030ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08a      	sub	sp, #40	@ 0x28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80030fa:	2300      	movs	r3, #0
 80030fc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80030fe:	f7fe fa53 	bl	80015a8 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003106:	1a9b      	subs	r3, r3, r2
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	4413      	add	r3, r2
 800310c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800310e:	f7fe fa4b 	bl	80015a8 <HAL_GetTick>
 8003112:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	330c      	adds	r3, #12
 800311a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800311c:	4b3d      	ldr	r3, [pc, #244]	@ (8003214 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	00da      	lsls	r2, r3, #3
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	0d1b      	lsrs	r3, r3, #20
 800312c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800312e:	fb02 f303 	mul.w	r3, r2, r3
 8003132:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003134:	e060      	b.n	80031f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800313c:	d107      	bne.n	800314e <SPI_WaitFifoStateUntilTimeout+0x62>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d104      	bne.n	800314e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800314c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003154:	d050      	beq.n	80031f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003156:	f7fe fa27 	bl	80015a8 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003162:	429a      	cmp	r2, r3
 8003164:	d902      	bls.n	800316c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003168:	2b00      	cmp	r3, #0
 800316a:	d13d      	bne.n	80031e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800317a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003184:	d111      	bne.n	80031aa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800318e:	d004      	beq.n	800319a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003198:	d107      	bne.n	80031aa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031b2:	d10f      	bne.n	80031d4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e010      	b.n	800320a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	3b01      	subs	r3, #1
 80031f6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	4013      	ands	r3, r2
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	429a      	cmp	r2, r3
 8003206:	d196      	bne.n	8003136 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3728      	adds	r7, #40	@ 0x28
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20000000 	.word	0x20000000

08003218 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af02      	add	r7, sp, #8
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2200      	movs	r2, #0
 800322c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f7ff ff5b 	bl	80030ec <SPI_WaitFifoStateUntilTimeout>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d007      	beq.n	800324c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003240:	f043 0220 	orr.w	r2, r3, #32
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e027      	b.n	800329c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2200      	movs	r2, #0
 8003254:	2180      	movs	r1, #128	@ 0x80
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f7ff fec0 	bl	8002fdc <SPI_WaitFlagStateUntilTimeout>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d007      	beq.n	8003272 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003266:	f043 0220 	orr.w	r2, r3, #32
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e014      	b.n	800329c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2200      	movs	r2, #0
 800327a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f7ff ff34 	bl	80030ec <SPI_WaitFifoStateUntilTimeout>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d007      	beq.n	800329a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800328e:	f043 0220 	orr.w	r2, r3, #32
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e000      	b.n	800329c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e042      	b.n	800333c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d106      	bne.n	80032ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7fe f845 	bl	8001358 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2224      	movs	r2, #36	@ 0x24
 80032d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0201 	bic.w	r2, r2, #1
 80032e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 fc90 	bl	8003c14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 f9c1 	bl	800367c <UART_SetConfig>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e01b      	b.n	800333c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003312:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003322:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0201 	orr.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 fd0f 	bl	8003d58 <UART_CheckIdleState>
 800333a:	4603      	mov	r3, r0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b08a      	sub	sp, #40	@ 0x28
 8003348:	af02      	add	r7, sp, #8
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	603b      	str	r3, [r7, #0]
 8003350:	4613      	mov	r3, r2
 8003352:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800335a:	2b20      	cmp	r3, #32
 800335c:	d17b      	bne.n	8003456 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d002      	beq.n	800336a <HAL_UART_Transmit+0x26>
 8003364:	88fb      	ldrh	r3, [r7, #6]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e074      	b.n	8003458 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2221      	movs	r2, #33	@ 0x21
 800337a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800337e:	f7fe f913 	bl	80015a8 <HAL_GetTick>
 8003382:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	88fa      	ldrh	r2, [r7, #6]
 8003388:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	88fa      	ldrh	r2, [r7, #6]
 8003390:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800339c:	d108      	bne.n	80033b0 <HAL_UART_Transmit+0x6c>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d104      	bne.n	80033b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80033a6:	2300      	movs	r3, #0
 80033a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	61bb      	str	r3, [r7, #24]
 80033ae:	e003      	b.n	80033b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033b4:	2300      	movs	r3, #0
 80033b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033b8:	e030      	b.n	800341c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2200      	movs	r2, #0
 80033c2:	2180      	movs	r1, #128	@ 0x80
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 fd71 	bl	8003eac <UART_WaitOnFlagUntilTimeout>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d005      	beq.n	80033dc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e03d      	b.n	8003458 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10b      	bne.n	80033fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033f0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	3302      	adds	r3, #2
 80033f6:	61bb      	str	r3, [r7, #24]
 80033f8:	e007      	b.n	800340a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	781a      	ldrb	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	3301      	adds	r3, #1
 8003408:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003410:	b29b      	uxth	r3, r3
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003422:	b29b      	uxth	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1c8      	bne.n	80033ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2200      	movs	r2, #0
 8003430:	2140      	movs	r1, #64	@ 0x40
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 fd3a 	bl	8003eac <UART_WaitOnFlagUntilTimeout>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d005      	beq.n	800344a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2220      	movs	r2, #32
 8003442:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e006      	b.n	8003458 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2220      	movs	r2, #32
 800344e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	e000      	b.n	8003458 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003456:	2302      	movs	r3, #2
  }
}
 8003458:	4618      	mov	r0, r3
 800345a:	3720      	adds	r7, #32
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b0a0      	sub	sp, #128	@ 0x80
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003470:	e853 3f00 	ldrex	r3, [r3]
 8003474:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8003476:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003478:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800347c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003486:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003488:	667a      	str	r2, [r7, #100]	@ 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800348c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800348e:	e841 2300 	strex	r3, r2, [r1]
 8003492:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8003494:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1e6      	bne.n	8003468 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3308      	adds	r3, #8
 80034a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034a4:	e853 3f00 	ldrex	r3, [r3]
 80034a8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80034aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034ac:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 80034b0:	f023 0301 	bic.w	r3, r3, #1
 80034b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	3308      	adds	r3, #8
 80034bc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80034be:	657a      	str	r2, [r7, #84]	@ 0x54
 80034c0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80034c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80034c6:	e841 2300 	strex	r3, r2, [r1]
 80034ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80034cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1e3      	bne.n	800349a <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d118      	bne.n	800350c <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034e2:	e853 3f00 	ldrex	r3, [r3]
 80034e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80034e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ea:	f023 0310 	bic.w	r3, r3, #16
 80034ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	461a      	mov	r2, r3
 80034f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80034fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80034fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003500:	e841 2300 	strex	r3, r2, [r1]
 8003504:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1e6      	bne.n	80034da <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003516:	2b80      	cmp	r3, #128	@ 0x80
 8003518:	d137      	bne.n	800358a <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	3308      	adds	r3, #8
 8003520:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	e853 3f00 	ldrex	r3, [r3]
 8003528:	61fb      	str	r3, [r7, #28]
   return(result);
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003530:	673b      	str	r3, [r7, #112]	@ 0x70
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	3308      	adds	r3, #8
 8003538:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800353a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800353c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003540:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003542:	e841 2300 	strex	r3, r2, [r1]
 8003546:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1e5      	bne.n	800351a <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003552:	2b00      	cmp	r3, #0
 8003554:	d019      	beq.n	800358a <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800355a:	2200      	movs	r2, #0
 800355c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003562:	4618      	mov	r0, r3
 8003564:	f7fe f931 	bl	80017ca <HAL_DMA_Abort>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00d      	beq.n	800358a <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003572:	4618      	mov	r0, r3
 8003574:	f7fe f982 	bl	800187c <HAL_DMA_GetError>
 8003578:	4603      	mov	r3, r0
 800357a:	2b20      	cmp	r3, #32
 800357c:	d105      	bne.n	800358a <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2210      	movs	r2, #16
 8003582:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e073      	b.n	8003672 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003594:	2b40      	cmp	r3, #64	@ 0x40
 8003596:	d13b      	bne.n	8003610 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	3308      	adds	r3, #8
 800359e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	e853 3f00 	ldrex	r3, [r3]
 80035a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	3308      	adds	r3, #8
 80035b6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80035b8:	61ba      	str	r2, [r7, #24]
 80035ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035bc:	6979      	ldr	r1, [r7, #20]
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	e841 2300 	strex	r3, r2, [r1]
 80035c4:	613b      	str	r3, [r7, #16]
   return(result);
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1e5      	bne.n	8003598 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d01c      	beq.n	8003610 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035dc:	2200      	movs	r2, #0
 80035de:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fe f8ef 	bl	80017ca <HAL_DMA_Abort>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00e      	beq.n	8003610 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fe f93f 	bl	800187c <HAL_DMA_GetError>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b20      	cmp	r3, #32
 8003602:	d105      	bne.n	8003610 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2210      	movs	r2, #16
 8003608:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e030      	b.n	8003672 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	220f      	movs	r2, #15
 8003626:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800362c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003630:	d107      	bne.n	8003642 <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699a      	ldr	r2, [r3, #24]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 0210 	orr.w	r2, r2, #16
 8003640:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699a      	ldr	r2, [r3, #24]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0208 	orr.w	r2, r2, #8
 8003650:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2220      	movs	r2, #32
 8003656:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2220      	movs	r2, #32
 800365e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3780      	adds	r7, #128	@ 0x80
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800367c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003680:	b08c      	sub	sp, #48	@ 0x30
 8003682:	af00      	add	r7, sp, #0
 8003684:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	431a      	orrs	r2, r3
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	431a      	orrs	r2, r3
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	4bab      	ldr	r3, [pc, #684]	@ (8003958 <UART_SetConfig+0x2dc>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	6812      	ldr	r2, [r2, #0]
 80036b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036b4:	430b      	orrs	r3, r1
 80036b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4aa0      	ldr	r2, [pc, #640]	@ (800395c <UART_SetConfig+0x2e0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d004      	beq.n	80036e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036e4:	4313      	orrs	r3, r2
 80036e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80036f2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	6812      	ldr	r2, [r2, #0]
 80036fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036fc:	430b      	orrs	r3, r1
 80036fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003706:	f023 010f 	bic.w	r1, r3, #15
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a91      	ldr	r2, [pc, #580]	@ (8003960 <UART_SetConfig+0x2e4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d125      	bne.n	800376c <UART_SetConfig+0xf0>
 8003720:	4b90      	ldr	r3, [pc, #576]	@ (8003964 <UART_SetConfig+0x2e8>)
 8003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003726:	f003 0303 	and.w	r3, r3, #3
 800372a:	2b03      	cmp	r3, #3
 800372c:	d81a      	bhi.n	8003764 <UART_SetConfig+0xe8>
 800372e:	a201      	add	r2, pc, #4	@ (adr r2, 8003734 <UART_SetConfig+0xb8>)
 8003730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003734:	08003745 	.word	0x08003745
 8003738:	08003755 	.word	0x08003755
 800373c:	0800374d 	.word	0x0800374d
 8003740:	0800375d 	.word	0x0800375d
 8003744:	2301      	movs	r3, #1
 8003746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800374a:	e0d6      	b.n	80038fa <UART_SetConfig+0x27e>
 800374c:	2302      	movs	r3, #2
 800374e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003752:	e0d2      	b.n	80038fa <UART_SetConfig+0x27e>
 8003754:	2304      	movs	r3, #4
 8003756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800375a:	e0ce      	b.n	80038fa <UART_SetConfig+0x27e>
 800375c:	2308      	movs	r3, #8
 800375e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003762:	e0ca      	b.n	80038fa <UART_SetConfig+0x27e>
 8003764:	2310      	movs	r3, #16
 8003766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800376a:	e0c6      	b.n	80038fa <UART_SetConfig+0x27e>
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a7d      	ldr	r2, [pc, #500]	@ (8003968 <UART_SetConfig+0x2ec>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d138      	bne.n	80037e8 <UART_SetConfig+0x16c>
 8003776:	4b7b      	ldr	r3, [pc, #492]	@ (8003964 <UART_SetConfig+0x2e8>)
 8003778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800377c:	f003 030c 	and.w	r3, r3, #12
 8003780:	2b0c      	cmp	r3, #12
 8003782:	d82d      	bhi.n	80037e0 <UART_SetConfig+0x164>
 8003784:	a201      	add	r2, pc, #4	@ (adr r2, 800378c <UART_SetConfig+0x110>)
 8003786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378a:	bf00      	nop
 800378c:	080037c1 	.word	0x080037c1
 8003790:	080037e1 	.word	0x080037e1
 8003794:	080037e1 	.word	0x080037e1
 8003798:	080037e1 	.word	0x080037e1
 800379c:	080037d1 	.word	0x080037d1
 80037a0:	080037e1 	.word	0x080037e1
 80037a4:	080037e1 	.word	0x080037e1
 80037a8:	080037e1 	.word	0x080037e1
 80037ac:	080037c9 	.word	0x080037c9
 80037b0:	080037e1 	.word	0x080037e1
 80037b4:	080037e1 	.word	0x080037e1
 80037b8:	080037e1 	.word	0x080037e1
 80037bc:	080037d9 	.word	0x080037d9
 80037c0:	2300      	movs	r3, #0
 80037c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037c6:	e098      	b.n	80038fa <UART_SetConfig+0x27e>
 80037c8:	2302      	movs	r3, #2
 80037ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037ce:	e094      	b.n	80038fa <UART_SetConfig+0x27e>
 80037d0:	2304      	movs	r3, #4
 80037d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037d6:	e090      	b.n	80038fa <UART_SetConfig+0x27e>
 80037d8:	2308      	movs	r3, #8
 80037da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037de:	e08c      	b.n	80038fa <UART_SetConfig+0x27e>
 80037e0:	2310      	movs	r3, #16
 80037e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037e6:	e088      	b.n	80038fa <UART_SetConfig+0x27e>
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a5f      	ldr	r2, [pc, #380]	@ (800396c <UART_SetConfig+0x2f0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d125      	bne.n	800383e <UART_SetConfig+0x1c2>
 80037f2:	4b5c      	ldr	r3, [pc, #368]	@ (8003964 <UART_SetConfig+0x2e8>)
 80037f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80037fc:	2b30      	cmp	r3, #48	@ 0x30
 80037fe:	d016      	beq.n	800382e <UART_SetConfig+0x1b2>
 8003800:	2b30      	cmp	r3, #48	@ 0x30
 8003802:	d818      	bhi.n	8003836 <UART_SetConfig+0x1ba>
 8003804:	2b20      	cmp	r3, #32
 8003806:	d00a      	beq.n	800381e <UART_SetConfig+0x1a2>
 8003808:	2b20      	cmp	r3, #32
 800380a:	d814      	bhi.n	8003836 <UART_SetConfig+0x1ba>
 800380c:	2b00      	cmp	r3, #0
 800380e:	d002      	beq.n	8003816 <UART_SetConfig+0x19a>
 8003810:	2b10      	cmp	r3, #16
 8003812:	d008      	beq.n	8003826 <UART_SetConfig+0x1aa>
 8003814:	e00f      	b.n	8003836 <UART_SetConfig+0x1ba>
 8003816:	2300      	movs	r3, #0
 8003818:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800381c:	e06d      	b.n	80038fa <UART_SetConfig+0x27e>
 800381e:	2302      	movs	r3, #2
 8003820:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003824:	e069      	b.n	80038fa <UART_SetConfig+0x27e>
 8003826:	2304      	movs	r3, #4
 8003828:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800382c:	e065      	b.n	80038fa <UART_SetConfig+0x27e>
 800382e:	2308      	movs	r3, #8
 8003830:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003834:	e061      	b.n	80038fa <UART_SetConfig+0x27e>
 8003836:	2310      	movs	r3, #16
 8003838:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800383c:	e05d      	b.n	80038fa <UART_SetConfig+0x27e>
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a4b      	ldr	r2, [pc, #300]	@ (8003970 <UART_SetConfig+0x2f4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d125      	bne.n	8003894 <UART_SetConfig+0x218>
 8003848:	4b46      	ldr	r3, [pc, #280]	@ (8003964 <UART_SetConfig+0x2e8>)
 800384a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800384e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003852:	2bc0      	cmp	r3, #192	@ 0xc0
 8003854:	d016      	beq.n	8003884 <UART_SetConfig+0x208>
 8003856:	2bc0      	cmp	r3, #192	@ 0xc0
 8003858:	d818      	bhi.n	800388c <UART_SetConfig+0x210>
 800385a:	2b80      	cmp	r3, #128	@ 0x80
 800385c:	d00a      	beq.n	8003874 <UART_SetConfig+0x1f8>
 800385e:	2b80      	cmp	r3, #128	@ 0x80
 8003860:	d814      	bhi.n	800388c <UART_SetConfig+0x210>
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <UART_SetConfig+0x1f0>
 8003866:	2b40      	cmp	r3, #64	@ 0x40
 8003868:	d008      	beq.n	800387c <UART_SetConfig+0x200>
 800386a:	e00f      	b.n	800388c <UART_SetConfig+0x210>
 800386c:	2300      	movs	r3, #0
 800386e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003872:	e042      	b.n	80038fa <UART_SetConfig+0x27e>
 8003874:	2302      	movs	r3, #2
 8003876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800387a:	e03e      	b.n	80038fa <UART_SetConfig+0x27e>
 800387c:	2304      	movs	r3, #4
 800387e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003882:	e03a      	b.n	80038fa <UART_SetConfig+0x27e>
 8003884:	2308      	movs	r3, #8
 8003886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800388a:	e036      	b.n	80038fa <UART_SetConfig+0x27e>
 800388c:	2310      	movs	r3, #16
 800388e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003892:	e032      	b.n	80038fa <UART_SetConfig+0x27e>
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a30      	ldr	r2, [pc, #192]	@ (800395c <UART_SetConfig+0x2e0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d12a      	bne.n	80038f4 <UART_SetConfig+0x278>
 800389e:	4b31      	ldr	r3, [pc, #196]	@ (8003964 <UART_SetConfig+0x2e8>)
 80038a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80038a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038ac:	d01a      	beq.n	80038e4 <UART_SetConfig+0x268>
 80038ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038b2:	d81b      	bhi.n	80038ec <UART_SetConfig+0x270>
 80038b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038b8:	d00c      	beq.n	80038d4 <UART_SetConfig+0x258>
 80038ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038be:	d815      	bhi.n	80038ec <UART_SetConfig+0x270>
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <UART_SetConfig+0x250>
 80038c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038c8:	d008      	beq.n	80038dc <UART_SetConfig+0x260>
 80038ca:	e00f      	b.n	80038ec <UART_SetConfig+0x270>
 80038cc:	2300      	movs	r3, #0
 80038ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038d2:	e012      	b.n	80038fa <UART_SetConfig+0x27e>
 80038d4:	2302      	movs	r3, #2
 80038d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038da:	e00e      	b.n	80038fa <UART_SetConfig+0x27e>
 80038dc:	2304      	movs	r3, #4
 80038de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038e2:	e00a      	b.n	80038fa <UART_SetConfig+0x27e>
 80038e4:	2308      	movs	r3, #8
 80038e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038ea:	e006      	b.n	80038fa <UART_SetConfig+0x27e>
 80038ec:	2310      	movs	r3, #16
 80038ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038f2:	e002      	b.n	80038fa <UART_SetConfig+0x27e>
 80038f4:	2310      	movs	r3, #16
 80038f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a17      	ldr	r2, [pc, #92]	@ (800395c <UART_SetConfig+0x2e0>)
 8003900:	4293      	cmp	r3, r2
 8003902:	f040 80a8 	bne.w	8003a56 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003906:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800390a:	2b08      	cmp	r3, #8
 800390c:	d834      	bhi.n	8003978 <UART_SetConfig+0x2fc>
 800390e:	a201      	add	r2, pc, #4	@ (adr r2, 8003914 <UART_SetConfig+0x298>)
 8003910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003914:	08003939 	.word	0x08003939
 8003918:	08003979 	.word	0x08003979
 800391c:	08003941 	.word	0x08003941
 8003920:	08003979 	.word	0x08003979
 8003924:	08003947 	.word	0x08003947
 8003928:	08003979 	.word	0x08003979
 800392c:	08003979 	.word	0x08003979
 8003930:	08003979 	.word	0x08003979
 8003934:	0800394f 	.word	0x0800394f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003938:	f7fe fece 	bl	80026d8 <HAL_RCC_GetPCLK1Freq>
 800393c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800393e:	e021      	b.n	8003984 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003940:	4b0c      	ldr	r3, [pc, #48]	@ (8003974 <UART_SetConfig+0x2f8>)
 8003942:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003944:	e01e      	b.n	8003984 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003946:	f7fe fe59 	bl	80025fc <HAL_RCC_GetSysClockFreq>
 800394a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800394c:	e01a      	b.n	8003984 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800394e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003952:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003954:	e016      	b.n	8003984 <UART_SetConfig+0x308>
 8003956:	bf00      	nop
 8003958:	cfff69f3 	.word	0xcfff69f3
 800395c:	40008000 	.word	0x40008000
 8003960:	40013800 	.word	0x40013800
 8003964:	40021000 	.word	0x40021000
 8003968:	40004400 	.word	0x40004400
 800396c:	40004800 	.word	0x40004800
 8003970:	40004c00 	.word	0x40004c00
 8003974:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003982:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 812a 	beq.w	8003be0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003990:	4a9e      	ldr	r2, [pc, #632]	@ (8003c0c <UART_SetConfig+0x590>)
 8003992:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003996:	461a      	mov	r2, r3
 8003998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399a:	fbb3 f3f2 	udiv	r3, r3, r2
 800399e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	4413      	add	r3, r2
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d305      	bcc.n	80039bc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d903      	bls.n	80039c4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80039c2:	e10d      	b.n	8003be0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c6:	2200      	movs	r2, #0
 80039c8:	60bb      	str	r3, [r7, #8]
 80039ca:	60fa      	str	r2, [r7, #12]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	4a8e      	ldr	r2, [pc, #568]	@ (8003c0c <UART_SetConfig+0x590>)
 80039d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	2200      	movs	r2, #0
 80039da:	603b      	str	r3, [r7, #0]
 80039dc:	607a      	str	r2, [r7, #4]
 80039de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80039e6:	f7fc fc17 	bl	8000218 <__aeabi_uldivmod>
 80039ea:	4602      	mov	r2, r0
 80039ec:	460b      	mov	r3, r1
 80039ee:	4610      	mov	r0, r2
 80039f0:	4619      	mov	r1, r3
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	f04f 0300 	mov.w	r3, #0
 80039fa:	020b      	lsls	r3, r1, #8
 80039fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003a00:	0202      	lsls	r2, r0, #8
 8003a02:	6979      	ldr	r1, [r7, #20]
 8003a04:	6849      	ldr	r1, [r1, #4]
 8003a06:	0849      	lsrs	r1, r1, #1
 8003a08:	2000      	movs	r0, #0
 8003a0a:	460c      	mov	r4, r1
 8003a0c:	4605      	mov	r5, r0
 8003a0e:	eb12 0804 	adds.w	r8, r2, r4
 8003a12:	eb43 0905 	adc.w	r9, r3, r5
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	469a      	mov	sl, r3
 8003a1e:	4693      	mov	fp, r2
 8003a20:	4652      	mov	r2, sl
 8003a22:	465b      	mov	r3, fp
 8003a24:	4640      	mov	r0, r8
 8003a26:	4649      	mov	r1, r9
 8003a28:	f7fc fbf6 	bl	8000218 <__aeabi_uldivmod>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4613      	mov	r3, r2
 8003a32:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a3a:	d308      	bcc.n	8003a4e <UART_SetConfig+0x3d2>
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a42:	d204      	bcs.n	8003a4e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6a3a      	ldr	r2, [r7, #32]
 8003a4a:	60da      	str	r2, [r3, #12]
 8003a4c:	e0c8      	b.n	8003be0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003a54:	e0c4      	b.n	8003be0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a5e:	d167      	bne.n	8003b30 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003a60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d828      	bhi.n	8003aba <UART_SetConfig+0x43e>
 8003a68:	a201      	add	r2, pc, #4	@ (adr r2, 8003a70 <UART_SetConfig+0x3f4>)
 8003a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6e:	bf00      	nop
 8003a70:	08003a95 	.word	0x08003a95
 8003a74:	08003a9d 	.word	0x08003a9d
 8003a78:	08003aa5 	.word	0x08003aa5
 8003a7c:	08003abb 	.word	0x08003abb
 8003a80:	08003aab 	.word	0x08003aab
 8003a84:	08003abb 	.word	0x08003abb
 8003a88:	08003abb 	.word	0x08003abb
 8003a8c:	08003abb 	.word	0x08003abb
 8003a90:	08003ab3 	.word	0x08003ab3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a94:	f7fe fe20 	bl	80026d8 <HAL_RCC_GetPCLK1Freq>
 8003a98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a9a:	e014      	b.n	8003ac6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a9c:	f7fe fe32 	bl	8002704 <HAL_RCC_GetPCLK2Freq>
 8003aa0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003aa2:	e010      	b.n	8003ac6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aa4:	4b5a      	ldr	r3, [pc, #360]	@ (8003c10 <UART_SetConfig+0x594>)
 8003aa6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003aa8:	e00d      	b.n	8003ac6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aaa:	f7fe fda7 	bl	80025fc <HAL_RCC_GetSysClockFreq>
 8003aae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ab0:	e009      	b.n	8003ac6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ab2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ab6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ab8:	e005      	b.n	8003ac6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003ac4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 8089 	beq.w	8003be0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad2:	4a4e      	ldr	r2, [pc, #312]	@ (8003c0c <UART_SetConfig+0x590>)
 8003ad4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003adc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ae0:	005a      	lsls	r2, r3, #1
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	085b      	lsrs	r3, r3, #1
 8003ae8:	441a      	add	r2, r3
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	2b0f      	cmp	r3, #15
 8003af8:	d916      	bls.n	8003b28 <UART_SetConfig+0x4ac>
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b00:	d212      	bcs.n	8003b28 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	f023 030f 	bic.w	r3, r3, #15
 8003b0a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	085b      	lsrs	r3, r3, #1
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	8bfb      	ldrh	r3, [r7, #30]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	8bfa      	ldrh	r2, [r7, #30]
 8003b24:	60da      	str	r2, [r3, #12]
 8003b26:	e05b      	b.n	8003be0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003b2e:	e057      	b.n	8003be0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b30:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d828      	bhi.n	8003b8a <UART_SetConfig+0x50e>
 8003b38:	a201      	add	r2, pc, #4	@ (adr r2, 8003b40 <UART_SetConfig+0x4c4>)
 8003b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3e:	bf00      	nop
 8003b40:	08003b65 	.word	0x08003b65
 8003b44:	08003b6d 	.word	0x08003b6d
 8003b48:	08003b75 	.word	0x08003b75
 8003b4c:	08003b8b 	.word	0x08003b8b
 8003b50:	08003b7b 	.word	0x08003b7b
 8003b54:	08003b8b 	.word	0x08003b8b
 8003b58:	08003b8b 	.word	0x08003b8b
 8003b5c:	08003b8b 	.word	0x08003b8b
 8003b60:	08003b83 	.word	0x08003b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b64:	f7fe fdb8 	bl	80026d8 <HAL_RCC_GetPCLK1Freq>
 8003b68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b6a:	e014      	b.n	8003b96 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b6c:	f7fe fdca 	bl	8002704 <HAL_RCC_GetPCLK2Freq>
 8003b70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b72:	e010      	b.n	8003b96 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b74:	4b26      	ldr	r3, [pc, #152]	@ (8003c10 <UART_SetConfig+0x594>)
 8003b76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b78:	e00d      	b.n	8003b96 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b7a:	f7fe fd3f 	bl	80025fc <HAL_RCC_GetSysClockFreq>
 8003b7e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b80:	e009      	b.n	8003b96 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b88:	e005      	b.n	8003b96 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003b94:	bf00      	nop
    }

    if (pclk != 0U)
 8003b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d021      	beq.n	8003be0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba0:	4a1a      	ldr	r2, [pc, #104]	@ (8003c0c <UART_SetConfig+0x590>)
 8003ba2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003baa:	fbb3 f2f2 	udiv	r2, r3, r2
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	085b      	lsrs	r3, r3, #1
 8003bb4:	441a      	add	r2, r3
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bbe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	2b0f      	cmp	r3, #15
 8003bc4:	d909      	bls.n	8003bda <UART_SetConfig+0x55e>
 8003bc6:	6a3b      	ldr	r3, [r7, #32]
 8003bc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bcc:	d205      	bcs.n	8003bda <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	60da      	str	r2, [r3, #12]
 8003bd8:	e002      	b.n	8003be0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003bfc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3730      	adds	r7, #48	@ 0x30
 8003c04:	46bd      	mov	sp, r7
 8003c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c0a:	bf00      	nop
 8003c0c:	08004358 	.word	0x08004358
 8003c10:	00f42400 	.word	0x00f42400

08003c14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00a      	beq.n	8003c3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ca8:	f003 0310 	and.w	r3, r3, #16
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cca:	f003 0320 	and.w	r3, r3, #32
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d01a      	beq.n	8003d2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d12:	d10a      	bne.n	8003d2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	605a      	str	r2, [r3, #4]
  }
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b098      	sub	sp, #96	@ 0x60
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d68:	f7fd fc1e 	bl	80015a8 <HAL_GetTick>
 8003d6c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0308 	and.w	r3, r3, #8
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	d12f      	bne.n	8003ddc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d84:	2200      	movs	r2, #0
 8003d86:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 f88e 	bl	8003eac <UART_WaitOnFlagUntilTimeout>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d022      	beq.n	8003ddc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d9e:	e853 3f00 	ldrex	r3, [r3]
 8003da2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003da6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003daa:	653b      	str	r3, [r7, #80]	@ 0x50
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	461a      	mov	r2, r3
 8003db2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003db4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003db6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003dba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003dbc:	e841 2300 	strex	r3, r2, [r1]
 8003dc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003dc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1e6      	bne.n	8003d96 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e063      	b.n	8003ea4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0304 	and.w	r3, r3, #4
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d149      	bne.n	8003e7e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003df2:	2200      	movs	r2, #0
 8003df4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f857 	bl	8003eac <UART_WaitOnFlagUntilTimeout>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d03c      	beq.n	8003e7e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0c:	e853 3f00 	ldrex	r3, [r3]
 8003e10:	623b      	str	r3, [r7, #32]
   return(result);
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e22:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e24:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e2a:	e841 2300 	strex	r3, r2, [r1]
 8003e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1e6      	bne.n	8003e04 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3308      	adds	r3, #8
 8003e3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	e853 3f00 	ldrex	r3, [r3]
 8003e44:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f023 0301 	bic.w	r3, r3, #1
 8003e4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	3308      	adds	r3, #8
 8003e54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e56:	61fa      	str	r2, [r7, #28]
 8003e58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5a:	69b9      	ldr	r1, [r7, #24]
 8003e5c:	69fa      	ldr	r2, [r7, #28]
 8003e5e:	e841 2300 	strex	r3, r2, [r1]
 8003e62:	617b      	str	r3, [r7, #20]
   return(result);
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1e5      	bne.n	8003e36 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e012      	b.n	8003ea4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2220      	movs	r2, #32
 8003e82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3758      	adds	r7, #88	@ 0x58
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	603b      	str	r3, [r7, #0]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ebc:	e04f      	b.n	8003f5e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec4:	d04b      	beq.n	8003f5e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec6:	f7fd fb6f 	bl	80015a8 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d302      	bcc.n	8003edc <UART_WaitOnFlagUntilTimeout+0x30>
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d101      	bne.n	8003ee0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e04e      	b.n	8003f7e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d037      	beq.n	8003f5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2b80      	cmp	r3, #128	@ 0x80
 8003ef2:	d034      	beq.n	8003f5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b40      	cmp	r3, #64	@ 0x40
 8003ef8:	d031      	beq.n	8003f5e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	f003 0308 	and.w	r3, r3, #8
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d110      	bne.n	8003f2a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2208      	movs	r2, #8
 8003f0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 f838 	bl	8003f86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2208      	movs	r2, #8
 8003f1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e029      	b.n	8003f7e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f38:	d111      	bne.n	8003f5e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 f81e 	bl	8003f86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e00f      	b.n	8003f7e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	69da      	ldr	r2, [r3, #28]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4013      	ands	r3, r2
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	bf0c      	ite	eq
 8003f6e:	2301      	moveq	r3, #1
 8003f70:	2300      	movne	r3, #0
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	461a      	mov	r2, r3
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d0a0      	beq.n	8003ebe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b095      	sub	sp, #84	@ 0x54
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f96:	e853 3f00 	ldrex	r3, [r3]
 8003f9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fac:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003fb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003fb4:	e841 2300 	strex	r3, r2, [r1]
 8003fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1e6      	bne.n	8003f8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	e853 3f00 	ldrex	r3, [r3]
 8003fce:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fd6:	f023 0301 	bic.w	r3, r3, #1
 8003fda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3308      	adds	r3, #8
 8003fe2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fe4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fec:	e841 2300 	strex	r3, r2, [r1]
 8003ff0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1e3      	bne.n	8003fc0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d118      	bne.n	8004032 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	e853 3f00 	ldrex	r3, [r3]
 800400c:	60bb      	str	r3, [r7, #8]
   return(result);
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f023 0310 	bic.w	r3, r3, #16
 8004014:	647b      	str	r3, [r7, #68]	@ 0x44
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	461a      	mov	r2, r3
 800401c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800401e:	61bb      	str	r3, [r7, #24]
 8004020:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004022:	6979      	ldr	r1, [r7, #20]
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	e841 2300 	strex	r3, r2, [r1]
 800402a:	613b      	str	r3, [r7, #16]
   return(result);
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1e6      	bne.n	8004000 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2220      	movs	r2, #32
 8004036:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004046:	bf00      	nop
 8004048:	3754      	adds	r7, #84	@ 0x54
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004052:	b480      	push	{r7}
 8004054:	b085      	sub	sp, #20
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_UARTEx_DisableFifoMode+0x16>
 8004064:	2302      	movs	r3, #2
 8004066:	e027      	b.n	80040b8 <HAL_UARTEx_DisableFifoMode+0x66>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2224      	movs	r2, #36	@ 0x24
 8004074:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0201 	bic.w	r2, r2, #1
 800408e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004096:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2220      	movs	r2, #32
 80040aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3714      	adds	r7, #20
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d101      	bne.n	80040dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80040d8:	2302      	movs	r3, #2
 80040da:	e02d      	b.n	8004138 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2224      	movs	r2, #36	@ 0x24
 80040e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0201 	bic.w	r2, r2, #1
 8004102:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f84f 	bl	80041bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2220      	movs	r2, #32
 800412a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004154:	2302      	movs	r3, #2
 8004156:	e02d      	b.n	80041b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2224      	movs	r2, #36	@ 0x24
 8004164:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0201 	bic.w	r2, r2, #1
 800417e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f811 	bl	80041bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d108      	bne.n	80041de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80041dc:	e031      	b.n	8004242 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80041de:	2308      	movs	r3, #8
 80041e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80041e2:	2308      	movs	r3, #8
 80041e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	0e5b      	lsrs	r3, r3, #25
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	0f5b      	lsrs	r3, r3, #29
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004206:	7bbb      	ldrb	r3, [r7, #14]
 8004208:	7b3a      	ldrb	r2, [r7, #12]
 800420a:	4911      	ldr	r1, [pc, #68]	@ (8004250 <UARTEx_SetNbDataToProcess+0x94>)
 800420c:	5c8a      	ldrb	r2, [r1, r2]
 800420e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004212:	7b3a      	ldrb	r2, [r7, #12]
 8004214:	490f      	ldr	r1, [pc, #60]	@ (8004254 <UARTEx_SetNbDataToProcess+0x98>)
 8004216:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004218:	fb93 f3f2 	sdiv	r3, r3, r2
 800421c:	b29a      	uxth	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	7b7a      	ldrb	r2, [r7, #13]
 8004228:	4909      	ldr	r1, [pc, #36]	@ (8004250 <UARTEx_SetNbDataToProcess+0x94>)
 800422a:	5c8a      	ldrb	r2, [r1, r2]
 800422c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004230:	7b7a      	ldrb	r2, [r7, #13]
 8004232:	4908      	ldr	r1, [pc, #32]	@ (8004254 <UARTEx_SetNbDataToProcess+0x98>)
 8004234:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004236:	fb93 f3f2 	sdiv	r3, r3, r2
 800423a:	b29a      	uxth	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004242:	bf00      	nop
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	08004370 	.word	0x08004370
 8004254:	08004378 	.word	0x08004378

08004258 <memset>:
 8004258:	4402      	add	r2, r0
 800425a:	4603      	mov	r3, r0
 800425c:	4293      	cmp	r3, r2
 800425e:	d100      	bne.n	8004262 <memset+0xa>
 8004260:	4770      	bx	lr
 8004262:	f803 1b01 	strb.w	r1, [r3], #1
 8004266:	e7f9      	b.n	800425c <memset+0x4>

08004268 <__libc_init_array>:
 8004268:	b570      	push	{r4, r5, r6, lr}
 800426a:	4d0d      	ldr	r5, [pc, #52]	@ (80042a0 <__libc_init_array+0x38>)
 800426c:	4c0d      	ldr	r4, [pc, #52]	@ (80042a4 <__libc_init_array+0x3c>)
 800426e:	1b64      	subs	r4, r4, r5
 8004270:	10a4      	asrs	r4, r4, #2
 8004272:	2600      	movs	r6, #0
 8004274:	42a6      	cmp	r6, r4
 8004276:	d109      	bne.n	800428c <__libc_init_array+0x24>
 8004278:	4d0b      	ldr	r5, [pc, #44]	@ (80042a8 <__libc_init_array+0x40>)
 800427a:	4c0c      	ldr	r4, [pc, #48]	@ (80042ac <__libc_init_array+0x44>)
 800427c:	f000 f818 	bl	80042b0 <_init>
 8004280:	1b64      	subs	r4, r4, r5
 8004282:	10a4      	asrs	r4, r4, #2
 8004284:	2600      	movs	r6, #0
 8004286:	42a6      	cmp	r6, r4
 8004288:	d105      	bne.n	8004296 <__libc_init_array+0x2e>
 800428a:	bd70      	pop	{r4, r5, r6, pc}
 800428c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004290:	4798      	blx	r3
 8004292:	3601      	adds	r6, #1
 8004294:	e7ee      	b.n	8004274 <__libc_init_array+0xc>
 8004296:	f855 3b04 	ldr.w	r3, [r5], #4
 800429a:	4798      	blx	r3
 800429c:	3601      	adds	r6, #1
 800429e:	e7f2      	b.n	8004286 <__libc_init_array+0x1e>
 80042a0:	08004388 	.word	0x08004388
 80042a4:	08004388 	.word	0x08004388
 80042a8:	08004388 	.word	0x08004388
 80042ac:	0800438c 	.word	0x0800438c

080042b0 <_init>:
 80042b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b2:	bf00      	nop
 80042b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042b6:	bc08      	pop	{r3}
 80042b8:	469e      	mov	lr, r3
 80042ba:	4770      	bx	lr

080042bc <_fini>:
 80042bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042be:	bf00      	nop
 80042c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042c2:	bc08      	pop	{r3}
 80042c4:	469e      	mov	lr, r3
 80042c6:	4770      	bx	lr


GameinatorB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055e4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  080057c4  080057c4  000067c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a80  08005a80  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  08005a80  08005a80  00006a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a88  08005a88  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a88  08005a88  00006a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a8c  08005a8c  00006a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005a90  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000504  20000070  08005b00  00007070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000574  08005b00  00007574  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f74d  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002497  00000000  00000000  000167ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  00018c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f7  00000000  00000000  00019988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e705  00000000  00000000  0001a37f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c53  00000000  00000000  00038a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bac1a  00000000  00000000  000496d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001042f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ec8  00000000  00000000  00104334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001081fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	080057ac 	.word	0x080057ac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	080057ac 	.word	0x080057ac

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <interpreter>:
char command[MAX_COMMAND_LEN];
char field1[MAX_FIELD_LEN];
char field2[MAX_FIELD_LEN];

void interpreter(uint8_t *Rx_Data)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	char *data = (char *)Rx_Data;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	60fb      	str	r3, [r7, #12]
	char *token;
	int tokenIndex = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]

	token = strtok(data, " ");
 80005e0:	4929      	ldr	r1, [pc, #164]	@ (8000688 <interpreter+0xb8>)
 80005e2:	68f8      	ldr	r0, [r7, #12]
 80005e4:	f004 f9f4 	bl	80049d0 <strtok>
 80005e8:	6178      	str	r0, [r7, #20]
	while (token!=NULL)
 80005ea:	e03a      	b.n	8000662 <interpreter+0x92>
	{
		switch (tokenIndex)
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	2b03      	cmp	r3, #3
 80005f0:	d82e      	bhi.n	8000650 <interpreter+0x80>
 80005f2:	a201      	add	r2, pc, #4	@ (adr r2, 80005f8 <interpreter+0x28>)
 80005f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f8:	08000609 	.word	0x08000609
 80005fc:	0800061b 	.word	0x0800061b
 8000600:	0800062d 	.word	0x0800062d
 8000604:	0800063f 	.word	0x0800063f
		{
			case 0:
				strncpy(boardid, token, MAX_ID_LEN - 1);
 8000608:	2213      	movs	r2, #19
 800060a:	6979      	ldr	r1, [r7, #20]
 800060c:	481f      	ldr	r0, [pc, #124]	@ (800068c <interpreter+0xbc>)
 800060e:	f004 f9cc 	bl	80049aa <strncpy>
				boardid[MAX_ID_LEN-1]='\0';
 8000612:	4b1e      	ldr	r3, [pc, #120]	@ (800068c <interpreter+0xbc>)
 8000614:	2200      	movs	r2, #0
 8000616:	74da      	strb	r2, [r3, #19]
				break;
 8000618:	e01b      	b.n	8000652 <interpreter+0x82>
			case 1:
				strncpy(command, token, MAX_COMMAND_LEN - 1);
 800061a:	2213      	movs	r2, #19
 800061c:	6979      	ldr	r1, [r7, #20]
 800061e:	481c      	ldr	r0, [pc, #112]	@ (8000690 <interpreter+0xc0>)
 8000620:	f004 f9c3 	bl	80049aa <strncpy>
				command[MAX_COMMAND_LEN-1]='\0';
 8000624:	4b1a      	ldr	r3, [pc, #104]	@ (8000690 <interpreter+0xc0>)
 8000626:	2200      	movs	r2, #0
 8000628:	74da      	strb	r2, [r3, #19]
				break;
 800062a:	e012      	b.n	8000652 <interpreter+0x82>
			case 2:
				strncpy(field1, token, MAX_FIELD_LEN -1);
 800062c:	2213      	movs	r2, #19
 800062e:	6979      	ldr	r1, [r7, #20]
 8000630:	4818      	ldr	r0, [pc, #96]	@ (8000694 <interpreter+0xc4>)
 8000632:	f004 f9ba 	bl	80049aa <strncpy>
				field1[MAX_FIELD_LEN-1]='\0';
 8000636:	4b17      	ldr	r3, [pc, #92]	@ (8000694 <interpreter+0xc4>)
 8000638:	2200      	movs	r2, #0
 800063a:	74da      	strb	r2, [r3, #19]
				break;
 800063c:	e009      	b.n	8000652 <interpreter+0x82>
			case 3:
				strncpy(field2, token, MAX_FIELD_LEN -1);
 800063e:	2213      	movs	r2, #19
 8000640:	6979      	ldr	r1, [r7, #20]
 8000642:	4815      	ldr	r0, [pc, #84]	@ (8000698 <interpreter+0xc8>)
 8000644:	f004 f9b1 	bl	80049aa <strncpy>
				field2[MAX_FIELD_LEN-1]='\0';
 8000648:	4b13      	ldr	r3, [pc, #76]	@ (8000698 <interpreter+0xc8>)
 800064a:	2200      	movs	r2, #0
 800064c:	74da      	strb	r2, [r3, #19]
				break;
 800064e:	e000      	b.n	8000652 <interpreter+0x82>
			default:
				break;
 8000650:	bf00      	nop
		}
		token = strtok(NULL," ");
 8000652:	490d      	ldr	r1, [pc, #52]	@ (8000688 <interpreter+0xb8>)
 8000654:	2000      	movs	r0, #0
 8000656:	f004 f9bb 	bl	80049d0 <strtok>
 800065a:	6178      	str	r0, [r7, #20]
		tokenIndex++;
 800065c:	693b      	ldr	r3, [r7, #16]
 800065e:	3301      	adds	r3, #1
 8000660:	613b      	str	r3, [r7, #16]
	while (token!=NULL)
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1c1      	bne.n	80005ec <interpreter+0x1c>
	}

	if(strcmp(boardid,"B1")==0)
 8000668:	490c      	ldr	r1, [pc, #48]	@ (800069c <interpreter+0xcc>)
 800066a:	4808      	ldr	r0, [pc, #32]	@ (800068c <interpreter+0xbc>)
 800066c:	f7ff fdd8 	bl	8000220 <strcmp>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d104      	bne.n	8000680 <interpreter+0xb0>
	{
		decider(command,field1,field2);
 8000676:	4a08      	ldr	r2, [pc, #32]	@ (8000698 <interpreter+0xc8>)
 8000678:	4906      	ldr	r1, [pc, #24]	@ (8000694 <interpreter+0xc4>)
 800067a:	4805      	ldr	r0, [pc, #20]	@ (8000690 <interpreter+0xc0>)
 800067c:	f000 f810 	bl	80006a0 <decider>
	}
}
 8000680:	bf00      	nop
 8000682:	3718      	adds	r7, #24
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	080057c4 	.word	0x080057c4
 800068c:	2000008c 	.word	0x2000008c
 8000690:	200000a0 	.word	0x200000a0
 8000694:	200000b4 	.word	0x200000b4
 8000698:	200000c8 	.word	0x200000c8
 800069c:	080057c8 	.word	0x080057c8

080006a0 <decider>:

void decider(char *command,char *field1,char *field2)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
	if(strcmp(command,"SETLED")==0)
 80006ac:	4907      	ldr	r1, [pc, #28]	@ (80006cc <decider+0x2c>)
 80006ae:	68f8      	ldr	r0, [r7, #12]
 80006b0:	f7ff fdb6 	bl	8000220 <strcmp>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d103      	bne.n	80006c2 <decider+0x22>
	{
		ledsetter(field1, field2);
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	68b8      	ldr	r0, [r7, #8]
 80006be:	f000 f807 	bl	80006d0 <ledsetter>
	}
}
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	080057cc 	.word	0x080057cc

080006d0 <ledsetter>:

void ledsetter(char *field1,char *field2)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
	int index = atoi(field1);
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f003 ffd0 	bl	8004680 <atoi>
 80006e0:	60f8      	str	r0, [r7, #12]

	if(strcmp(field2,"R")==0)
 80006e2:	4921      	ldr	r1, [pc, #132]	@ (8000768 <ledsetter+0x98>)
 80006e4:	6838      	ldr	r0, [r7, #0]
 80006e6:	f7ff fd9b 	bl	8000220 <strcmp>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d108      	bne.n	8000702 <ledsetter+0x32>
	{
		setLED(index, 80, 0, 0);
 80006f0:	2300      	movs	r3, #0
 80006f2:	2200      	movs	r2, #0
 80006f4:	2150      	movs	r1, #80	@ 0x50
 80006f6:	68f8      	ldr	r0, [r7, #12]
 80006f8:	f000 f83e 	bl	8000778 <setLED>
		WS2812_Send();
 80006fc:	f000 f8aa 	bl	8000854 <WS2812_Send>
	{
		setLED(index, 80, 80, 0);
		WS2812_Send();
	}

}
 8000700:	e02e      	b.n	8000760 <ledsetter+0x90>
	else if(strcmp(field2,"G")==0)
 8000702:	491a      	ldr	r1, [pc, #104]	@ (800076c <ledsetter+0x9c>)
 8000704:	6838      	ldr	r0, [r7, #0]
 8000706:	f7ff fd8b 	bl	8000220 <strcmp>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d108      	bne.n	8000722 <ledsetter+0x52>
		setLED(index, 0, 80, 0);
 8000710:	2300      	movs	r3, #0
 8000712:	2250      	movs	r2, #80	@ 0x50
 8000714:	2100      	movs	r1, #0
 8000716:	68f8      	ldr	r0, [r7, #12]
 8000718:	f000 f82e 	bl	8000778 <setLED>
		WS2812_Send();
 800071c:	f000 f89a 	bl	8000854 <WS2812_Send>
}
 8000720:	e01e      	b.n	8000760 <ledsetter+0x90>
	else if(strcmp(field2,"B")==0)
 8000722:	4913      	ldr	r1, [pc, #76]	@ (8000770 <ledsetter+0xa0>)
 8000724:	6838      	ldr	r0, [r7, #0]
 8000726:	f7ff fd7b 	bl	8000220 <strcmp>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d108      	bne.n	8000742 <ledsetter+0x72>
		setLED(index, 0, 0, 80);
 8000730:	2350      	movs	r3, #80	@ 0x50
 8000732:	2200      	movs	r2, #0
 8000734:	2100      	movs	r1, #0
 8000736:	68f8      	ldr	r0, [r7, #12]
 8000738:	f000 f81e 	bl	8000778 <setLED>
		WS2812_Send();
 800073c:	f000 f88a 	bl	8000854 <WS2812_Send>
}
 8000740:	e00e      	b.n	8000760 <ledsetter+0x90>
	else if(strcmp(field2,"Y")==0)
 8000742:	490c      	ldr	r1, [pc, #48]	@ (8000774 <ledsetter+0xa4>)
 8000744:	6838      	ldr	r0, [r7, #0]
 8000746:	f7ff fd6b 	bl	8000220 <strcmp>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d107      	bne.n	8000760 <ledsetter+0x90>
		setLED(index, 80, 80, 0);
 8000750:	2300      	movs	r3, #0
 8000752:	2250      	movs	r2, #80	@ 0x50
 8000754:	2150      	movs	r1, #80	@ 0x50
 8000756:	68f8      	ldr	r0, [r7, #12]
 8000758:	f000 f80e 	bl	8000778 <setLED>
		WS2812_Send();
 800075c:	f000 f87a 	bl	8000854 <WS2812_Send>
}
 8000760:	bf00      	nop
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	080057d4 	.word	0x080057d4
 800076c:	080057d8 	.word	0x080057d8
 8000770:	080057dc 	.word	0x080057dc
 8000774:	080057e0 	.word	0x080057e0

08000778 <setLED>:

extern SPI_HandleTypeDef hspi1;


void setLED (int led, int RED, int GREEN, int BLUE)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
 8000784:	603b      	str	r3, [r7, #0]
	LED_Data[led][0] = led;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	b2d9      	uxtb	r1, r3
 800078a:	4a11      	ldr	r2, [pc, #68]	@ (80007d0 <setLED+0x58>)
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[led][1] = GREEN;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	b2d9      	uxtb	r1, r3
 8000796:	4a0e      	ldr	r2, [pc, #56]	@ (80007d0 <setLED+0x58>)
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	4413      	add	r3, r2
 800079e:	460a      	mov	r2, r1
 80007a0:	705a      	strb	r2, [r3, #1]
	LED_Data[led][2] = RED;
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	b2d9      	uxtb	r1, r3
 80007a6:	4a0a      	ldr	r2, [pc, #40]	@ (80007d0 <setLED+0x58>)
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	4413      	add	r3, r2
 80007ae:	460a      	mov	r2, r1
 80007b0:	709a      	strb	r2, [r3, #2]
	LED_Data[led][3] = BLUE;
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	b2d9      	uxtb	r1, r3
 80007b6:	4a06      	ldr	r2, [pc, #24]	@ (80007d0 <setLED+0x58>)
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	4413      	add	r3, r2
 80007be:	460a      	mov	r2, r1
 80007c0:	70da      	strb	r2, [r3, #3]
}
 80007c2:	bf00      	nop
 80007c4:	3714      	adds	r7, #20
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	200000dc 	.word	0x200000dc

080007d4 <ws2812_spi>:


void ws2812_spi (int GREEN, int RED, int BLUE)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08e      	sub	sp, #56	@ 0x38
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
	uint32_t color = GREEN<<16 | RED<<8 | BLUE;
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	041a      	lsls	r2, r3, #16
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	021b      	lsls	r3, r3, #8
 80007e8:	431a      	orrs	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4313      	orrs	r3, r2
 80007ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint8_t sendData[24];
	int indx = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	637b      	str	r3, [r7, #52]	@ 0x34

	for (int i = 23; i>=0; i--)
 80007f4:	2317      	movs	r3, #23
 80007f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80007f8:	e01b      	b.n	8000832 <ws2812_spi+0x5e>
	{
		if (((color>>i)&0x01) == 1) sendData[indx++] = 0b110;
 80007fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80007fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007fe:	fa22 f303 	lsr.w	r3, r2, r3
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	2b00      	cmp	r3, #0
 8000808:	d008      	beq.n	800081c <ws2812_spi+0x48>
 800080a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800080c:	1c5a      	adds	r2, r3, #1
 800080e:	637a      	str	r2, [r7, #52]	@ 0x34
 8000810:	3338      	adds	r3, #56	@ 0x38
 8000812:	443b      	add	r3, r7
 8000814:	2206      	movs	r2, #6
 8000816:	f803 2c24 	strb.w	r2, [r3, #-36]
 800081a:	e007      	b.n	800082c <ws2812_spi+0x58>
		else sendData[indx++] = 0b100;
 800081c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800081e:	1c5a      	adds	r2, r3, #1
 8000820:	637a      	str	r2, [r7, #52]	@ 0x34
 8000822:	3338      	adds	r3, #56	@ 0x38
 8000824:	443b      	add	r3, r7
 8000826:	2204      	movs	r2, #4
 8000828:	f803 2c24 	strb.w	r2, [r3, #-36]
	for (int i = 23; i>=0; i--)
 800082c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800082e:	3b01      	subs	r3, #1
 8000830:	633b      	str	r3, [r7, #48]	@ 0x30
 8000832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000834:	2b00      	cmp	r3, #0
 8000836:	dae0      	bge.n	80007fa <ws2812_spi+0x26>
	}

	HAL_SPI_Transmit(&hspi1, sendData, 24, 1000);
 8000838:	f107 0114 	add.w	r1, r7, #20
 800083c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000840:	2218      	movs	r2, #24
 8000842:	4803      	ldr	r0, [pc, #12]	@ (8000850 <ws2812_spi+0x7c>)
 8000844:	f002 fba1 	bl	8002f8a <HAL_SPI_Transmit>
}
 8000848:	bf00      	nop
 800084a:	3738      	adds	r7, #56	@ 0x38
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000118 	.word	0x20000118

08000854 <WS2812_Send>:

void WS2812_Send (void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
	for (int i=0; i<NUM_LED; i++)
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	e016      	b.n	800088e <WS2812_Send+0x3a>
	{
		ws2812_spi(LED_Data[i][1],LED_Data[i][2],LED_Data[i][3]);
 8000860:	4a10      	ldr	r2, [pc, #64]	@ (80008a4 <WS2812_Send+0x50>)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	4413      	add	r3, r2
 8000868:	785b      	ldrb	r3, [r3, #1]
 800086a:	4618      	mov	r0, r3
 800086c:	4a0d      	ldr	r2, [pc, #52]	@ (80008a4 <WS2812_Send+0x50>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	4413      	add	r3, r2
 8000874:	789b      	ldrb	r3, [r3, #2]
 8000876:	4619      	mov	r1, r3
 8000878:	4a0a      	ldr	r2, [pc, #40]	@ (80008a4 <WS2812_Send+0x50>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	4413      	add	r3, r2
 8000880:	78db      	ldrb	r3, [r3, #3]
 8000882:	461a      	mov	r2, r3
 8000884:	f7ff ffa6 	bl	80007d4 <ws2812_spi>
	for (int i=0; i<NUM_LED; i++)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3301      	adds	r3, #1
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2b0e      	cmp	r3, #14
 8000892:	dde5      	ble.n	8000860 <WS2812_Send+0xc>
	}
	HAL_Delay (1);
 8000894:	2001      	movs	r0, #1
 8000896:	f000 ffdf 	bl	8001858 <HAL_Delay>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200000dc 	.word	0x200000dc

080008a8 <FreeUARTBuffer>:
  * @brief  The application entry point.
  * @retval int
  */

void FreeUARTBuffer(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
    // Step 1: Abort UART communication
    HAL_UART_Abort(&huart2);
 80008ac:	4809      	ldr	r0, [pc, #36]	@ (80008d4 <FreeUARTBuffer+0x2c>)
 80008ae:	f002 ffeb 	bl	8003888 <HAL_UART_Abort>

    // Step 2: Clear any application-level buffers
    // Example: Assuming you have an Rx buffer
    memset(RxBuffer, 0, sizeof(RxBuffer));
 80008b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008b6:	2100      	movs	r1, #0
 80008b8:	4807      	ldr	r0, [pc, #28]	@ (80008d8 <FreeUARTBuffer+0x30>)
 80008ba:	f004 f86e 	bl	800499a <memset>

    // Step 3: Reinitialize UART (optional)
    if (HAL_UART_Init(&huart2) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	@ (80008d4 <FreeUARTBuffer+0x2c>)
 80008c0:	f002 fe3c 	bl	800353c <HAL_UART_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <FreeUARTBuffer+0x26>
    {
        // Initialization Error
        Error_Handler();
 80008ca:	f000 fd5f 	bl	800138c <Error_Handler>
    }
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	2000017c 	.word	0x2000017c
 80008d8:	20000220 	.word	0x20000220

080008dc <main>:

int main(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b0ae      	sub	sp, #184	@ 0xb8
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e2:	f000 ff48 	bl	8001776 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e6:	f000 fbf1 	bl	80010cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ea:	f000 fcd9 	bl	80012a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80008ee:	f000 fc39 	bl	8001164 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80008f2:	f000 fc75 	bl	80011e0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  int counter_1 = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  int counter_2 = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  int counter_3 = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  int counter_4 = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  int counter_5 = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  int counter_6 = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int counter_7 = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  int counter_8 = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  int counter_9 = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  int counter_10 = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  int counter_11 = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int counter_12 = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  int counter_13 = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  int counter_14 = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  int counter_15 = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	67fb      	str	r3, [r7, #124]	@ 0x7c

  setLED(0, 0, 0, 0);
 800094e:	2300      	movs	r3, #0
 8000950:	2200      	movs	r2, #0
 8000952:	2100      	movs	r1, #0
 8000954:	2000      	movs	r0, #0
 8000956:	f7ff ff0f 	bl	8000778 <setLED>
  setLED(1, 0, 0, 0);
 800095a:	2300      	movs	r3, #0
 800095c:	2200      	movs	r2, #0
 800095e:	2100      	movs	r1, #0
 8000960:	2001      	movs	r0, #1
 8000962:	f7ff ff09 	bl	8000778 <setLED>
  setLED(2, 0, 0, 0);
 8000966:	2300      	movs	r3, #0
 8000968:	2200      	movs	r2, #0
 800096a:	2100      	movs	r1, #0
 800096c:	2002      	movs	r0, #2
 800096e:	f7ff ff03 	bl	8000778 <setLED>
  setLED(3, 0, 0, 0);
 8000972:	2300      	movs	r3, #0
 8000974:	2200      	movs	r2, #0
 8000976:	2100      	movs	r1, #0
 8000978:	2003      	movs	r0, #3
 800097a:	f7ff fefd 	bl	8000778 <setLED>
  setLED(4, 0, 0, 0);
 800097e:	2300      	movs	r3, #0
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	2004      	movs	r0, #4
 8000986:	f7ff fef7 	bl	8000778 <setLED>
  setLED(5, 0, 0, 0);
 800098a:	2300      	movs	r3, #0
 800098c:	2200      	movs	r2, #0
 800098e:	2100      	movs	r1, #0
 8000990:	2005      	movs	r0, #5
 8000992:	f7ff fef1 	bl	8000778 <setLED>
  setLED(6, 0, 0, 0);
 8000996:	2300      	movs	r3, #0
 8000998:	2200      	movs	r2, #0
 800099a:	2100      	movs	r1, #0
 800099c:	2006      	movs	r0, #6
 800099e:	f7ff feeb 	bl	8000778 <setLED>
  setLED(7, 0, 0, 0);
 80009a2:	2300      	movs	r3, #0
 80009a4:	2200      	movs	r2, #0
 80009a6:	2100      	movs	r1, #0
 80009a8:	2007      	movs	r0, #7
 80009aa:	f7ff fee5 	bl	8000778 <setLED>
  setLED(8, 0, 0, 0);
 80009ae:	2300      	movs	r3, #0
 80009b0:	2200      	movs	r2, #0
 80009b2:	2100      	movs	r1, #0
 80009b4:	2008      	movs	r0, #8
 80009b6:	f7ff fedf 	bl	8000778 <setLED>
  setLED(9, 0, 0, 0);
 80009ba:	2300      	movs	r3, #0
 80009bc:	2200      	movs	r2, #0
 80009be:	2100      	movs	r1, #0
 80009c0:	2009      	movs	r0, #9
 80009c2:	f7ff fed9 	bl	8000778 <setLED>
  setLED(10, 0, 0, 0);
 80009c6:	2300      	movs	r3, #0
 80009c8:	2200      	movs	r2, #0
 80009ca:	2100      	movs	r1, #0
 80009cc:	200a      	movs	r0, #10
 80009ce:	f7ff fed3 	bl	8000778 <setLED>
  setLED(11, 0, 0, 0);
 80009d2:	2300      	movs	r3, #0
 80009d4:	2200      	movs	r2, #0
 80009d6:	2100      	movs	r1, #0
 80009d8:	200b      	movs	r0, #11
 80009da:	f7ff fecd 	bl	8000778 <setLED>
  setLED(12, 0, 0, 0);
 80009de:	2300      	movs	r3, #0
 80009e0:	2200      	movs	r2, #0
 80009e2:	2100      	movs	r1, #0
 80009e4:	200c      	movs	r0, #12
 80009e6:	f7ff fec7 	bl	8000778 <setLED>
  setLED(13, 0, 0, 0);
 80009ea:	2300      	movs	r3, #0
 80009ec:	2200      	movs	r2, #0
 80009ee:	2100      	movs	r1, #0
 80009f0:	200d      	movs	r0, #13
 80009f2:	f7ff fec1 	bl	8000778 <setLED>
  setLED(14, 0, 0, 0);
 80009f6:	2300      	movs	r3, #0
 80009f8:	2200      	movs	r2, #0
 80009fa:	2100      	movs	r1, #0
 80009fc:	200e      	movs	r0, #14
 80009fe:	f7ff febb 	bl	8000778 <setLED>
  WS2812_Send();
 8000a02:	f7ff ff27 	bl	8000854 <WS2812_Send>

  for(int i=0; i<=14; i++)
 8000a06:	2300      	movs	r3, #0
 8000a08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000a0a:	e00a      	b.n	8000a22 <main+0x146>
  {
	  setLED(i, 80, 0, 0);
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2150      	movs	r1, #80	@ 0x50
 8000a12:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8000a14:	f7ff feb0 	bl	8000778 <setLED>
	  WS2812_Send();
 8000a18:	f7ff ff1c 	bl	8000854 <WS2812_Send>
  for(int i=0; i<=14; i++)
 8000a1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000a1e:	3301      	adds	r3, #1
 8000a20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000a22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000a24:	2b0e      	cmp	r3, #14
 8000a26:	ddf1      	ble.n	8000a0c <main+0x130>
  /* USER CODE BEGIN WHILE */
  while (1)
   {
    /* USER CODE END WHILE */

	  if(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_RXNE))
 8000a28:	4bc4      	ldr	r3, [pc, #784]	@ (8000d3c <main+0x460>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	f003 0320 	and.w	r3, r3, #32
 8000a32:	2b20      	cmp	r3, #32
 8000a34:	d11c      	bne.n	8000a70 <main+0x194>
	  {
		  HAL_UART_Receive(&huart2, Rx_data, 20, 10);
 8000a36:	230a      	movs	r3, #10
 8000a38:	2214      	movs	r2, #20
 8000a3a:	49c1      	ldr	r1, [pc, #772]	@ (8000d40 <main+0x464>)
 8000a3c:	48bf      	ldr	r0, [pc, #764]	@ (8000d3c <main+0x460>)
 8000a3e:	f002 fe5b 	bl	80036f8 <HAL_UART_Receive>
		  HAL_Delay(50);
 8000a42:	2032      	movs	r0, #50	@ 0x32
 8000a44:	f000 ff08 	bl	8001858 <HAL_Delay>
		  interpreter(Rx_data);
 8000a48:	48bd      	ldr	r0, [pc, #756]	@ (8000d40 <main+0x464>)
 8000a4a:	f7ff fdc1 	bl	80005d0 <interpreter>
		  HAL_Delay(50);
 8000a4e:	2032      	movs	r0, #50	@ 0x32
 8000a50:	f000 ff02 	bl	8001858 <HAL_Delay>
		  FreeUARTBuffer();
 8000a54:	f7ff ff28 	bl	80008a8 <FreeUARTBuffer>
		  HAL_UART_Transmit(&huart2,reply,6,1000);
 8000a58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a5c:	2206      	movs	r2, #6
 8000a5e:	49b9      	ldr	r1, [pc, #740]	@ (8000d44 <main+0x468>)
 8000a60:	48b6      	ldr	r0, [pc, #728]	@ (8000d3c <main+0x460>)
 8000a62:	f002 fdbb 	bl	80035dc <HAL_UART_Transmit>
		  HAL_Delay(50);
 8000a66:	2032      	movs	r0, #50	@ 0x32
 8000a68:	f000 fef6 	bl	8001858 <HAL_Delay>
		  FreeUARTBuffer();
 8000a6c:	f7ff ff1c 	bl	80008a8 <FreeUARTBuffer>
	  }
	  if(HAL_GPIO_ReadPin(SENSOR1_GPIO_Port, SENSOR1_Pin)) // Doesn't work
 8000a70:	2102      	movs	r1, #2
 8000a72:	48b5      	ldr	r0, [pc, #724]	@ (8000d48 <main+0x46c>)
 8000a74:	f001 f9dc 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d02b      	beq.n	8000ad6 <main+0x1fa>
	  {
		  if (counter_1 == 0)
 8000a7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d11a      	bne.n	8000abc <main+0x1e0>
		  {
			  uint8_t data[] = "B1 S1 ";
 8000a86:	4ab1      	ldr	r2, [pc, #708]	@ (8000d4c <main+0x470>)
 8000a88:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000a8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a90:	6018      	str	r0, [r3, #0]
 8000a92:	3304      	adds	r3, #4
 8000a94:	8019      	strh	r1, [r3, #0]
 8000a96:	3302      	adds	r3, #2
 8000a98:	0c0a      	lsrs	r2, r1, #16
 8000a9a:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart2,data,6,10);
 8000a9c:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8000aa0:	230a      	movs	r3, #10
 8000aa2:	2206      	movs	r2, #6
 8000aa4:	48a5      	ldr	r0, [pc, #660]	@ (8000d3c <main+0x460>)
 8000aa6:	f002 fd99 	bl	80035dc <HAL_UART_Transmit>
			  counter_1 = 1500;
 8000aaa:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000aae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			  HAL_Delay(1500);
 8000ab2:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000ab6:	f000 fecf 	bl	8001858 <HAL_Delay>
 8000aba:	e00c      	b.n	8000ad6 <main+0x1fa>
		  }
		  else if(counter_1 < 0)
 8000abc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	da03      	bge.n	8000acc <main+0x1f0>
		  {
			  counter_1 =0;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8000aca:	e004      	b.n	8000ad6 <main+0x1fa>
		  }
		  else
		  {
			  counter_1--;
 8000acc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
		  }
	  }
	  if(HAL_GPIO_ReadPin(SENSOR2_GPIO_Port, SENSOR2_Pin)) // Doesn't work
 8000ad6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ada:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ade:	f001 f9a7 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d02b      	beq.n	8000b40 <main+0x264>
	  {
		  if (counter_2 == 0)
 8000ae8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d11a      	bne.n	8000b26 <main+0x24a>
		  {
			  uint8_t data[] = "B1 S2 ";
 8000af0:	4a97      	ldr	r2, [pc, #604]	@ (8000d50 <main+0x474>)
 8000af2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000af6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000afa:	6018      	str	r0, [r3, #0]
 8000afc:	3304      	adds	r3, #4
 8000afe:	8019      	strh	r1, [r3, #0]
 8000b00:	3302      	adds	r3, #2
 8000b02:	0c0a      	lsrs	r2, r1, #16
 8000b04:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart2,data,6,10);
 8000b06:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8000b0a:	230a      	movs	r3, #10
 8000b0c:	2206      	movs	r2, #6
 8000b0e:	488b      	ldr	r0, [pc, #556]	@ (8000d3c <main+0x460>)
 8000b10:	f002 fd64 	bl	80035dc <HAL_UART_Transmit>
			  counter_2 = 1500;
 8000b14:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000b18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
			  HAL_Delay(1500);
 8000b1c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000b20:	f000 fe9a 	bl	8001858 <HAL_Delay>
 8000b24:	e00c      	b.n	8000b40 <main+0x264>
		  }
		  else if(counter_2 < 0)
 8000b26:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	da03      	bge.n	8000b36 <main+0x25a>
		  {
			  counter_2 =0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8000b34:	e004      	b.n	8000b40 <main+0x264>
		  }
		  else
		  {
			  counter_2--;
 8000b36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		  }
	  }
	  if(HAL_GPIO_ReadPin(SENSOR3_GPIO_Port, SENSOR3_Pin))
 8000b40:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b48:	f001 f972 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d02b      	beq.n	8000baa <main+0x2ce>
	  {
		  if (counter_3 == 0)
 8000b52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d11a      	bne.n	8000b90 <main+0x2b4>
		  {
			  uint8_t data[] = "B1 S3 ";
 8000b5a:	4a7e      	ldr	r2, [pc, #504]	@ (8000d54 <main+0x478>)
 8000b5c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000b60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b64:	6018      	str	r0, [r3, #0]
 8000b66:	3304      	adds	r3, #4
 8000b68:	8019      	strh	r1, [r3, #0]
 8000b6a:	3302      	adds	r3, #2
 8000b6c:	0c0a      	lsrs	r2, r1, #16
 8000b6e:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart2,data,6,10);
 8000b70:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 8000b74:	230a      	movs	r3, #10
 8000b76:	2206      	movs	r2, #6
 8000b78:	4870      	ldr	r0, [pc, #448]	@ (8000d3c <main+0x460>)
 8000b7a:	f002 fd2f 	bl	80035dc <HAL_UART_Transmit>
			  counter_3 = 1500;
 8000b7e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000b82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			  HAL_Delay(1500);
 8000b86:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000b8a:	f000 fe65 	bl	8001858 <HAL_Delay>
 8000b8e:	e00c      	b.n	8000baa <main+0x2ce>
		  }
		  else if(counter_3 < 0)
 8000b90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	da03      	bge.n	8000ba0 <main+0x2c4>
		  {
			  counter_3 =0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8000b9e:	e004      	b.n	8000baa <main+0x2ce>
		  }
		  else
		  {
			  counter_3--;
 8000ba0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		  }
	  }
	  if(HAL_GPIO_ReadPin(SENSOR4_GPIO_Port, SENSOR4_Pin))
 8000baa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb2:	f001 f93d 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d02b      	beq.n	8000c14 <main+0x338>
	  {
		  if (counter_4 == 0)
 8000bbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d11a      	bne.n	8000bfa <main+0x31e>
		  {
			  uint8_t data[] = "B1 S4 ";
 8000bc4:	4a64      	ldr	r2, [pc, #400]	@ (8000d58 <main+0x47c>)
 8000bc6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000bca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bce:	6018      	str	r0, [r3, #0]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	8019      	strh	r1, [r3, #0]
 8000bd4:	3302      	adds	r3, #2
 8000bd6:	0c0a      	lsrs	r2, r1, #16
 8000bd8:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart2,data,6,10);
 8000bda:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000bde:	230a      	movs	r3, #10
 8000be0:	2206      	movs	r2, #6
 8000be2:	4856      	ldr	r0, [pc, #344]	@ (8000d3c <main+0x460>)
 8000be4:	f002 fcfa 	bl	80035dc <HAL_UART_Transmit>
			  counter_4 = 1500;
 8000be8:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000bec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
			  HAL_Delay(1500);
 8000bf0:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000bf4:	f000 fe30 	bl	8001858 <HAL_Delay>
 8000bf8:	e00c      	b.n	8000c14 <main+0x338>
		  }
		  else if(counter_4 < 0)
 8000bfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	da03      	bge.n	8000c0a <main+0x32e>
		  {
			  counter_4 =0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8000c08:	e004      	b.n	8000c14 <main+0x338>
		  }
		  else
		  {
			  counter_4--;
 8000c0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000c0e:	3b01      	subs	r3, #1
 8000c10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		  }
	  }
	  if(HAL_GPIO_ReadPin(SENSOR5_GPIO_Port, SENSOR5_Pin))
 8000c14:	2101      	movs	r1, #1
 8000c16:	4851      	ldr	r0, [pc, #324]	@ (8000d5c <main+0x480>)
 8000c18:	f001 f90a 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d02b      	beq.n	8000c7a <main+0x39e>
	  {
		  if (counter_5 == 0)
 8000c22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d11a      	bne.n	8000c60 <main+0x384>
		  {
			  uint8_t data[] = "B1 S5 ";
 8000c2a:	4a4d      	ldr	r2, [pc, #308]	@ (8000d60 <main+0x484>)
 8000c2c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000c30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c34:	6018      	str	r0, [r3, #0]
 8000c36:	3304      	adds	r3, #4
 8000c38:	8019      	strh	r1, [r3, #0]
 8000c3a:	3302      	adds	r3, #2
 8000c3c:	0c0a      	lsrs	r2, r1, #16
 8000c3e:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart2,data,6,10);
 8000c40:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8000c44:	230a      	movs	r3, #10
 8000c46:	2206      	movs	r2, #6
 8000c48:	483c      	ldr	r0, [pc, #240]	@ (8000d3c <main+0x460>)
 8000c4a:	f002 fcc7 	bl	80035dc <HAL_UART_Transmit>
			  counter_5 = 1500;
 8000c4e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000c52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
			  HAL_Delay(1500);
 8000c56:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000c5a:	f000 fdfd 	bl	8001858 <HAL_Delay>
 8000c5e:	e00c      	b.n	8000c7a <main+0x39e>
		  }
		  else if(counter_5 < 0)
 8000c60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	da03      	bge.n	8000c70 <main+0x394>
		  {
			  counter_5 =0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8000c6e:	e004      	b.n	8000c7a <main+0x39e>
		  }
		  else
		  {
			  counter_5--;
 8000c70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8000c74:	3b01      	subs	r3, #1
 8000c76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		  }
	  }
	  if(HAL_GPIO_ReadPin(SENSOR6_GPIO_Port, SENSOR6_Pin))
 8000c7a:	2102      	movs	r1, #2
 8000c7c:	4837      	ldr	r0, [pc, #220]	@ (8000d5c <main+0x480>)
 8000c7e:	f001 f8d7 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d02b      	beq.n	8000ce0 <main+0x404>
	  {
		  if (counter_6 == 0)
 8000c88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d11a      	bne.n	8000cc6 <main+0x3ea>
		  {
			  uint8_t data[] = "B1 S6 ";
 8000c90:	4a34      	ldr	r2, [pc, #208]	@ (8000d64 <main+0x488>)
 8000c92:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000c96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c9a:	6018      	str	r0, [r3, #0]
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	8019      	strh	r1, [r3, #0]
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	0c0a      	lsrs	r2, r1, #16
 8000ca4:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart2,data,6,10);
 8000ca6:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8000caa:	230a      	movs	r3, #10
 8000cac:	2206      	movs	r2, #6
 8000cae:	4823      	ldr	r0, [pc, #140]	@ (8000d3c <main+0x460>)
 8000cb0:	f002 fc94 	bl	80035dc <HAL_UART_Transmit>
			  counter_6 = 1500;
 8000cb4:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000cb8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			  HAL_Delay(1500);
 8000cbc:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000cc0:	f000 fdca 	bl	8001858 <HAL_Delay>
 8000cc4:	e00c      	b.n	8000ce0 <main+0x404>
		  }
		  else if(counter_6 < 0)
 8000cc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	da03      	bge.n	8000cd6 <main+0x3fa>
		  {
			  counter_6 =0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8000cd4:	e004      	b.n	8000ce0 <main+0x404>
		  }
		  else
		  {
			  counter_6--;
 8000cd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
		  }
	  }
	  if(HAL_GPIO_ReadPin(SENSOR7_GPIO_Port, SENSOR7_Pin))
 8000ce0:	2104      	movs	r1, #4
 8000ce2:	481e      	ldr	r0, [pc, #120]	@ (8000d5c <main+0x480>)
 8000ce4:	f001 f8a4 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d043      	beq.n	8000d76 <main+0x49a>
	  {
		  if (counter_7 == 0)
 8000cee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d11a      	bne.n	8000d2c <main+0x450>
		  {
			  uint8_t data[] = "B1 S7 ";
 8000cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d68 <main+0x48c>)
 8000cf8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000cfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d00:	6018      	str	r0, [r3, #0]
 8000d02:	3304      	adds	r3, #4
 8000d04:	8019      	strh	r1, [r3, #0]
 8000d06:	3302      	adds	r3, #2
 8000d08:	0c0a      	lsrs	r2, r1, #16
 8000d0a:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart2,data,6,10);
 8000d0c:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8000d10:	230a      	movs	r3, #10
 8000d12:	2206      	movs	r2, #6
 8000d14:	4809      	ldr	r0, [pc, #36]	@ (8000d3c <main+0x460>)
 8000d16:	f002 fc61 	bl	80035dc <HAL_UART_Transmit>
			  counter_7 = 1500;
 8000d1a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000d1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
			  HAL_Delay(1500);
 8000d22:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000d26:	f000 fd97 	bl	8001858 <HAL_Delay>
 8000d2a:	e024      	b.n	8000d76 <main+0x49a>
		  }
		  else if(counter_7 < 0)
 8000d2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	da1b      	bge.n	8000d6c <main+0x490>
		  {
			  counter_7 =0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8000d3a:	e01c      	b.n	8000d76 <main+0x49a>
 8000d3c:	2000017c 	.word	0x2000017c
 8000d40:	20000210 	.word	0x20000210
 8000d44:	20000000 	.word	0x20000000
 8000d48:	48000800 	.word	0x48000800
 8000d4c:	080057e4 	.word	0x080057e4
 8000d50:	080057ec 	.word	0x080057ec
 8000d54:	080057f4 	.word	0x080057f4
 8000d58:	080057fc 	.word	0x080057fc
 8000d5c:	48000400 	.word	0x48000400
 8000d60:	08005804 	.word	0x08005804
 8000d64:	0800580c 	.word	0x0800580c
 8000d68:	08005814 	.word	0x08005814
		  }
		  else
		  {
			  counter_7--;
 8000d6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8000d70:	3b01      	subs	r3, #1
 8000d72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		  }
	  }
	  if(HAL_GPIO_ReadPin(SENSOR8_GPIO_Port, SENSOR8_Pin))
 8000d76:	2110      	movs	r1, #16
 8000d78:	48c8      	ldr	r0, [pc, #800]	@ (800109c <main+0x7c0>)
 8000d7a:	f001 f859 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d02b      	beq.n	8000ddc <main+0x500>
	  {
		  if (counter_8 == 0)
 8000d84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d11a      	bne.n	8000dc2 <main+0x4e6>
		  {
			  uint8_t data[] = "B1 S8 ";
 8000d8c:	4ac4      	ldr	r2, [pc, #784]	@ (80010a0 <main+0x7c4>)
 8000d8e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d96:	6018      	str	r0, [r3, #0]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	8019      	strh	r1, [r3, #0]
 8000d9c:	3302      	adds	r3, #2
 8000d9e:	0c0a      	lsrs	r2, r1, #16
 8000da0:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart2,data,6,10);
 8000da2:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8000da6:	230a      	movs	r3, #10
 8000da8:	2206      	movs	r2, #6
 8000daa:	48be      	ldr	r0, [pc, #760]	@ (80010a4 <main+0x7c8>)
 8000dac:	f002 fc16 	bl	80035dc <HAL_UART_Transmit>
			  counter_8 = 1500;
 8000db0:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000db4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
			  HAL_Delay(1500);
 8000db8:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000dbc:	f000 fd4c 	bl	8001858 <HAL_Delay>
 8000dc0:	e00c      	b.n	8000ddc <main+0x500>
		  }
		  else if(counter_8 < 0)
 8000dc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	da03      	bge.n	8000dd2 <main+0x4f6>
		  {
			  counter_8 =0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000dd0:	e004      	b.n	8000ddc <main+0x500>
		  }
		  else
		  {
			  counter_8--;
 8000dd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		  }
	  }
	  if(HAL_GPIO_ReadPin(SENSOR9_GPIO_Port, SENSOR9_Pin)) // Doesn't work
 8000ddc:	2120      	movs	r1, #32
 8000dde:	48af      	ldr	r0, [pc, #700]	@ (800109c <main+0x7c0>)
 8000de0:	f001 f826 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d02b      	beq.n	8000e42 <main+0x566>
	  {
		  if (counter_9 == 0)
 8000dea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d11a      	bne.n	8000e28 <main+0x54c>
		  {
			  uint8_t data[] = "B1 S9 ";
 8000df2:	4aad      	ldr	r2, [pc, #692]	@ (80010a8 <main+0x7cc>)
 8000df4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000df8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dfc:	6018      	str	r0, [r3, #0]
 8000dfe:	3304      	adds	r3, #4
 8000e00:	8019      	strh	r1, [r3, #0]
 8000e02:	3302      	adds	r3, #2
 8000e04:	0c0a      	lsrs	r2, r1, #16
 8000e06:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart2,data,6,10);
 8000e08:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000e0c:	230a      	movs	r3, #10
 8000e0e:	2206      	movs	r2, #6
 8000e10:	48a4      	ldr	r0, [pc, #656]	@ (80010a4 <main+0x7c8>)
 8000e12:	f002 fbe3 	bl	80035dc <HAL_UART_Transmit>
			  counter_9 = 1500;
 8000e16:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000e1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
			  HAL_Delay(1500);
 8000e1e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000e22:	f000 fd19 	bl	8001858 <HAL_Delay>
 8000e26:	e00c      	b.n	8000e42 <main+0x566>
		  }
		  else if(counter_9 < 0)
 8000e28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	da03      	bge.n	8000e38 <main+0x55c>
		  {
			  counter_9 =0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8000e36:	e004      	b.n	8000e42 <main+0x566>
		  }
		  else
		  {
			  counter_9--;
 8000e38:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		  }
	  }
	  if(HAL_GPIO_ReadPin(SENSOR10_GPIO_Port, SENSOR10_Pin))
 8000e42:	2140      	movs	r1, #64	@ 0x40
 8000e44:	4895      	ldr	r0, [pc, #596]	@ (800109c <main+0x7c0>)
 8000e46:	f000 fff3 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d02b      	beq.n	8000ea8 <main+0x5cc>
	  {
		  if (counter_10 == 0)
 8000e50:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d11a      	bne.n	8000e8e <main+0x5b2>
		  {
			  uint8_t data[] = "B1 S10";
 8000e58:	4a94      	ldr	r2, [pc, #592]	@ (80010ac <main+0x7d0>)
 8000e5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e62:	6018      	str	r0, [r3, #0]
 8000e64:	3304      	adds	r3, #4
 8000e66:	8019      	strh	r1, [r3, #0]
 8000e68:	3302      	adds	r3, #2
 8000e6a:	0c0a      	lsrs	r2, r1, #16
 8000e6c:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart2,data,6,10);
 8000e6e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000e72:	230a      	movs	r3, #10
 8000e74:	2206      	movs	r2, #6
 8000e76:	488b      	ldr	r0, [pc, #556]	@ (80010a4 <main+0x7c8>)
 8000e78:	f002 fbb0 	bl	80035dc <HAL_UART_Transmit>
			  counter_10 = 1500;
 8000e7c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000e80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			  HAL_Delay(1500);
 8000e84:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000e88:	f000 fce6 	bl	8001858 <HAL_Delay>
 8000e8c:	e00c      	b.n	8000ea8 <main+0x5cc>
		  }
		  else if(counter_10 < 0)
 8000e8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	da03      	bge.n	8000e9e <main+0x5c2>
		  {
			  counter_10 =0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8000e9c:	e004      	b.n	8000ea8 <main+0x5cc>
		  }
		  else
		  {
			  counter_10--;
 8000e9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
		  }
	  }
	  if(HAL_GPIO_ReadPin(SENSOR11_GPIO_Port, SENSOR11_Pin))
 8000ea8:	2180      	movs	r1, #128	@ 0x80
 8000eaa:	487c      	ldr	r0, [pc, #496]	@ (800109c <main+0x7c0>)
 8000eac:	f000 ffc0 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d02b      	beq.n	8000f0e <main+0x632>
	  {
		  if (counter_11 == 0)
 8000eb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d11a      	bne.n	8000ef4 <main+0x618>
		  {
			  uint8_t data[] = "B1 S11";
 8000ebe:	4a7c      	ldr	r2, [pc, #496]	@ (80010b0 <main+0x7d4>)
 8000ec0:	f107 0320 	add.w	r3, r7, #32
 8000ec4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ec8:	6018      	str	r0, [r3, #0]
 8000eca:	3304      	adds	r3, #4
 8000ecc:	8019      	strh	r1, [r3, #0]
 8000ece:	3302      	adds	r3, #2
 8000ed0:	0c0a      	lsrs	r2, r1, #16
 8000ed2:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart2,data,6,10);
 8000ed4:	f107 0120 	add.w	r1, r7, #32
 8000ed8:	230a      	movs	r3, #10
 8000eda:	2206      	movs	r2, #6
 8000edc:	4871      	ldr	r0, [pc, #452]	@ (80010a4 <main+0x7c8>)
 8000ede:	f002 fb7d 	bl	80035dc <HAL_UART_Transmit>
			  counter_11 = 1500;
 8000ee2:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000ee6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			  HAL_Delay(1500);
 8000eea:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000eee:	f000 fcb3 	bl	8001858 <HAL_Delay>
 8000ef2:	e00c      	b.n	8000f0e <main+0x632>
		  }
		  else if(counter_11 < 0)
 8000ef4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	da03      	bge.n	8000f04 <main+0x628>
		  {
			  counter_11 =0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000f02:	e004      	b.n	8000f0e <main+0x632>
		  }
		  else
		  {
			  counter_11--;
 8000f04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		  }
	  }
	  if(HAL_GPIO_ReadPin(SENSOR12_GPIO_Port, SENSOR12_Pin)) // Doesn't work
 8000f0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f12:	4862      	ldr	r0, [pc, #392]	@ (800109c <main+0x7c0>)
 8000f14:	f000 ff8c 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d02b      	beq.n	8000f76 <main+0x69a>
	  {
		  if (counter_12 == 0)
 8000f1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d11a      	bne.n	8000f5c <main+0x680>
		  {
			  uint8_t data[] = "B1 S12";
 8000f26:	4a63      	ldr	r2, [pc, #396]	@ (80010b4 <main+0x7d8>)
 8000f28:	f107 0318 	add.w	r3, r7, #24
 8000f2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f30:	6018      	str	r0, [r3, #0]
 8000f32:	3304      	adds	r3, #4
 8000f34:	8019      	strh	r1, [r3, #0]
 8000f36:	3302      	adds	r3, #2
 8000f38:	0c0a      	lsrs	r2, r1, #16
 8000f3a:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart2,data,6,10);
 8000f3c:	f107 0118 	add.w	r1, r7, #24
 8000f40:	230a      	movs	r3, #10
 8000f42:	2206      	movs	r2, #6
 8000f44:	4857      	ldr	r0, [pc, #348]	@ (80010a4 <main+0x7c8>)
 8000f46:	f002 fb49 	bl	80035dc <HAL_UART_Transmit>
			  counter_12 = 1500;
 8000f4a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000f4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
			  HAL_Delay(1500);
 8000f52:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000f56:	f000 fc7f 	bl	8001858 <HAL_Delay>
 8000f5a:	e00c      	b.n	8000f76 <main+0x69a>
		  }
		  else if(counter_12 < 0)
 8000f5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	da03      	bge.n	8000f6c <main+0x690>
		  {
			  counter_12 =0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000f6a:	e004      	b.n	8000f76 <main+0x69a>
		  }
		  else
		  {
			  counter_12--;
 8000f6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000f70:	3b01      	subs	r3, #1
 8000f72:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
		  }
	  }
	  if(HAL_GPIO_ReadPin(SENSOR13_GPIO_Port, SENSOR13_Pin)) // Doesn't work
 8000f76:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f7a:	4848      	ldr	r0, [pc, #288]	@ (800109c <main+0x7c0>)
 8000f7c:	f000 ff58 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d02b      	beq.n	8000fde <main+0x702>
	  {
		  if (counter_13 == 0)
 8000f86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d11a      	bne.n	8000fc4 <main+0x6e8>
		  {
			  uint8_t data[] = "B1 S13";
 8000f8e:	4a4a      	ldr	r2, [pc, #296]	@ (80010b8 <main+0x7dc>)
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f98:	6018      	str	r0, [r3, #0]
 8000f9a:	3304      	adds	r3, #4
 8000f9c:	8019      	strh	r1, [r3, #0]
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	0c0a      	lsrs	r2, r1, #16
 8000fa2:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart2,data,6,10);
 8000fa4:	f107 0110 	add.w	r1, r7, #16
 8000fa8:	230a      	movs	r3, #10
 8000faa:	2206      	movs	r2, #6
 8000fac:	483d      	ldr	r0, [pc, #244]	@ (80010a4 <main+0x7c8>)
 8000fae:	f002 fb15 	bl	80035dc <HAL_UART_Transmit>
			  counter_13 = 1500;
 8000fb2:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000fb6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			  HAL_Delay(1500);
 8000fba:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000fbe:	f000 fc4b 	bl	8001858 <HAL_Delay>
 8000fc2:	e00c      	b.n	8000fde <main+0x702>
		  }
		  else if(counter_13 < 0)
 8000fc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	da03      	bge.n	8000fd4 <main+0x6f8>
		  {
			  counter_13 =0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000fd2:	e004      	b.n	8000fde <main+0x702>
		  }
		  else
		  {
			  counter_13--;
 8000fd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		  }
	  }
	  if(HAL_GPIO_ReadPin(SENSOR14_GPIO_Port, SENSOR14_Pin))
 8000fde:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fe2:	482e      	ldr	r0, [pc, #184]	@ (800109c <main+0x7c0>)
 8000fe4:	f000 ff24 	bl	8001e30 <HAL_GPIO_ReadPin>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d02b      	beq.n	8001046 <main+0x76a>
	  {
		  if (counter_14 == 0)
 8000fee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d11a      	bne.n	800102c <main+0x750>
		  {
			  uint8_t data[] = "B1 S14";
 8000ff6:	4a31      	ldr	r2, [pc, #196]	@ (80010bc <main+0x7e0>)
 8000ff8:	f107 0308 	add.w	r3, r7, #8
 8000ffc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001000:	6018      	str	r0, [r3, #0]
 8001002:	3304      	adds	r3, #4
 8001004:	8019      	strh	r1, [r3, #0]
 8001006:	3302      	adds	r3, #2
 8001008:	0c0a      	lsrs	r2, r1, #16
 800100a:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart2,data,6,10);
 800100c:	f107 0108 	add.w	r1, r7, #8
 8001010:	230a      	movs	r3, #10
 8001012:	2206      	movs	r2, #6
 8001014:	4823      	ldr	r0, [pc, #140]	@ (80010a4 <main+0x7c8>)
 8001016:	f002 fae1 	bl	80035dc <HAL_UART_Transmit>
			  counter_14 = 1500;
 800101a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800101e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			  HAL_Delay(1500);
 8001022:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001026:	f000 fc17 	bl	8001858 <HAL_Delay>
 800102a:	e00c      	b.n	8001046 <main+0x76a>
		  }
		  else if(counter_14 < 0)
 800102c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001030:	2b00      	cmp	r3, #0
 8001032:	da03      	bge.n	800103c <main+0x760>
		  {
			  counter_14 =0;
 8001034:	2300      	movs	r3, #0
 8001036:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800103a:	e004      	b.n	8001046 <main+0x76a>
		  }
		  else
		  {
			  counter_14--;
 800103c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001040:	3b01      	subs	r3, #1
 8001042:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
		  }
	  }
	  if(HAL_GPIO_ReadPin(SENSOR15_GPIO_Port, SENSOR15_Pin))
 8001046:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800104a:	4814      	ldr	r0, [pc, #80]	@ (800109c <main+0x7c0>)
 800104c:	f000 fef0 	bl	8001e30 <HAL_GPIO_ReadPin>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	f43f ace8 	beq.w	8000a28 <main+0x14c>
	  {
		  if (counter_15 == 0)
 8001058:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800105a:	2b00      	cmp	r3, #0
 800105c:	d117      	bne.n	800108e <main+0x7b2>
		  {
			  uint8_t data[] = "B1 S15";
 800105e:	4a18      	ldr	r2, [pc, #96]	@ (80010c0 <main+0x7e4>)
 8001060:	463b      	mov	r3, r7
 8001062:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001066:	6018      	str	r0, [r3, #0]
 8001068:	3304      	adds	r3, #4
 800106a:	8019      	strh	r1, [r3, #0]
 800106c:	3302      	adds	r3, #2
 800106e:	0c0a      	lsrs	r2, r1, #16
 8001070:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit(&huart2,data,6,10);
 8001072:	4639      	mov	r1, r7
 8001074:	230a      	movs	r3, #10
 8001076:	2206      	movs	r2, #6
 8001078:	480a      	ldr	r0, [pc, #40]	@ (80010a4 <main+0x7c8>)
 800107a:	f002 faaf 	bl	80035dc <HAL_UART_Transmit>
			  counter_15 = 1500;
 800107e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001082:	67fb      	str	r3, [r7, #124]	@ 0x7c
			  HAL_Delay(1500);
 8001084:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001088:	f000 fbe6 	bl	8001858 <HAL_Delay>
 800108c:	e4cc      	b.n	8000a28 <main+0x14c>
		  }
		  else if(counter_15 < 0)
 800108e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001090:	2b00      	cmp	r3, #0
 8001092:	da17      	bge.n	80010c4 <main+0x7e8>
		  {
			  counter_15 =0;
 8001094:	2300      	movs	r3, #0
 8001096:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001098:	e4c6      	b.n	8000a28 <main+0x14c>
 800109a:	bf00      	nop
 800109c:	48000400 	.word	0x48000400
 80010a0:	0800581c 	.word	0x0800581c
 80010a4:	2000017c 	.word	0x2000017c
 80010a8:	08005824 	.word	0x08005824
 80010ac:	0800582c 	.word	0x0800582c
 80010b0:	08005834 	.word	0x08005834
 80010b4:	0800583c 	.word	0x0800583c
 80010b8:	08005844 	.word	0x08005844
 80010bc:	0800584c 	.word	0x0800584c
 80010c0:	08005854 	.word	0x08005854
		  }
		  else
		  {
			  counter_15--;
 80010c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80010c6:	3b01      	subs	r3, #1
 80010c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
	  if(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_RXNE))
 80010ca:	e4ad      	b.n	8000a28 <main+0x14c>

080010cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b094      	sub	sp, #80	@ 0x50
 80010d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d2:	f107 0318 	add.w	r3, r7, #24
 80010d6:	2238      	movs	r2, #56	@ 0x38
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f003 fc5d 	bl	800499a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ee:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010f2:	f000 fecd 	bl	8001e90 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f6:	2302      	movs	r3, #2
 80010f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010fe:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001100:	2340      	movs	r3, #64	@ 0x40
 8001102:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001104:	2302      	movs	r3, #2
 8001106:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001108:	2302      	movs	r3, #2
 800110a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800110c:	2301      	movs	r3, #1
 800110e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001110:	230a      	movs	r3, #10
 8001112:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001114:	2302      	movs	r3, #2
 8001116:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001118:	2302      	movs	r3, #2
 800111a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800111c:	2302      	movs	r3, #2
 800111e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001120:	f107 0318 	add.w	r3, r7, #24
 8001124:	4618      	mov	r0, r3
 8001126:	f000 ff67 	bl	8001ff8 <HAL_RCC_OscConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001130:	f000 f92c 	bl	800138c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001134:	230f      	movs	r3, #15
 8001136:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001138:	2303      	movs	r3, #3
 800113a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	2102      	movs	r1, #2
 800114c:	4618      	mov	r0, r3
 800114e:	f001 fa65 	bl	800261c <HAL_RCC_ClockConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001158:	f000 f918 	bl	800138c <Error_Handler>
  }
}
 800115c:	bf00      	nop
 800115e:	3750      	adds	r7, #80	@ 0x50
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001168:	4b1b      	ldr	r3, [pc, #108]	@ (80011d8 <MX_SPI1_Init+0x74>)
 800116a:	4a1c      	ldr	r2, [pc, #112]	@ (80011dc <MX_SPI1_Init+0x78>)
 800116c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800116e:	4b1a      	ldr	r3, [pc, #104]	@ (80011d8 <MX_SPI1_Init+0x74>)
 8001170:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001174:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8001176:	4b18      	ldr	r3, [pc, #96]	@ (80011d8 <MX_SPI1_Init+0x74>)
 8001178:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800117c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800117e:	4b16      	ldr	r3, [pc, #88]	@ (80011d8 <MX_SPI1_Init+0x74>)
 8001180:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001184:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001186:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <MX_SPI1_Init+0x74>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800118c:	4b12      	ldr	r3, [pc, #72]	@ (80011d8 <MX_SPI1_Init+0x74>)
 800118e:	2200      	movs	r2, #0
 8001190:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001192:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <MX_SPI1_Init+0x74>)
 8001194:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001198:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800119a:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <MX_SPI1_Init+0x74>)
 800119c:	2220      	movs	r2, #32
 800119e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011a0:	4b0d      	ldr	r3, [pc, #52]	@ (80011d8 <MX_SPI1_Init+0x74>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011a6:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <MX_SPI1_Init+0x74>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ac:	4b0a      	ldr	r3, [pc, #40]	@ (80011d8 <MX_SPI1_Init+0x74>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80011b2:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <MX_SPI1_Init+0x74>)
 80011b4:	2207      	movs	r2, #7
 80011b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011b8:	4b07      	ldr	r3, [pc, #28]	@ (80011d8 <MX_SPI1_Init+0x74>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011be:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <MX_SPI1_Init+0x74>)
 80011c0:	2208      	movs	r2, #8
 80011c2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011c4:	4804      	ldr	r0, [pc, #16]	@ (80011d8 <MX_SPI1_Init+0x74>)
 80011c6:	f001 fe35 	bl	8002e34 <HAL_SPI_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80011d0:	f000 f8dc 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20000118 	.word	0x20000118
 80011dc:	40013000 	.word	0x40013000

080011e0 <MX_USART2_UART_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80011e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001290 <MX_USART2_UART_Init+0xb0>)
 80011e6:	4a2b      	ldr	r2, [pc, #172]	@ (8001294 <MX_USART2_UART_Init+0xb4>)
 80011e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80011ea:	4b29      	ldr	r3, [pc, #164]	@ (8001290 <MX_USART2_UART_Init+0xb0>)
 80011ec:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80011f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011f2:	4b27      	ldr	r3, [pc, #156]	@ (8001290 <MX_USART2_UART_Init+0xb0>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011f8:	4b25      	ldr	r3, [pc, #148]	@ (8001290 <MX_USART2_UART_Init+0xb0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011fe:	4b24      	ldr	r3, [pc, #144]	@ (8001290 <MX_USART2_UART_Init+0xb0>)
 8001200:	2200      	movs	r2, #0
 8001202:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001204:	4b22      	ldr	r3, [pc, #136]	@ (8001290 <MX_USART2_UART_Init+0xb0>)
 8001206:	220c      	movs	r2, #12
 8001208:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120a:	4b21      	ldr	r3, [pc, #132]	@ (8001290 <MX_USART2_UART_Init+0xb0>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001210:	4b1f      	ldr	r3, [pc, #124]	@ (8001290 <MX_USART2_UART_Init+0xb0>)
 8001212:	2200      	movs	r2, #0
 8001214:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001216:	4b1e      	ldr	r3, [pc, #120]	@ (8001290 <MX_USART2_UART_Init+0xb0>)
 8001218:	2200      	movs	r2, #0
 800121a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800121c:	4b1c      	ldr	r3, [pc, #112]	@ (8001290 <MX_USART2_UART_Init+0xb0>)
 800121e:	2200      	movs	r2, #0
 8001220:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001222:	4b1b      	ldr	r3, [pc, #108]	@ (8001290 <MX_USART2_UART_Init+0xb0>)
 8001224:	2200      	movs	r2, #0
 8001226:	629a      	str	r2, [r3, #40]	@ 0x28

  // Assign Tx and Rx buffer pointers
  huart2.pTxBuffPtr = TxBuffer;
 8001228:	4b19      	ldr	r3, [pc, #100]	@ (8001290 <MX_USART2_UART_Init+0xb0>)
 800122a:	4a1b      	ldr	r2, [pc, #108]	@ (8001298 <MX_USART2_UART_Init+0xb8>)
 800122c:	651a      	str	r2, [r3, #80]	@ 0x50
  huart2.TxXferSize = TX_BUFFER_SIZE;
 800122e:	4b18      	ldr	r3, [pc, #96]	@ (8001290 <MX_USART2_UART_Init+0xb0>)
 8001230:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001234:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  huart2.pRxBuffPtr = RxBuffer;
 8001238:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <MX_USART2_UART_Init+0xb0>)
 800123a:	4a18      	ldr	r2, [pc, #96]	@ (800129c <MX_USART2_UART_Init+0xbc>)
 800123c:	659a      	str	r2, [r3, #88]	@ 0x58
  huart2.RxXferSize = RX_BUFFER_SIZE;
 800123e:	4b14      	ldr	r3, [pc, #80]	@ (8001290 <MX_USART2_UART_Init+0xb0>)
 8001240:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001244:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001248:	4811      	ldr	r0, [pc, #68]	@ (8001290 <MX_USART2_UART_Init+0xb0>)
 800124a:	f002 f977 	bl	800353c <HAL_UART_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_USART2_UART_Init+0x78>
  {
    Error_Handler();
 8001254:	f000 f89a 	bl	800138c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001258:	2100      	movs	r1, #0
 800125a:	480d      	ldr	r0, [pc, #52]	@ (8001290 <MX_USART2_UART_Init+0xb0>)
 800125c:	f003 f946 	bl	80044ec <HAL_UARTEx_SetTxFifoThreshold>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8001266:	f000 f891 	bl	800138c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800126a:	2100      	movs	r1, #0
 800126c:	4808      	ldr	r0, [pc, #32]	@ (8001290 <MX_USART2_UART_Init+0xb0>)
 800126e:	f003 f97b 	bl	8004568 <HAL_UARTEx_SetRxFifoThreshold>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_USART2_UART_Init+0x9c>
  {
    Error_Handler();
 8001278:	f000 f888 	bl	800138c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800127c:	4804      	ldr	r0, [pc, #16]	@ (8001290 <MX_USART2_UART_Init+0xb0>)
 800127e:	f003 f8fc 	bl	800447a <HAL_UARTEx_DisableFifoMode>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_USART2_UART_Init+0xac>
  {
    Error_Handler();
 8001288:	f000 f880 	bl	800138c <Error_Handler>
  }
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	2000017c 	.word	0x2000017c
 8001294:	40004400 	.word	0x40004400
 8001298:	20000320 	.word	0x20000320
 800129c:	20000220 	.word	0x20000220

080012a0 <MX_GPIO_Init>:
static void MX_GPIO_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a6:	f107 030c 	add.w	r3, r7, #12
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b6:	4b32      	ldr	r3, [pc, #200]	@ (8001380 <MX_GPIO_Init+0xe0>)
 80012b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ba:	4a31      	ldr	r2, [pc, #196]	@ (8001380 <MX_GPIO_Init+0xe0>)
 80012bc:	f043 0304 	orr.w	r3, r3, #4
 80012c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001380 <MX_GPIO_Init+0xe0>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001380 <MX_GPIO_Init+0xe0>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d2:	4a2b      	ldr	r2, [pc, #172]	@ (8001380 <MX_GPIO_Init+0xe0>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012da:	4b29      	ldr	r3, [pc, #164]	@ (8001380 <MX_GPIO_Init+0xe0>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	4b26      	ldr	r3, [pc, #152]	@ (8001380 <MX_GPIO_Init+0xe0>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ea:	4a25      	ldr	r2, [pc, #148]	@ (8001380 <MX_GPIO_Init+0xe0>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012f2:	4b23      	ldr	r3, [pc, #140]	@ (8001380 <MX_GPIO_Init+0xe0>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	2110      	movs	r1, #16
 8001302:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001306:	f000 fdab 	bl	8001e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SENSOR1_Pin */
  GPIO_InitStruct.Pin = SENSOR1_Pin;
 800130a:	2302      	movs	r3, #2
 800130c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001312:	2302      	movs	r3, #2
 8001314:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SENSOR1_GPIO_Port, &GPIO_InitStruct);
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	4619      	mov	r1, r3
 800131c:	4819      	ldr	r0, [pc, #100]	@ (8001384 <MX_GPIO_Init+0xe4>)
 800131e:	f000 fc05 	bl	8001b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001322:	2310      	movs	r3, #16
 8001324:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001326:	2301      	movs	r3, #1
 8001328:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2300      	movs	r3, #0
 8001330:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001332:	f107 030c 	add.w	r3, r7, #12
 8001336:	4619      	mov	r1, r3
 8001338:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800133c:	f000 fbf6 	bl	8001b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR5_Pin SENSOR6_Pin SENSOR7_Pin SENSOR13_Pin
                           SENSOR14_Pin SENSOR15_Pin SENSOR8_Pin SENSOR9_Pin
                           SENSOR10_Pin SENSOR11_Pin SENSOR12_Pin */
  GPIO_InitStruct.Pin = SENSOR5_Pin|SENSOR6_Pin|SENSOR7_Pin|SENSOR13_Pin
 8001340:	f641 63f7 	movw	r3, #7927	@ 0x1ef7
 8001344:	60fb      	str	r3, [r7, #12]
                          |SENSOR14_Pin|SENSOR15_Pin|SENSOR8_Pin|SENSOR9_Pin
                          |SENSOR10_Pin|SENSOR11_Pin|SENSOR12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800134a:	2302      	movs	r3, #2
 800134c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	4619      	mov	r1, r3
 8001354:	480c      	ldr	r0, [pc, #48]	@ (8001388 <MX_GPIO_Init+0xe8>)
 8001356:	f000 fbe9 	bl	8001b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR2_Pin SENSOR3_Pin SENSOR4_Pin */
  GPIO_InitStruct.Pin = SENSOR2_Pin|SENSOR3_Pin|SENSOR4_Pin;
 800135a:	f44f 4318 	mov.w	r3, #38912	@ 0x9800
 800135e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001360:	2300      	movs	r3, #0
 8001362:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001364:	2302      	movs	r3, #2
 8001366:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	4619      	mov	r1, r3
 800136e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001372:	f000 fbdb 	bl	8001b2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001376:	bf00      	nop
 8001378:	3720      	adds	r7, #32
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40021000 	.word	0x40021000
 8001384:	48000800 	.word	0x48000800
 8001388:	48000400 	.word	0x48000400

0800138c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001390:	b672      	cpsid	i
}
 8001392:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <Error_Handler+0x8>

08001398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139e:	4b0f      	ldr	r3, [pc, #60]	@ (80013dc <HAL_MspInit+0x44>)
 80013a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013a2:	4a0e      	ldr	r2, [pc, #56]	@ (80013dc <HAL_MspInit+0x44>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80013aa:	4b0c      	ldr	r3, [pc, #48]	@ (80013dc <HAL_MspInit+0x44>)
 80013ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b6:	4b09      	ldr	r3, [pc, #36]	@ (80013dc <HAL_MspInit+0x44>)
 80013b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ba:	4a08      	ldr	r2, [pc, #32]	@ (80013dc <HAL_MspInit+0x44>)
 80013bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80013c2:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <HAL_MspInit+0x44>)
 80013c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ca:	603b      	str	r3, [r7, #0]
 80013cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80013ce:	f000 fe03 	bl	8001fd8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40021000 	.word	0x40021000

080013e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	@ 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a17      	ldr	r2, [pc, #92]	@ (800145c <HAL_SPI_MspInit+0x7c>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d128      	bne.n	8001454 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001402:	4b17      	ldr	r3, [pc, #92]	@ (8001460 <HAL_SPI_MspInit+0x80>)
 8001404:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001406:	4a16      	ldr	r2, [pc, #88]	@ (8001460 <HAL_SPI_MspInit+0x80>)
 8001408:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800140c:	6613      	str	r3, [r2, #96]	@ 0x60
 800140e:	4b14      	ldr	r3, [pc, #80]	@ (8001460 <HAL_SPI_MspInit+0x80>)
 8001410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001412:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	4b11      	ldr	r3, [pc, #68]	@ (8001460 <HAL_SPI_MspInit+0x80>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800141e:	4a10      	ldr	r2, [pc, #64]	@ (8001460 <HAL_SPI_MspInit+0x80>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001426:	4b0e      	ldr	r3, [pc, #56]	@ (8001460 <HAL_SPI_MspInit+0x80>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001432:	23a0      	movs	r3, #160	@ 0xa0
 8001434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001442:	2305      	movs	r3, #5
 8001444:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001446:	f107 0314 	add.w	r3, r7, #20
 800144a:	4619      	mov	r1, r3
 800144c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001450:	f000 fb6c 	bl	8001b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001454:	bf00      	nop
 8001456:	3728      	adds	r7, #40	@ 0x28
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40013000 	.word	0x40013000
 8001460:	40021000 	.word	0x40021000

08001464 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b09a      	sub	sp, #104	@ 0x68
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800147c:	f107 0310 	add.w	r3, r7, #16
 8001480:	2244      	movs	r2, #68	@ 0x44
 8001482:	2100      	movs	r1, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f003 fa88 	bl	800499a <memset>
  if(huart->Instance==USART2)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a1f      	ldr	r2, [pc, #124]	@ (800150c <HAL_UART_MspInit+0xa8>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d136      	bne.n	8001502 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001494:	2302      	movs	r3, #2
 8001496:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001498:	2300      	movs	r3, #0
 800149a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800149c:	f107 0310 	add.w	r3, r7, #16
 80014a0:	4618      	mov	r0, r3
 80014a2:	f001 fad7 	bl	8002a54 <HAL_RCCEx_PeriphCLKConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014ac:	f7ff ff6e 	bl	800138c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014b0:	4b17      	ldr	r3, [pc, #92]	@ (8001510 <HAL_UART_MspInit+0xac>)
 80014b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b4:	4a16      	ldr	r2, [pc, #88]	@ (8001510 <HAL_UART_MspInit+0xac>)
 80014b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80014bc:	4b14      	ldr	r3, [pc, #80]	@ (8001510 <HAL_UART_MspInit+0xac>)
 80014be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c8:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <HAL_UART_MspInit+0xac>)
 80014ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014cc:	4a10      	ldr	r2, [pc, #64]	@ (8001510 <HAL_UART_MspInit+0xac>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001510 <HAL_UART_MspInit+0xac>)
 80014d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014e0:	230c      	movs	r3, #12
 80014e2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014f0:	2307      	movs	r3, #7
 80014f2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014f8:	4619      	mov	r1, r3
 80014fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014fe:	f000 fb15 	bl	8001b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001502:	bf00      	nop
 8001504:	3768      	adds	r7, #104	@ 0x68
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40004400 	.word	0x40004400
 8001510:	40021000 	.word	0x40021000

08001514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <NMI_Handler+0x4>

0800151c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001520:	bf00      	nop
 8001522:	e7fd      	b.n	8001520 <HardFault_Handler+0x4>

08001524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <MemManage_Handler+0x4>

0800152c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <BusFault_Handler+0x4>

08001534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001538:	bf00      	nop
 800153a:	e7fd      	b.n	8001538 <UsageFault_Handler+0x4>

0800153c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800156a:	f000 f957 	bl	800181c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}

08001572 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  return 1;
 8001576:	2301      	movs	r3, #1
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <_kill>:

int _kill(int pid, int sig)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800158c:	f003 fac2 	bl	8004b14 <__errno>
 8001590:	4603      	mov	r3, r0
 8001592:	2216      	movs	r2, #22
 8001594:	601a      	str	r2, [r3, #0]
  return -1;
 8001596:	f04f 33ff 	mov.w	r3, #4294967295
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <_exit>:

void _exit (int status)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015aa:	f04f 31ff 	mov.w	r1, #4294967295
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ffe7 	bl	8001582 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <_exit+0x12>

080015b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	e00a      	b.n	80015e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015ca:	f3af 8000 	nop.w
 80015ce:	4601      	mov	r1, r0
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	1c5a      	adds	r2, r3, #1
 80015d4:	60ba      	str	r2, [r7, #8]
 80015d6:	b2ca      	uxtb	r2, r1
 80015d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	3301      	adds	r3, #1
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dbf0      	blt.n	80015ca <_read+0x12>
  }

  return len;
 80015e8:	687b      	ldr	r3, [r7, #4]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b086      	sub	sp, #24
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	e009      	b.n	8001618 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	60ba      	str	r2, [r7, #8]
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	3301      	adds	r3, #1
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	429a      	cmp	r2, r3
 800161e:	dbf1      	blt.n	8001604 <_write+0x12>
  }
  return len;
 8001620:	687b      	ldr	r3, [r7, #4]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <_close>:

int _close(int file)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001632:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001652:	605a      	str	r2, [r3, #4]
  return 0;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <_isatty>:

int _isatty(int file)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800166a:	2301      	movs	r3, #1
}
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800169c:	4a14      	ldr	r2, [pc, #80]	@ (80016f0 <_sbrk+0x5c>)
 800169e:	4b15      	ldr	r3, [pc, #84]	@ (80016f4 <_sbrk+0x60>)
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016a8:	4b13      	ldr	r3, [pc, #76]	@ (80016f8 <_sbrk+0x64>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d102      	bne.n	80016b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b0:	4b11      	ldr	r3, [pc, #68]	@ (80016f8 <_sbrk+0x64>)
 80016b2:	4a12      	ldr	r2, [pc, #72]	@ (80016fc <_sbrk+0x68>)
 80016b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016b6:	4b10      	ldr	r3, [pc, #64]	@ (80016f8 <_sbrk+0x64>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d207      	bcs.n	80016d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016c4:	f003 fa26 	bl	8004b14 <__errno>
 80016c8:	4603      	mov	r3, r0
 80016ca:	220c      	movs	r2, #12
 80016cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	e009      	b.n	80016e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016d4:	4b08      	ldr	r3, [pc, #32]	@ (80016f8 <_sbrk+0x64>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016da:	4b07      	ldr	r3, [pc, #28]	@ (80016f8 <_sbrk+0x64>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	4a05      	ldr	r2, [pc, #20]	@ (80016f8 <_sbrk+0x64>)
 80016e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016e6:	68fb      	ldr	r3, [r7, #12]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20008000 	.word	0x20008000
 80016f4:	00000400 	.word	0x00000400
 80016f8:	20000420 	.word	0x20000420
 80016fc:	20000578 	.word	0x20000578

08001700 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001704:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <SystemInit+0x20>)
 8001706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800170a:	4a05      	ldr	r2, [pc, #20]	@ (8001720 <SystemInit+0x20>)
 800170c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001710:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001724:	480d      	ldr	r0, [pc, #52]	@ (800175c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001726:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001728:	f7ff ffea 	bl	8001700 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800172c:	480c      	ldr	r0, [pc, #48]	@ (8001760 <LoopForever+0x6>)
  ldr r1, =_edata
 800172e:	490d      	ldr	r1, [pc, #52]	@ (8001764 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001730:	4a0d      	ldr	r2, [pc, #52]	@ (8001768 <LoopForever+0xe>)
  movs r3, #0
 8001732:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001734:	e002      	b.n	800173c <LoopCopyDataInit>

08001736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173a:	3304      	adds	r3, #4

0800173c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800173c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001740:	d3f9      	bcc.n	8001736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001742:	4a0a      	ldr	r2, [pc, #40]	@ (800176c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001744:	4c0a      	ldr	r4, [pc, #40]	@ (8001770 <LoopForever+0x16>)
  movs r3, #0
 8001746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001748:	e001      	b.n	800174e <LoopFillZerobss>

0800174a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800174c:	3204      	adds	r2, #4

0800174e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001750:	d3fb      	bcc.n	800174a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001752:	f003 f9e5 	bl	8004b20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001756:	f7ff f8c1 	bl	80008dc <main>

0800175a <LoopForever>:

LoopForever:
    b LoopForever
 800175a:	e7fe      	b.n	800175a <LoopForever>
  ldr   r0, =_estack
 800175c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001764:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001768:	08005a90 	.word	0x08005a90
  ldr r2, =_sbss
 800176c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001770:	20000574 	.word	0x20000574

08001774 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001774:	e7fe      	b.n	8001774 <ADC1_2_IRQHandler>

08001776 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800177c:	2300      	movs	r3, #0
 800177e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001780:	2003      	movs	r0, #3
 8001782:	f000 f93d 	bl	8001a00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001786:	200f      	movs	r0, #15
 8001788:	f000 f80e 	bl	80017a8 <HAL_InitTick>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d002      	beq.n	8001798 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	71fb      	strb	r3, [r7, #7]
 8001796:	e001      	b.n	800179c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001798:	f7ff fdfe 	bl	8001398 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800179c:	79fb      	ldrb	r3, [r7, #7]

}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80017b4:	4b16      	ldr	r3, [pc, #88]	@ (8001810 <HAL_InitTick+0x68>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d022      	beq.n	8001802 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80017bc:	4b15      	ldr	r3, [pc, #84]	@ (8001814 <HAL_InitTick+0x6c>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b13      	ldr	r3, [pc, #76]	@ (8001810 <HAL_InitTick+0x68>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80017c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80017cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 f93a 	bl	8001a4a <HAL_SYSTICK_Config>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10f      	bne.n	80017fc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b0f      	cmp	r3, #15
 80017e0:	d809      	bhi.n	80017f6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e2:	2200      	movs	r2, #0
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	f04f 30ff 	mov.w	r0, #4294967295
 80017ea:	f000 f914 	bl	8001a16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001818 <HAL_InitTick+0x70>)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	e007      	b.n	8001806 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	73fb      	strb	r3, [r7, #15]
 80017fa:	e004      	b.n	8001806 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	73fb      	strb	r3, [r7, #15]
 8001800:	e001      	b.n	8001806 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001806:	7bfb      	ldrb	r3, [r7, #15]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20000010 	.word	0x20000010
 8001814:	20000008 	.word	0x20000008
 8001818:	2000000c 	.word	0x2000000c

0800181c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001820:	4b05      	ldr	r3, [pc, #20]	@ (8001838 <HAL_IncTick+0x1c>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b05      	ldr	r3, [pc, #20]	@ (800183c <HAL_IncTick+0x20>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4413      	add	r3, r2
 800182a:	4a03      	ldr	r2, [pc, #12]	@ (8001838 <HAL_IncTick+0x1c>)
 800182c:	6013      	str	r3, [r2, #0]
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	20000424 	.word	0x20000424
 800183c:	20000010 	.word	0x20000010

08001840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return uwTick;
 8001844:	4b03      	ldr	r3, [pc, #12]	@ (8001854 <HAL_GetTick+0x14>)
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20000424 	.word	0x20000424

08001858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001860:	f7ff ffee 	bl	8001840 <HAL_GetTick>
 8001864:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001870:	d004      	beq.n	800187c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001872:	4b09      	ldr	r3, [pc, #36]	@ (8001898 <HAL_Delay+0x40>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	4413      	add	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800187c:	bf00      	nop
 800187e:	f7ff ffdf 	bl	8001840 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	429a      	cmp	r2, r3
 800188c:	d8f7      	bhi.n	800187e <HAL_Delay+0x26>
  {
  }
}
 800188e:	bf00      	nop
 8001890:	bf00      	nop
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000010 	.word	0x20000010

0800189c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ac:	4b0c      	ldr	r3, [pc, #48]	@ (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018b8:	4013      	ands	r3, r2
 80018ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ce:	4a04      	ldr	r2, [pc, #16]	@ (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	60d3      	str	r3, [r2, #12]
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e8:	4b04      	ldr	r3, [pc, #16]	@ (80018fc <__NVIC_GetPriorityGrouping+0x18>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	0a1b      	lsrs	r3, r3, #8
 80018ee:	f003 0307 	and.w	r3, r3, #7
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	6039      	str	r1, [r7, #0]
 800190a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001910:	2b00      	cmp	r3, #0
 8001912:	db0a      	blt.n	800192a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	b2da      	uxtb	r2, r3
 8001918:	490c      	ldr	r1, [pc, #48]	@ (800194c <__NVIC_SetPriority+0x4c>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	0112      	lsls	r2, r2, #4
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	440b      	add	r3, r1
 8001924:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001928:	e00a      	b.n	8001940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4908      	ldr	r1, [pc, #32]	@ (8001950 <__NVIC_SetPriority+0x50>)
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	3b04      	subs	r3, #4
 8001938:	0112      	lsls	r2, r2, #4
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	440b      	add	r3, r1
 800193e:	761a      	strb	r2, [r3, #24]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000e100 	.word	0xe000e100
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001954:	b480      	push	{r7}
 8001956:	b089      	sub	sp, #36	@ 0x24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f1c3 0307 	rsb	r3, r3, #7
 800196e:	2b04      	cmp	r3, #4
 8001970:	bf28      	it	cs
 8001972:	2304      	movcs	r3, #4
 8001974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3304      	adds	r3, #4
 800197a:	2b06      	cmp	r3, #6
 800197c:	d902      	bls.n	8001984 <NVIC_EncodePriority+0x30>
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3b03      	subs	r3, #3
 8001982:	e000      	b.n	8001986 <NVIC_EncodePriority+0x32>
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	f04f 32ff 	mov.w	r2, #4294967295
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43da      	mvns	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	401a      	ands	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800199c:	f04f 31ff 	mov.w	r1, #4294967295
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	43d9      	mvns	r1, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	4313      	orrs	r3, r2
         );
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3724      	adds	r7, #36	@ 0x24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019cc:	d301      	bcc.n	80019d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00f      	b.n	80019f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d2:	4a0a      	ldr	r2, [pc, #40]	@ (80019fc <SysTick_Config+0x40>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019da:	210f      	movs	r1, #15
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295
 80019e0:	f7ff ff8e 	bl	8001900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e4:	4b05      	ldr	r3, [pc, #20]	@ (80019fc <SysTick_Config+0x40>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ea:	4b04      	ldr	r3, [pc, #16]	@ (80019fc <SysTick_Config+0x40>)
 80019ec:	2207      	movs	r2, #7
 80019ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	e000e010 	.word	0xe000e010

08001a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ff47 	bl	800189c <__NVIC_SetPriorityGrouping>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b086      	sub	sp, #24
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a24:	f7ff ff5e 	bl	80018e4 <__NVIC_GetPriorityGrouping>
 8001a28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	68b9      	ldr	r1, [r7, #8]
 8001a2e:	6978      	ldr	r0, [r7, #20]
 8001a30:	f7ff ff90 	bl	8001954 <NVIC_EncodePriority>
 8001a34:	4602      	mov	r2, r0
 8001a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff5f 	bl	8001900 <__NVIC_SetPriority>
}
 8001a42:	bf00      	nop
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff ffb2 	bl	80019bc <SysTick_Config>
 8001a58:	4603      	mov	r3, r0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b085      	sub	sp, #20
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d005      	beq.n	8001a86 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
 8001a84:	e037      	b.n	8001af6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 020e 	bic.w	r2, r2, #14
 8001a94:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aa0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001aa4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0201 	bic.w	r2, r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aba:	f003 021f 	and.w	r2, r3, #31
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ad2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00c      	beq.n	8001af6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ae6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001aea:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001af4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b087      	sub	sp, #28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b3a:	e15a      	b.n	8001df2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	2101      	movs	r1, #1
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	fa01 f303 	lsl.w	r3, r1, r3
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 814c 	beq.w	8001dec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d005      	beq.n	8001b6c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d130      	bne.n	8001bce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	2203      	movs	r2, #3
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	68da      	ldr	r2, [r3, #12]
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	091b      	lsrs	r3, r3, #4
 8001bb8:	f003 0201 	and.w	r2, r3, #1
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	d017      	beq.n	8001c0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	2203      	movs	r2, #3
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43db      	mvns	r3, r3
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d123      	bne.n	8001c5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	08da      	lsrs	r2, r3, #3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	3208      	adds	r2, #8
 8001c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	220f      	movs	r2, #15
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4013      	ands	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	691a      	ldr	r2, [r3, #16]
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	08da      	lsrs	r2, r3, #3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3208      	adds	r2, #8
 8001c58:	6939      	ldr	r1, [r7, #16]
 8001c5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	2203      	movs	r2, #3
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4013      	ands	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 0203 	and.w	r2, r3, #3
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 80a6 	beq.w	8001dec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca0:	4b5b      	ldr	r3, [pc, #364]	@ (8001e10 <HAL_GPIO_Init+0x2e4>)
 8001ca2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ca4:	4a5a      	ldr	r2, [pc, #360]	@ (8001e10 <HAL_GPIO_Init+0x2e4>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cac:	4b58      	ldr	r3, [pc, #352]	@ (8001e10 <HAL_GPIO_Init+0x2e4>)
 8001cae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cb8:	4a56      	ldr	r2, [pc, #344]	@ (8001e14 <HAL_GPIO_Init+0x2e8>)
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	089b      	lsrs	r3, r3, #2
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	220f      	movs	r2, #15
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ce2:	d01f      	beq.n	8001d24 <HAL_GPIO_Init+0x1f8>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a4c      	ldr	r2, [pc, #304]	@ (8001e18 <HAL_GPIO_Init+0x2ec>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d019      	beq.n	8001d20 <HAL_GPIO_Init+0x1f4>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a4b      	ldr	r2, [pc, #300]	@ (8001e1c <HAL_GPIO_Init+0x2f0>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d013      	beq.n	8001d1c <HAL_GPIO_Init+0x1f0>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a4a      	ldr	r2, [pc, #296]	@ (8001e20 <HAL_GPIO_Init+0x2f4>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d00d      	beq.n	8001d18 <HAL_GPIO_Init+0x1ec>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a49      	ldr	r2, [pc, #292]	@ (8001e24 <HAL_GPIO_Init+0x2f8>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d007      	beq.n	8001d14 <HAL_GPIO_Init+0x1e8>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a48      	ldr	r2, [pc, #288]	@ (8001e28 <HAL_GPIO_Init+0x2fc>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d101      	bne.n	8001d10 <HAL_GPIO_Init+0x1e4>
 8001d0c:	2305      	movs	r3, #5
 8001d0e:	e00a      	b.n	8001d26 <HAL_GPIO_Init+0x1fa>
 8001d10:	2306      	movs	r3, #6
 8001d12:	e008      	b.n	8001d26 <HAL_GPIO_Init+0x1fa>
 8001d14:	2304      	movs	r3, #4
 8001d16:	e006      	b.n	8001d26 <HAL_GPIO_Init+0x1fa>
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e004      	b.n	8001d26 <HAL_GPIO_Init+0x1fa>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e002      	b.n	8001d26 <HAL_GPIO_Init+0x1fa>
 8001d20:	2301      	movs	r3, #1
 8001d22:	e000      	b.n	8001d26 <HAL_GPIO_Init+0x1fa>
 8001d24:	2300      	movs	r3, #0
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	f002 0203 	and.w	r2, r2, #3
 8001d2c:	0092      	lsls	r2, r2, #2
 8001d2e:	4093      	lsls	r3, r2
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d36:	4937      	ldr	r1, [pc, #220]	@ (8001e14 <HAL_GPIO_Init+0x2e8>)
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	089b      	lsrs	r3, r3, #2
 8001d3c:	3302      	adds	r3, #2
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d44:	4b39      	ldr	r3, [pc, #228]	@ (8001e2c <HAL_GPIO_Init+0x300>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d003      	beq.n	8001d68 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d68:	4a30      	ldr	r2, [pc, #192]	@ (8001e2c <HAL_GPIO_Init+0x300>)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d6e:	4b2f      	ldr	r3, [pc, #188]	@ (8001e2c <HAL_GPIO_Init+0x300>)
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d92:	4a26      	ldr	r2, [pc, #152]	@ (8001e2c <HAL_GPIO_Init+0x300>)
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001d98:	4b24      	ldr	r3, [pc, #144]	@ (8001e2c <HAL_GPIO_Init+0x300>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4013      	ands	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001dbc:	4a1b      	ldr	r2, [pc, #108]	@ (8001e2c <HAL_GPIO_Init+0x300>)
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e2c <HAL_GPIO_Init+0x300>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001de6:	4a11      	ldr	r2, [pc, #68]	@ (8001e2c <HAL_GPIO_Init+0x300>)
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	3301      	adds	r3, #1
 8001df0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f47f ae9d 	bne.w	8001b3c <HAL_GPIO_Init+0x10>
  }
}
 8001e02:	bf00      	nop
 8001e04:	bf00      	nop
 8001e06:	371c      	adds	r7, #28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	40021000 	.word	0x40021000
 8001e14:	40010000 	.word	0x40010000
 8001e18:	48000400 	.word	0x48000400
 8001e1c:	48000800 	.word	0x48000800
 8001e20:	48000c00 	.word	0x48000c00
 8001e24:	48001000 	.word	0x48001000
 8001e28:	48001400 	.word	0x48001400
 8001e2c:	40010400 	.word	0x40010400

08001e30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	887b      	ldrh	r3, [r7, #2]
 8001e42:	4013      	ands	r3, r2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	73fb      	strb	r3, [r7, #15]
 8001e4c:	e001      	b.n	8001e52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	807b      	strh	r3, [r7, #2]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e70:	787b      	ldrb	r3, [r7, #1]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e76:	887a      	ldrh	r2, [r7, #2]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e7c:	e002      	b.n	8001e84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e7e:	887a      	ldrh	r2, [r7, #2]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d141      	bne.n	8001f22 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e9e:	4b4b      	ldr	r3, [pc, #300]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ea6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eaa:	d131      	bne.n	8001f10 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001eac:	4b47      	ldr	r3, [pc, #284]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001eb2:	4a46      	ldr	r2, [pc, #280]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001eb8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ebc:	4b43      	ldr	r3, [pc, #268]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ec4:	4a41      	ldr	r2, [pc, #260]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ecc:	4b40      	ldr	r3, [pc, #256]	@ (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2232      	movs	r2, #50	@ 0x32
 8001ed2:	fb02 f303 	mul.w	r3, r2, r3
 8001ed6:	4a3f      	ldr	r2, [pc, #252]	@ (8001fd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8001edc:	0c9b      	lsrs	r3, r3, #18
 8001ede:	3301      	adds	r3, #1
 8001ee0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ee2:	e002      	b.n	8001eea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eea:	4b38      	ldr	r3, [pc, #224]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ef6:	d102      	bne.n	8001efe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f2      	bne.n	8001ee4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001efe:	4b33      	ldr	r3, [pc, #204]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f0a:	d158      	bne.n	8001fbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e057      	b.n	8001fc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f10:	4b2e      	ldr	r3, [pc, #184]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f16:	4a2d      	ldr	r2, [pc, #180]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001f20:	e04d      	b.n	8001fbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f28:	d141      	bne.n	8001fae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f2a:	4b28      	ldr	r3, [pc, #160]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f36:	d131      	bne.n	8001f9c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f38:	4b24      	ldr	r3, [pc, #144]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f3e:	4a23      	ldr	r2, [pc, #140]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f48:	4b20      	ldr	r3, [pc, #128]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f50:	4a1e      	ldr	r2, [pc, #120]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f58:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2232      	movs	r2, #50	@ 0x32
 8001f5e:	fb02 f303 	mul.w	r3, r2, r3
 8001f62:	4a1c      	ldr	r2, [pc, #112]	@ (8001fd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f64:	fba2 2303 	umull	r2, r3, r2, r3
 8001f68:	0c9b      	lsrs	r3, r3, #18
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f6e:	e002      	b.n	8001f76 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f76:	4b15      	ldr	r3, [pc, #84]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f82:	d102      	bne.n	8001f8a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f2      	bne.n	8001f70 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f8a:	4b10      	ldr	r3, [pc, #64]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f96:	d112      	bne.n	8001fbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e011      	b.n	8001fc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fa8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001fac:	e007      	b.n	8001fbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fae:	4b07      	ldr	r3, [pc, #28]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fb6:	4a05      	ldr	r2, [pc, #20]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fbc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	40007000 	.word	0x40007000
 8001fd0:	20000008 	.word	0x20000008
 8001fd4:	431bde83 	.word	0x431bde83

08001fd8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001fdc:	4b05      	ldr	r3, [pc, #20]	@ (8001ff4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	4a04      	ldr	r2, [pc, #16]	@ (8001ff4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001fe2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fe6:	6093      	str	r3, [r2, #8]
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40007000 	.word	0x40007000

08001ff8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e2fe      	b.n	8002608 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d075      	beq.n	8002102 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002016:	4b97      	ldr	r3, [pc, #604]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002020:	4b94      	ldr	r3, [pc, #592]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	2b0c      	cmp	r3, #12
 800202e:	d102      	bne.n	8002036 <HAL_RCC_OscConfig+0x3e>
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	2b03      	cmp	r3, #3
 8002034:	d002      	beq.n	800203c <HAL_RCC_OscConfig+0x44>
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	2b08      	cmp	r3, #8
 800203a:	d10b      	bne.n	8002054 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800203c:	4b8d      	ldr	r3, [pc, #564]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d05b      	beq.n	8002100 <HAL_RCC_OscConfig+0x108>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d157      	bne.n	8002100 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e2d9      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800205c:	d106      	bne.n	800206c <HAL_RCC_OscConfig+0x74>
 800205e:	4b85      	ldr	r3, [pc, #532]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a84      	ldr	r2, [pc, #528]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	e01d      	b.n	80020a8 <HAL_RCC_OscConfig+0xb0>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002074:	d10c      	bne.n	8002090 <HAL_RCC_OscConfig+0x98>
 8002076:	4b7f      	ldr	r3, [pc, #508]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a7e      	ldr	r2, [pc, #504]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 800207c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	4b7c      	ldr	r3, [pc, #496]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a7b      	ldr	r2, [pc, #492]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	e00b      	b.n	80020a8 <HAL_RCC_OscConfig+0xb0>
 8002090:	4b78      	ldr	r3, [pc, #480]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a77      	ldr	r2, [pc, #476]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002096:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	4b75      	ldr	r3, [pc, #468]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a74      	ldr	r2, [pc, #464]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 80020a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d013      	beq.n	80020d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7ff fbc6 	bl	8001840 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b8:	f7ff fbc2 	bl	8001840 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b64      	cmp	r3, #100	@ 0x64
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e29e      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ca:	4b6a      	ldr	r3, [pc, #424]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0xc0>
 80020d6:	e014      	b.n	8002102 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7ff fbb2 	bl	8001840 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e0:	f7ff fbae 	bl	8001840 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b64      	cmp	r3, #100	@ 0x64
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e28a      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020f2:	4b60      	ldr	r3, [pc, #384]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0xe8>
 80020fe:	e000      	b.n	8002102 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d075      	beq.n	80021fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800210e:	4b59      	ldr	r3, [pc, #356]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002118:	4b56      	ldr	r3, [pc, #344]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	2b0c      	cmp	r3, #12
 8002126:	d102      	bne.n	800212e <HAL_RCC_OscConfig+0x136>
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d002      	beq.n	8002134 <HAL_RCC_OscConfig+0x13c>
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2b04      	cmp	r3, #4
 8002132:	d11f      	bne.n	8002174 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002134:	4b4f      	ldr	r3, [pc, #316]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_RCC_OscConfig+0x154>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e25d      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214c:	4b49      	ldr	r3, [pc, #292]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	061b      	lsls	r3, r3, #24
 800215a:	4946      	ldr	r1, [pc, #280]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002160:	4b45      	ldr	r3, [pc, #276]	@ (8002278 <HAL_RCC_OscConfig+0x280>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff fb1f 	bl	80017a8 <HAL_InitTick>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d043      	beq.n	80021f8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e249      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d023      	beq.n	80021c4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800217c:	4b3d      	ldr	r3, [pc, #244]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a3c      	ldr	r2, [pc, #240]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002182:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002188:	f7ff fb5a 	bl	8001840 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002190:	f7ff fb56 	bl	8001840 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e232      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021a2:	4b34      	ldr	r3, [pc, #208]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f0      	beq.n	8002190 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ae:	4b31      	ldr	r3, [pc, #196]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	061b      	lsls	r3, r3, #24
 80021bc:	492d      	ldr	r1, [pc, #180]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	604b      	str	r3, [r1, #4]
 80021c2:	e01a      	b.n	80021fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a2a      	ldr	r2, [pc, #168]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 80021ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7ff fb36 	bl	8001840 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d8:	f7ff fb32 	bl	8001840 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e20e      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021ea:	4b22      	ldr	r3, [pc, #136]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x1e0>
 80021f6:	e000      	b.n	80021fa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d041      	beq.n	800228a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d01c      	beq.n	8002248 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800220e:	4b19      	ldr	r3, [pc, #100]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002210:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002214:	4a17      	ldr	r2, [pc, #92]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221e:	f7ff fb0f 	bl	8001840 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002226:	f7ff fb0b 	bl	8001840 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e1e7      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002238:	4b0e      	ldr	r3, [pc, #56]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 800223a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0ef      	beq.n	8002226 <HAL_RCC_OscConfig+0x22e>
 8002246:	e020      	b.n	800228a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002248:	4b0a      	ldr	r3, [pc, #40]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 800224a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800224e:	4a09      	ldr	r2, [pc, #36]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002250:	f023 0301 	bic.w	r3, r3, #1
 8002254:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002258:	f7ff faf2 	bl	8001840 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800225e:	e00d      	b.n	800227c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002260:	f7ff faee 	bl	8001840 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d906      	bls.n	800227c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e1ca      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
 8002272:	bf00      	nop
 8002274:	40021000 	.word	0x40021000
 8002278:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800227c:	4b8c      	ldr	r3, [pc, #560]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 800227e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1ea      	bne.n	8002260 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 80a6 	beq.w	80023e4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002298:	2300      	movs	r3, #0
 800229a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800229c:	4b84      	ldr	r3, [pc, #528]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 800229e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_RCC_OscConfig+0x2b4>
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <HAL_RCC_OscConfig+0x2b6>
 80022ac:	2300      	movs	r3, #0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00d      	beq.n	80022ce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b2:	4b7f      	ldr	r3, [pc, #508]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 80022b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b6:	4a7e      	ldr	r2, [pc, #504]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 80022b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80022be:	4b7c      	ldr	r3, [pc, #496]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 80022c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022ca:	2301      	movs	r3, #1
 80022cc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ce:	4b79      	ldr	r3, [pc, #484]	@ (80024b4 <HAL_RCC_OscConfig+0x4bc>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d118      	bne.n	800230c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022da:	4b76      	ldr	r3, [pc, #472]	@ (80024b4 <HAL_RCC_OscConfig+0x4bc>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a75      	ldr	r2, [pc, #468]	@ (80024b4 <HAL_RCC_OscConfig+0x4bc>)
 80022e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022e6:	f7ff faab 	bl	8001840 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ee:	f7ff faa7 	bl	8001840 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e183      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002300:	4b6c      	ldr	r3, [pc, #432]	@ (80024b4 <HAL_RCC_OscConfig+0x4bc>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f0      	beq.n	80022ee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d108      	bne.n	8002326 <HAL_RCC_OscConfig+0x32e>
 8002314:	4b66      	ldr	r3, [pc, #408]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800231a:	4a65      	ldr	r2, [pc, #404]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002324:	e024      	b.n	8002370 <HAL_RCC_OscConfig+0x378>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2b05      	cmp	r3, #5
 800232c:	d110      	bne.n	8002350 <HAL_RCC_OscConfig+0x358>
 800232e:	4b60      	ldr	r3, [pc, #384]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002334:	4a5e      	ldr	r2, [pc, #376]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002336:	f043 0304 	orr.w	r3, r3, #4
 800233a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800233e:	4b5c      	ldr	r3, [pc, #368]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002344:	4a5a      	ldr	r2, [pc, #360]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800234e:	e00f      	b.n	8002370 <HAL_RCC_OscConfig+0x378>
 8002350:	4b57      	ldr	r3, [pc, #348]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002356:	4a56      	ldr	r2, [pc, #344]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002358:	f023 0301 	bic.w	r3, r3, #1
 800235c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002360:	4b53      	ldr	r3, [pc, #332]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002366:	4a52      	ldr	r2, [pc, #328]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002368:	f023 0304 	bic.w	r3, r3, #4
 800236c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d016      	beq.n	80023a6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002378:	f7ff fa62 	bl	8001840 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800237e:	e00a      	b.n	8002396 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002380:	f7ff fa5e 	bl	8001840 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800238e:	4293      	cmp	r3, r2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e138      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002396:	4b46      	ldr	r3, [pc, #280]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0ed      	beq.n	8002380 <HAL_RCC_OscConfig+0x388>
 80023a4:	e015      	b.n	80023d2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a6:	f7ff fa4b 	bl	8001840 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023ac:	e00a      	b.n	80023c4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ae:	f7ff fa47 	bl	8001840 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023bc:	4293      	cmp	r3, r2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e121      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023c4:	4b3a      	ldr	r3, [pc, #232]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 80023c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1ed      	bne.n	80023ae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023d2:	7ffb      	ldrb	r3, [r7, #31]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d105      	bne.n	80023e4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d8:	4b35      	ldr	r3, [pc, #212]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 80023da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023dc:	4a34      	ldr	r2, [pc, #208]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 80023de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023e2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0320 	and.w	r3, r3, #32
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d03c      	beq.n	800246a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d01c      	beq.n	8002432 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023f8:	4b2d      	ldr	r3, [pc, #180]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 80023fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023fe:	4a2c      	ldr	r2, [pc, #176]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002408:	f7ff fa1a 	bl	8001840 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002410:	f7ff fa16 	bl	8001840 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e0f2      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002422:	4b23      	ldr	r3, [pc, #140]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002424:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0ef      	beq.n	8002410 <HAL_RCC_OscConfig+0x418>
 8002430:	e01b      	b.n	800246a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002432:	4b1f      	ldr	r3, [pc, #124]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002434:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002438:	4a1d      	ldr	r2, [pc, #116]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 800243a:	f023 0301 	bic.w	r3, r3, #1
 800243e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002442:	f7ff f9fd 	bl	8001840 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800244a:	f7ff f9f9 	bl	8001840 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e0d5      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800245c:	4b14      	ldr	r3, [pc, #80]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 800245e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1ef      	bne.n	800244a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 80c9 	beq.w	8002606 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002474:	4b0e      	ldr	r3, [pc, #56]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 030c 	and.w	r3, r3, #12
 800247c:	2b0c      	cmp	r3, #12
 800247e:	f000 8083 	beq.w	8002588 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d15e      	bne.n	8002548 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248a:	4b09      	ldr	r3, [pc, #36]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a08      	ldr	r2, [pc, #32]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002490:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002494:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002496:	f7ff f9d3 	bl	8001840 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800249c:	e00c      	b.n	80024b8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800249e:	f7ff f9cf 	bl	8001840 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d905      	bls.n	80024b8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e0ab      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024b8:	4b55      	ldr	r3, [pc, #340]	@ (8002610 <HAL_RCC_OscConfig+0x618>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1ec      	bne.n	800249e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024c4:	4b52      	ldr	r3, [pc, #328]	@ (8002610 <HAL_RCC_OscConfig+0x618>)
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	4b52      	ldr	r3, [pc, #328]	@ (8002614 <HAL_RCC_OscConfig+0x61c>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6a11      	ldr	r1, [r2, #32]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024d4:	3a01      	subs	r2, #1
 80024d6:	0112      	lsls	r2, r2, #4
 80024d8:	4311      	orrs	r1, r2
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80024de:	0212      	lsls	r2, r2, #8
 80024e0:	4311      	orrs	r1, r2
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80024e6:	0852      	lsrs	r2, r2, #1
 80024e8:	3a01      	subs	r2, #1
 80024ea:	0552      	lsls	r2, r2, #21
 80024ec:	4311      	orrs	r1, r2
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80024f2:	0852      	lsrs	r2, r2, #1
 80024f4:	3a01      	subs	r2, #1
 80024f6:	0652      	lsls	r2, r2, #25
 80024f8:	4311      	orrs	r1, r2
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80024fe:	06d2      	lsls	r2, r2, #27
 8002500:	430a      	orrs	r2, r1
 8002502:	4943      	ldr	r1, [pc, #268]	@ (8002610 <HAL_RCC_OscConfig+0x618>)
 8002504:	4313      	orrs	r3, r2
 8002506:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002508:	4b41      	ldr	r3, [pc, #260]	@ (8002610 <HAL_RCC_OscConfig+0x618>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a40      	ldr	r2, [pc, #256]	@ (8002610 <HAL_RCC_OscConfig+0x618>)
 800250e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002512:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002514:	4b3e      	ldr	r3, [pc, #248]	@ (8002610 <HAL_RCC_OscConfig+0x618>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	4a3d      	ldr	r2, [pc, #244]	@ (8002610 <HAL_RCC_OscConfig+0x618>)
 800251a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800251e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002520:	f7ff f98e 	bl	8001840 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002528:	f7ff f98a 	bl	8001840 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e066      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800253a:	4b35      	ldr	r3, [pc, #212]	@ (8002610 <HAL_RCC_OscConfig+0x618>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0x530>
 8002546:	e05e      	b.n	8002606 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002548:	4b31      	ldr	r3, [pc, #196]	@ (8002610 <HAL_RCC_OscConfig+0x618>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a30      	ldr	r2, [pc, #192]	@ (8002610 <HAL_RCC_OscConfig+0x618>)
 800254e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002554:	f7ff f974 	bl	8001840 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255c:	f7ff f970 	bl	8001840 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e04c      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800256e:	4b28      	ldr	r3, [pc, #160]	@ (8002610 <HAL_RCC_OscConfig+0x618>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800257a:	4b25      	ldr	r3, [pc, #148]	@ (8002610 <HAL_RCC_OscConfig+0x618>)
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	4924      	ldr	r1, [pc, #144]	@ (8002610 <HAL_RCC_OscConfig+0x618>)
 8002580:	4b25      	ldr	r3, [pc, #148]	@ (8002618 <HAL_RCC_OscConfig+0x620>)
 8002582:	4013      	ands	r3, r2
 8002584:	60cb      	str	r3, [r1, #12]
 8002586:	e03e      	b.n	8002606 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e039      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002594:	4b1e      	ldr	r3, [pc, #120]	@ (8002610 <HAL_RCC_OscConfig+0x618>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f003 0203 	and.w	r2, r3, #3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d12c      	bne.n	8002602 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b2:	3b01      	subs	r3, #1
 80025b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d123      	bne.n	8002602 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d11b      	bne.n	8002602 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d113      	bne.n	8002602 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e4:	085b      	lsrs	r3, r3, #1
 80025e6:	3b01      	subs	r3, #1
 80025e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d109      	bne.n	8002602 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025f8:	085b      	lsrs	r3, r3, #1
 80025fa:	3b01      	subs	r3, #1
 80025fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d001      	beq.n	8002606 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3720      	adds	r7, #32
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40021000 	.word	0x40021000
 8002614:	019f800c 	.word	0x019f800c
 8002618:	feeefffc 	.word	0xfeeefffc

0800261c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e11e      	b.n	8002872 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002634:	4b91      	ldr	r3, [pc, #580]	@ (800287c <HAL_RCC_ClockConfig+0x260>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 030f 	and.w	r3, r3, #15
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d910      	bls.n	8002664 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002642:	4b8e      	ldr	r3, [pc, #568]	@ (800287c <HAL_RCC_ClockConfig+0x260>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f023 020f 	bic.w	r2, r3, #15
 800264a:	498c      	ldr	r1, [pc, #560]	@ (800287c <HAL_RCC_ClockConfig+0x260>)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	4313      	orrs	r3, r2
 8002650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002652:	4b8a      	ldr	r3, [pc, #552]	@ (800287c <HAL_RCC_ClockConfig+0x260>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	d001      	beq.n	8002664 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e106      	b.n	8002872 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d073      	beq.n	8002758 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b03      	cmp	r3, #3
 8002676:	d129      	bne.n	80026cc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002678:	4b81      	ldr	r3, [pc, #516]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0f4      	b.n	8002872 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002688:	f000 f99e 	bl	80029c8 <RCC_GetSysClockFreqFromPLLSource>
 800268c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4a7c      	ldr	r2, [pc, #496]	@ (8002884 <HAL_RCC_ClockConfig+0x268>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d93f      	bls.n	8002716 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002696:	4b7a      	ldr	r3, [pc, #488]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d009      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d033      	beq.n	8002716 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d12f      	bne.n	8002716 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026b6:	4b72      	ldr	r3, [pc, #456]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026be:	4a70      	ldr	r2, [pc, #448]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 80026c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80026c6:	2380      	movs	r3, #128	@ 0x80
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	e024      	b.n	8002716 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d107      	bne.n	80026e4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d109      	bne.n	80026f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0c6      	b.n	8002872 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026e4:	4b66      	ldr	r3, [pc, #408]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0be      	b.n	8002872 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80026f4:	f000 f8ce 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 80026f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	4a61      	ldr	r2, [pc, #388]	@ (8002884 <HAL_RCC_ClockConfig+0x268>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d909      	bls.n	8002716 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002702:	4b5f      	ldr	r3, [pc, #380]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800270a:	4a5d      	ldr	r2, [pc, #372]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 800270c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002710:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002712:	2380      	movs	r3, #128	@ 0x80
 8002714:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002716:	4b5a      	ldr	r3, [pc, #360]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f023 0203 	bic.w	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	4957      	ldr	r1, [pc, #348]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 8002724:	4313      	orrs	r3, r2
 8002726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002728:	f7ff f88a 	bl	8001840 <HAL_GetTick>
 800272c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272e:	e00a      	b.n	8002746 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002730:	f7ff f886 	bl	8001840 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e095      	b.n	8002872 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002746:	4b4e      	ldr	r3, [pc, #312]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 020c 	and.w	r2, r3, #12
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	429a      	cmp	r2, r3
 8002756:	d1eb      	bne.n	8002730 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d023      	beq.n	80027ac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002770:	4b43      	ldr	r3, [pc, #268]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	4a42      	ldr	r2, [pc, #264]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 8002776:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800277a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d007      	beq.n	8002798 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002788:	4b3d      	ldr	r3, [pc, #244]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002790:	4a3b      	ldr	r2, [pc, #236]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 8002792:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002796:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002798:	4b39      	ldr	r3, [pc, #228]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	4936      	ldr	r1, [pc, #216]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	608b      	str	r3, [r1, #8]
 80027aa:	e008      	b.n	80027be <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	2b80      	cmp	r3, #128	@ 0x80
 80027b0:	d105      	bne.n	80027be <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80027b2:	4b33      	ldr	r3, [pc, #204]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	4a32      	ldr	r2, [pc, #200]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 80027b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027bc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027be:	4b2f      	ldr	r3, [pc, #188]	@ (800287c <HAL_RCC_ClockConfig+0x260>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d21d      	bcs.n	8002808 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027cc:	4b2b      	ldr	r3, [pc, #172]	@ (800287c <HAL_RCC_ClockConfig+0x260>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f023 020f 	bic.w	r2, r3, #15
 80027d4:	4929      	ldr	r1, [pc, #164]	@ (800287c <HAL_RCC_ClockConfig+0x260>)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	4313      	orrs	r3, r2
 80027da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027dc:	f7ff f830 	bl	8001840 <HAL_GetTick>
 80027e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e2:	e00a      	b.n	80027fa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e4:	f7ff f82c 	bl	8001840 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e03b      	b.n	8002872 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fa:	4b20      	ldr	r3, [pc, #128]	@ (800287c <HAL_RCC_ClockConfig+0x260>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d1ed      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	d008      	beq.n	8002826 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002814:	4b1a      	ldr	r3, [pc, #104]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	4917      	ldr	r1, [pc, #92]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 8002822:	4313      	orrs	r3, r2
 8002824:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d009      	beq.n	8002846 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002832:	4b13      	ldr	r3, [pc, #76]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	490f      	ldr	r1, [pc, #60]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002846:	f000 f825 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 800284a:	4602      	mov	r2, r0
 800284c:	4b0c      	ldr	r3, [pc, #48]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	091b      	lsrs	r3, r3, #4
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	490c      	ldr	r1, [pc, #48]	@ (8002888 <HAL_RCC_ClockConfig+0x26c>)
 8002858:	5ccb      	ldrb	r3, [r1, r3]
 800285a:	f003 031f 	and.w	r3, r3, #31
 800285e:	fa22 f303 	lsr.w	r3, r2, r3
 8002862:	4a0a      	ldr	r2, [pc, #40]	@ (800288c <HAL_RCC_ClockConfig+0x270>)
 8002864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002866:	4b0a      	ldr	r3, [pc, #40]	@ (8002890 <HAL_RCC_ClockConfig+0x274>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe ff9c 	bl	80017a8 <HAL_InitTick>
 8002870:	4603      	mov	r3, r0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3718      	adds	r7, #24
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40022000 	.word	0x40022000
 8002880:	40021000 	.word	0x40021000
 8002884:	04c4b400 	.word	0x04c4b400
 8002888:	0800585c 	.word	0x0800585c
 800288c:	20000008 	.word	0x20000008
 8002890:	2000000c 	.word	0x2000000c

08002894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800289a:	4b2c      	ldr	r3, [pc, #176]	@ (800294c <HAL_RCC_GetSysClockFreq+0xb8>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d102      	bne.n	80028ac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002950 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	e047      	b.n	800293c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80028ac:	4b27      	ldr	r3, [pc, #156]	@ (800294c <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 030c 	and.w	r3, r3, #12
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d102      	bne.n	80028be <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028b8:	4b26      	ldr	r3, [pc, #152]	@ (8002954 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	e03e      	b.n	800293c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80028be:	4b23      	ldr	r3, [pc, #140]	@ (800294c <HAL_RCC_GetSysClockFreq+0xb8>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b0c      	cmp	r3, #12
 80028c8:	d136      	bne.n	8002938 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028ca:	4b20      	ldr	r3, [pc, #128]	@ (800294c <HAL_RCC_GetSysClockFreq+0xb8>)
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028d4:	4b1d      	ldr	r3, [pc, #116]	@ (800294c <HAL_RCC_GetSysClockFreq+0xb8>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	091b      	lsrs	r3, r3, #4
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	3301      	adds	r3, #1
 80028e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2b03      	cmp	r3, #3
 80028e6:	d10c      	bne.n	8002902 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028e8:	4a1a      	ldr	r2, [pc, #104]	@ (8002954 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f0:	4a16      	ldr	r2, [pc, #88]	@ (800294c <HAL_RCC_GetSysClockFreq+0xb8>)
 80028f2:	68d2      	ldr	r2, [r2, #12]
 80028f4:	0a12      	lsrs	r2, r2, #8
 80028f6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028fa:	fb02 f303 	mul.w	r3, r2, r3
 80028fe:	617b      	str	r3, [r7, #20]
      break;
 8002900:	e00c      	b.n	800291c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002902:	4a13      	ldr	r2, [pc, #76]	@ (8002950 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	fbb2 f3f3 	udiv	r3, r2, r3
 800290a:	4a10      	ldr	r2, [pc, #64]	@ (800294c <HAL_RCC_GetSysClockFreq+0xb8>)
 800290c:	68d2      	ldr	r2, [r2, #12]
 800290e:	0a12      	lsrs	r2, r2, #8
 8002910:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002914:	fb02 f303 	mul.w	r3, r2, r3
 8002918:	617b      	str	r3, [r7, #20]
      break;
 800291a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800291c:	4b0b      	ldr	r3, [pc, #44]	@ (800294c <HAL_RCC_GetSysClockFreq+0xb8>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	0e5b      	lsrs	r3, r3, #25
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	3301      	adds	r3, #1
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	fbb2 f3f3 	udiv	r3, r2, r3
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	e001      	b.n	800293c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002938:	2300      	movs	r3, #0
 800293a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800293c:	693b      	ldr	r3, [r7, #16]
}
 800293e:	4618      	mov	r0, r3
 8002940:	371c      	adds	r7, #28
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	40021000 	.word	0x40021000
 8002950:	00f42400 	.word	0x00f42400
 8002954:	007a1200 	.word	0x007a1200

08002958 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800295c:	4b03      	ldr	r3, [pc, #12]	@ (800296c <HAL_RCC_GetHCLKFreq+0x14>)
 800295e:	681b      	ldr	r3, [r3, #0]
}
 8002960:	4618      	mov	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	20000008 	.word	0x20000008

08002970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002974:	f7ff fff0 	bl	8002958 <HAL_RCC_GetHCLKFreq>
 8002978:	4602      	mov	r2, r0
 800297a:	4b06      	ldr	r3, [pc, #24]	@ (8002994 <HAL_RCC_GetPCLK1Freq+0x24>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	0a1b      	lsrs	r3, r3, #8
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	4904      	ldr	r1, [pc, #16]	@ (8002998 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002986:	5ccb      	ldrb	r3, [r1, r3]
 8002988:	f003 031f 	and.w	r3, r3, #31
 800298c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002990:	4618      	mov	r0, r3
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40021000 	.word	0x40021000
 8002998:	0800586c 	.word	0x0800586c

0800299c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029a0:	f7ff ffda 	bl	8002958 <HAL_RCC_GetHCLKFreq>
 80029a4:	4602      	mov	r2, r0
 80029a6:	4b06      	ldr	r3, [pc, #24]	@ (80029c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	0adb      	lsrs	r3, r3, #11
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	4904      	ldr	r1, [pc, #16]	@ (80029c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029b2:	5ccb      	ldrb	r3, [r1, r3]
 80029b4:	f003 031f 	and.w	r3, r3, #31
 80029b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029bc:	4618      	mov	r0, r3
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40021000 	.word	0x40021000
 80029c4:	0800586c 	.word	0x0800586c

080029c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002a48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	3301      	adds	r3, #1
 80029e4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d10c      	bne.n	8002a06 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029ec:	4a17      	ldr	r2, [pc, #92]	@ (8002a4c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f4:	4a14      	ldr	r2, [pc, #80]	@ (8002a48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029f6:	68d2      	ldr	r2, [r2, #12]
 80029f8:	0a12      	lsrs	r2, r2, #8
 80029fa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029fe:	fb02 f303 	mul.w	r3, r2, r3
 8002a02:	617b      	str	r3, [r7, #20]
    break;
 8002a04:	e00c      	b.n	8002a20 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a06:	4a12      	ldr	r2, [pc, #72]	@ (8002a50 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0e:	4a0e      	ldr	r2, [pc, #56]	@ (8002a48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a10:	68d2      	ldr	r2, [r2, #12]
 8002a12:	0a12      	lsrs	r2, r2, #8
 8002a14:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a18:	fb02 f303 	mul.w	r3, r2, r3
 8002a1c:	617b      	str	r3, [r7, #20]
    break;
 8002a1e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a20:	4b09      	ldr	r3, [pc, #36]	@ (8002a48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	0e5b      	lsrs	r3, r3, #25
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a38:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002a3a:	687b      	ldr	r3, [r7, #4]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	371c      	adds	r7, #28
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	007a1200 	.word	0x007a1200
 8002a50:	00f42400 	.word	0x00f42400

08002a54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a60:	2300      	movs	r3, #0
 8002a62:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 8098 	beq.w	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a72:	2300      	movs	r3, #0
 8002a74:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a76:	4b43      	ldr	r3, [pc, #268]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10d      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a82:	4b40      	ldr	r3, [pc, #256]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a86:	4a3f      	ldr	r2, [pc, #252]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a8e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a9e:	4b3a      	ldr	r3, [pc, #232]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a39      	ldr	r2, [pc, #228]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002aa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aa8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002aaa:	f7fe fec9 	bl	8001840 <HAL_GetTick>
 8002aae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ab0:	e009      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab2:	f7fe fec5 	bl	8001840 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d902      	bls.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	74fb      	strb	r3, [r7, #19]
        break;
 8002ac4:	e005      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ac6:	4b30      	ldr	r3, [pc, #192]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0ef      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002ad2:	7cfb      	ldrb	r3, [r7, #19]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d159      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ade:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ae2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d01e      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d019      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002af4:	4b23      	ldr	r3, [pc, #140]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002afa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002afe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b00:	4b20      	ldr	r3, [pc, #128]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b06:	4a1f      	ldr	r2, [pc, #124]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b10:	4b1c      	ldr	r3, [pc, #112]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b16:	4a1b      	ldr	r2, [pc, #108]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b20:	4a18      	ldr	r2, [pc, #96]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d016      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b32:	f7fe fe85 	bl	8001840 <HAL_GetTick>
 8002b36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b38:	e00b      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3a:	f7fe fe81 	bl	8001840 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d902      	bls.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	74fb      	strb	r3, [r7, #19]
            break;
 8002b50:	e006      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b52:	4b0c      	ldr	r3, [pc, #48]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0ec      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002b60:	7cfb      	ldrb	r3, [r7, #19]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10b      	bne.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b66:	4b07      	ldr	r3, [pc, #28]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b74:	4903      	ldr	r1, [pc, #12]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002b7c:	e008      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b7e:	7cfb      	ldrb	r3, [r7, #19]
 8002b80:	74bb      	strb	r3, [r7, #18]
 8002b82:	e005      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b8c:	7cfb      	ldrb	r3, [r7, #19]
 8002b8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b90:	7c7b      	ldrb	r3, [r7, #17]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d105      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b96:	4ba6      	ldr	r3, [pc, #664]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b9a:	4aa5      	ldr	r2, [pc, #660]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ba0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00a      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bae:	4ba0      	ldr	r3, [pc, #640]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb4:	f023 0203 	bic.w	r2, r3, #3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	499c      	ldr	r1, [pc, #624]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00a      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bd0:	4b97      	ldr	r3, [pc, #604]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd6:	f023 020c 	bic.w	r2, r3, #12
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	4994      	ldr	r1, [pc, #592]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00a      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bf2:	4b8f      	ldr	r3, [pc, #572]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bf8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	498b      	ldr	r1, [pc, #556]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0308 	and.w	r3, r3, #8
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c14:	4b86      	ldr	r3, [pc, #536]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c1a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	4983      	ldr	r1, [pc, #524]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0320 	and.w	r3, r3, #32
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00a      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c36:	4b7e      	ldr	r3, [pc, #504]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c3c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	497a      	ldr	r1, [pc, #488]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00a      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c58:	4b75      	ldr	r3, [pc, #468]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c5e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	4972      	ldr	r1, [pc, #456]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00a      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c7a:	4b6d      	ldr	r3, [pc, #436]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c80:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	4969      	ldr	r1, [pc, #420]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00a      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c9c:	4b64      	ldr	r3, [pc, #400]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	4961      	ldr	r1, [pc, #388]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00a      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cbe:	4b5c      	ldr	r3, [pc, #368]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ccc:	4958      	ldr	r1, [pc, #352]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d015      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ce0:	4b53      	ldr	r3, [pc, #332]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ce6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cee:	4950      	ldr	r1, [pc, #320]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002cfe:	d105      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d00:	4b4b      	ldr	r3, [pc, #300]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4a4a      	ldr	r2, [pc, #296]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d0a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d015      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d18:	4b45      	ldr	r3, [pc, #276]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d1e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d26:	4942      	ldr	r1, [pc, #264]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d36:	d105      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d38:	4b3d      	ldr	r3, [pc, #244]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	4a3c      	ldr	r2, [pc, #240]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d42:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d015      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d50:	4b37      	ldr	r3, [pc, #220]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d56:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5e:	4934      	ldr	r1, [pc, #208]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d6e:	d105      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d70:	4b2f      	ldr	r3, [pc, #188]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4a2e      	ldr	r2, [pc, #184]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d7a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d015      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d88:	4b29      	ldr	r3, [pc, #164]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d96:	4926      	ldr	r1, [pc, #152]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002da2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002da6:	d105      	bne.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002da8:	4b21      	ldr	r3, [pc, #132]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	4a20      	ldr	r2, [pc, #128]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002db2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d015      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dc6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dce:	4918      	ldr	r1, [pc, #96]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dde:	d105      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002de0:	4b13      	ldr	r3, [pc, #76]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4a12      	ldr	r2, [pc, #72]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002de6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d015      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002df8:	4b0d      	ldr	r3, [pc, #52]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e06:	490a      	ldr	r1, [pc, #40]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e16:	d105      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e18:	4b05      	ldr	r3, [pc, #20]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	4a04      	ldr	r2, [pc, #16]	@ (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e22:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002e24:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40021000 	.word	0x40021000

08002e34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e09d      	b.n	8002f82 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d108      	bne.n	8002e60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e56:	d009      	beq.n	8002e6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	61da      	str	r2, [r3, #28]
 8002e5e:	e005      	b.n	8002e6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d106      	bne.n	8002e8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fe faaa 	bl	80013e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ea2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002eac:	d902      	bls.n	8002eb4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	e002      	b.n	8002eba <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002eb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002eb8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002ec2:	d007      	beq.n	8002ed4 <HAL_SPI_Init+0xa0>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ecc:	d002      	beq.n	8002ed4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	f003 0301 	and.w	r3, r3, #1
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f16:	ea42 0103 	orr.w	r1, r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	0c1b      	lsrs	r3, r3, #16
 8002f30:	f003 0204 	and.w	r2, r3, #4
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f38:	f003 0310 	and.w	r3, r3, #16
 8002f3c:	431a      	orrs	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002f50:	ea42 0103 	orr.w	r1, r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	69da      	ldr	r2, [r3, #28]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b088      	sub	sp, #32
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	60f8      	str	r0, [r7, #12]
 8002f92:	60b9      	str	r1, [r7, #8]
 8002f94:	603b      	str	r3, [r7, #0]
 8002f96:	4613      	mov	r3, r2
 8002f98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <HAL_SPI_Transmit+0x22>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e15f      	b.n	800326c <HAL_SPI_Transmit+0x2e2>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fb4:	f7fe fc44 	bl	8001840 <HAL_GetTick>
 8002fb8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002fba:	88fb      	ldrh	r3, [r7, #6]
 8002fbc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d002      	beq.n	8002fd0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002fca:	2302      	movs	r3, #2
 8002fcc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fce:	e148      	b.n	8003262 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <HAL_SPI_Transmit+0x52>
 8002fd6:	88fb      	ldrh	r3, [r7, #6]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d102      	bne.n	8002fe2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002fe0:	e13f      	b.n	8003262 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	88fa      	ldrh	r2, [r7, #6]
 8002ffa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	88fa      	ldrh	r2, [r7, #6]
 8003000:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800302c:	d10f      	bne.n	800304e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800303c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800304c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003058:	2b40      	cmp	r3, #64	@ 0x40
 800305a:	d007      	beq.n	800306c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800306a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003074:	d94f      	bls.n	8003116 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d002      	beq.n	8003084 <HAL_SPI_Transmit+0xfa>
 800307e:	8afb      	ldrh	r3, [r7, #22]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d142      	bne.n	800310a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003088:	881a      	ldrh	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003094:	1c9a      	adds	r2, r3, #2
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800309e:	b29b      	uxth	r3, r3
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030a8:	e02f      	b.n	800310a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d112      	bne.n	80030de <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030bc:	881a      	ldrh	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c8:	1c9a      	adds	r2, r3, #2
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80030dc:	e015      	b.n	800310a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030de:	f7fe fbaf 	bl	8001840 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d803      	bhi.n	80030f6 <HAL_SPI_Transmit+0x16c>
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f4:	d102      	bne.n	80030fc <HAL_SPI_Transmit+0x172>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d106      	bne.n	800310a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003108:	e0ab      	b.n	8003262 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800310e:	b29b      	uxth	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1ca      	bne.n	80030aa <HAL_SPI_Transmit+0x120>
 8003114:	e080      	b.n	8003218 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <HAL_SPI_Transmit+0x19a>
 800311e:	8afb      	ldrh	r3, [r7, #22]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d174      	bne.n	800320e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003128:	b29b      	uxth	r3, r3
 800312a:	2b01      	cmp	r3, #1
 800312c:	d912      	bls.n	8003154 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003132:	881a      	ldrh	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800313e:	1c9a      	adds	r2, r3, #2
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003148:	b29b      	uxth	r3, r3
 800314a:	3b02      	subs	r3, #2
 800314c:	b29a      	uxth	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003152:	e05c      	b.n	800320e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	330c      	adds	r3, #12
 800315e:	7812      	ldrb	r2, [r2, #0]
 8003160:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003166:	1c5a      	adds	r2, r3, #1
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003170:	b29b      	uxth	r3, r3
 8003172:	3b01      	subs	r3, #1
 8003174:	b29a      	uxth	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800317a:	e048      	b.n	800320e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b02      	cmp	r3, #2
 8003188:	d12b      	bne.n	80031e2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800318e:	b29b      	uxth	r3, r3
 8003190:	2b01      	cmp	r3, #1
 8003192:	d912      	bls.n	80031ba <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003198:	881a      	ldrh	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a4:	1c9a      	adds	r2, r3, #2
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	3b02      	subs	r3, #2
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80031b8:	e029      	b.n	800320e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	330c      	adds	r3, #12
 80031c4:	7812      	ldrb	r2, [r2, #0]
 80031c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80031e0:	e015      	b.n	800320e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031e2:	f7fe fb2d 	bl	8001840 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d803      	bhi.n	80031fa <HAL_SPI_Transmit+0x270>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f8:	d102      	bne.n	8003200 <HAL_SPI_Transmit+0x276>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d106      	bne.n	800320e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800320c:	e029      	b.n	8003262 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003212:	b29b      	uxth	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1b1      	bne.n	800317c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	6839      	ldr	r1, [r7, #0]
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 f947 	bl	80034b0 <SPI_EndRxTxTransaction>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d002      	beq.n	800322e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2220      	movs	r2, #32
 800322c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10a      	bne.n	800324c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003236:	2300      	movs	r3, #0
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	613b      	str	r3, [r7, #16]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	613b      	str	r3, [r7, #16]
 800324a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003250:	2b00      	cmp	r3, #0
 8003252:	d002      	beq.n	800325a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	77fb      	strb	r3, [r7, #31]
 8003258:	e003      	b.n	8003262 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2201      	movs	r2, #1
 800325e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800326a:	7ffb      	ldrb	r3, [r7, #31]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3720      	adds	r7, #32
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	603b      	str	r3, [r7, #0]
 8003280:	4613      	mov	r3, r2
 8003282:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003284:	f7fe fadc 	bl	8001840 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	4413      	add	r3, r2
 8003292:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003294:	f7fe fad4 	bl	8001840 <HAL_GetTick>
 8003298:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800329a:	4b39      	ldr	r3, [pc, #228]	@ (8003380 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	015b      	lsls	r3, r3, #5
 80032a0:	0d1b      	lsrs	r3, r3, #20
 80032a2:	69fa      	ldr	r2, [r7, #28]
 80032a4:	fb02 f303 	mul.w	r3, r2, r3
 80032a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032aa:	e054      	b.n	8003356 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b2:	d050      	beq.n	8003356 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032b4:	f7fe fac4 	bl	8001840 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	69fa      	ldr	r2, [r7, #28]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d902      	bls.n	80032ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d13d      	bne.n	8003346 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80032d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032e2:	d111      	bne.n	8003308 <SPI_WaitFlagStateUntilTimeout+0x94>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032ec:	d004      	beq.n	80032f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032f6:	d107      	bne.n	8003308 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003306:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003310:	d10f      	bne.n	8003332 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003330:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e017      	b.n	8003376 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	3b01      	subs	r3, #1
 8003354:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	4013      	ands	r3, r2
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	429a      	cmp	r2, r3
 8003364:	bf0c      	ite	eq
 8003366:	2301      	moveq	r3, #1
 8003368:	2300      	movne	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	429a      	cmp	r2, r3
 8003372:	d19b      	bne.n	80032ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3720      	adds	r7, #32
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20000008 	.word	0x20000008

08003384 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08a      	sub	sp, #40	@ 0x28
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
 8003390:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003392:	2300      	movs	r3, #0
 8003394:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003396:	f7fe fa53 	bl	8001840 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800339e:	1a9b      	subs	r3, r3, r2
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	4413      	add	r3, r2
 80033a4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80033a6:	f7fe fa4b 	bl	8001840 <HAL_GetTick>
 80033aa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	330c      	adds	r3, #12
 80033b2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80033b4:	4b3d      	ldr	r3, [pc, #244]	@ (80034ac <SPI_WaitFifoStateUntilTimeout+0x128>)
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	00da      	lsls	r2, r3, #3
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	0d1b      	lsrs	r3, r3, #20
 80033c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033c6:	fb02 f303 	mul.w	r3, r2, r3
 80033ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80033cc:	e060      	b.n	8003490 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80033d4:	d107      	bne.n	80033e6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d104      	bne.n	80033e6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80033e4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ec:	d050      	beq.n	8003490 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033ee:	f7fe fa27 	bl	8001840 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d902      	bls.n	8003404 <SPI_WaitFifoStateUntilTimeout+0x80>
 80033fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003400:	2b00      	cmp	r3, #0
 8003402:	d13d      	bne.n	8003480 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003412:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800341c:	d111      	bne.n	8003442 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003426:	d004      	beq.n	8003432 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003430:	d107      	bne.n	8003442 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003440:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003446:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800344a:	d10f      	bne.n	800346c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800346a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e010      	b.n	80034a2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003486:	2300      	movs	r3, #0
 8003488:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	3b01      	subs	r3, #1
 800348e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	4013      	ands	r3, r2
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	429a      	cmp	r2, r3
 800349e:	d196      	bne.n	80033ce <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3728      	adds	r7, #40	@ 0x28
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000008 	.word	0x20000008

080034b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af02      	add	r7, sp, #8
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f7ff ff5b 	bl	8003384 <SPI_WaitFifoStateUntilTimeout>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d007      	beq.n	80034e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034d8:	f043 0220 	orr.w	r2, r3, #32
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e027      	b.n	8003534 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	2200      	movs	r2, #0
 80034ec:	2180      	movs	r1, #128	@ 0x80
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f7ff fec0 	bl	8003274 <SPI_WaitFlagStateUntilTimeout>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d007      	beq.n	800350a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034fe:	f043 0220 	orr.w	r2, r3, #32
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e014      	b.n	8003534 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	2200      	movs	r2, #0
 8003512:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f7ff ff34 	bl	8003384 <SPI_WaitFifoStateUntilTimeout>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d007      	beq.n	8003532 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003526:	f043 0220 	orr.w	r2, r3, #32
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e000      	b.n	8003534 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e042      	b.n	80035d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003554:	2b00      	cmp	r3, #0
 8003556:	d106      	bne.n	8003566 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7fd ff7f 	bl	8001464 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2224      	movs	r2, #36	@ 0x24
 800356a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0201 	bic.w	r2, r2, #1
 800357c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 fd58 	bl	800403c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 fa89 	bl	8003aa4 <UART_SetConfig>
 8003592:	4603      	mov	r3, r0
 8003594:	2b01      	cmp	r3, #1
 8003596:	d101      	bne.n	800359c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e01b      	b.n	80035d4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689a      	ldr	r2, [r3, #8]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0201 	orr.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 fdd7 	bl	8004180 <UART_CheckIdleState>
 80035d2:	4603      	mov	r3, r0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08a      	sub	sp, #40	@ 0x28
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	4613      	mov	r3, r2
 80035ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f2:	2b20      	cmp	r3, #32
 80035f4:	d17b      	bne.n	80036ee <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d002      	beq.n	8003602 <HAL_UART_Transmit+0x26>
 80035fc:	88fb      	ldrh	r3, [r7, #6]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e074      	b.n	80036f0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2221      	movs	r2, #33	@ 0x21
 8003612:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003616:	f7fe f913 	bl	8001840 <HAL_GetTick>
 800361a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	88fa      	ldrh	r2, [r7, #6]
 8003620:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	88fa      	ldrh	r2, [r7, #6]
 8003628:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003634:	d108      	bne.n	8003648 <HAL_UART_Transmit+0x6c>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d104      	bne.n	8003648 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800363e:	2300      	movs	r3, #0
 8003640:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	61bb      	str	r3, [r7, #24]
 8003646:	e003      	b.n	8003650 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800364c:	2300      	movs	r3, #0
 800364e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003650:	e030      	b.n	80036b4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2200      	movs	r2, #0
 800365a:	2180      	movs	r1, #128	@ 0x80
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 fe39 	bl	80042d4 <UART_WaitOnFlagUntilTimeout>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d005      	beq.n	8003674 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2220      	movs	r2, #32
 800366c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e03d      	b.n	80036f0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10b      	bne.n	8003692 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	461a      	mov	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003688:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	3302      	adds	r3, #2
 800368e:	61bb      	str	r3, [r7, #24]
 8003690:	e007      	b.n	80036a2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	781a      	ldrb	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	3301      	adds	r3, #1
 80036a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1c8      	bne.n	8003652 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	2200      	movs	r2, #0
 80036c8:	2140      	movs	r1, #64	@ 0x40
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 fe02 	bl	80042d4 <UART_WaitOnFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d005      	beq.n	80036e2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2220      	movs	r2, #32
 80036da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e006      	b.n	80036f0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80036ea:	2300      	movs	r3, #0
 80036ec:	e000      	b.n	80036f0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80036ee:	2302      	movs	r3, #2
  }
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3720      	adds	r7, #32
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b08a      	sub	sp, #40	@ 0x28
 80036fc:	af02      	add	r7, sp, #8
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	603b      	str	r3, [r7, #0]
 8003704:	4613      	mov	r3, r2
 8003706:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800370e:	2b20      	cmp	r3, #32
 8003710:	f040 80b5 	bne.w	800387e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <HAL_UART_Receive+0x28>
 800371a:	88fb      	ldrh	r3, [r7, #6]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0ad      	b.n	8003880 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2222      	movs	r2, #34	@ 0x22
 8003730:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800373a:	f7fe f881 	bl	8001840 <HAL_GetTick>
 800373e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	88fa      	ldrh	r2, [r7, #6]
 8003744:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	88fa      	ldrh	r2, [r7, #6]
 800374c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003758:	d10e      	bne.n	8003778 <HAL_UART_Receive+0x80>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d105      	bne.n	800376e <HAL_UART_Receive+0x76>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003768:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800376c:	e02d      	b.n	80037ca <HAL_UART_Receive+0xd2>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	22ff      	movs	r2, #255	@ 0xff
 8003772:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003776:	e028      	b.n	80037ca <HAL_UART_Receive+0xd2>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10d      	bne.n	800379c <HAL_UART_Receive+0xa4>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d104      	bne.n	8003792 <HAL_UART_Receive+0x9a>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	22ff      	movs	r2, #255	@ 0xff
 800378c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8003790:	e01b      	b.n	80037ca <HAL_UART_Receive+0xd2>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	227f      	movs	r2, #127	@ 0x7f
 8003796:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800379a:	e016      	b.n	80037ca <HAL_UART_Receive+0xd2>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037a4:	d10d      	bne.n	80037c2 <HAL_UART_Receive+0xca>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d104      	bne.n	80037b8 <HAL_UART_Receive+0xc0>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	227f      	movs	r2, #127	@ 0x7f
 80037b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80037b6:	e008      	b.n	80037ca <HAL_UART_Receive+0xd2>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	223f      	movs	r2, #63	@ 0x3f
 80037bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80037c0:	e003      	b.n	80037ca <HAL_UART_Receive+0xd2>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80037d0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037da:	d108      	bne.n	80037ee <HAL_UART_Receive+0xf6>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d104      	bne.n	80037ee <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80037e4:	2300      	movs	r3, #0
 80037e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	61bb      	str	r3, [r7, #24]
 80037ec:	e003      	b.n	80037f6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037f2:	2300      	movs	r3, #0
 80037f4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80037f6:	e036      	b.n	8003866 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	2200      	movs	r2, #0
 8003800:	2120      	movs	r1, #32
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 fd66 	bl	80042d4 <UART_WaitOnFlagUntilTimeout>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d005      	beq.n	800381a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2220      	movs	r2, #32
 8003812:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e032      	b.n	8003880 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10c      	bne.n	800383a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003826:	b29a      	uxth	r2, r3
 8003828:	8a7b      	ldrh	r3, [r7, #18]
 800382a:	4013      	ands	r3, r2
 800382c:	b29a      	uxth	r2, r3
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	3302      	adds	r3, #2
 8003836:	61bb      	str	r3, [r7, #24]
 8003838:	e00c      	b.n	8003854 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003840:	b2da      	uxtb	r2, r3
 8003842:	8a7b      	ldrh	r3, [r7, #18]
 8003844:	b2db      	uxtb	r3, r3
 8003846:	4013      	ands	r3, r2
 8003848:	b2da      	uxtb	r2, r3
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	3301      	adds	r3, #1
 8003852:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800385a:	b29b      	uxth	r3, r3
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1c2      	bne.n	80037f8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2220      	movs	r2, #32
 8003876:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	e000      	b.n	8003880 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800387e:	2302      	movs	r3, #2
  }
}
 8003880:	4618      	mov	r0, r3
 8003882:	3720      	adds	r7, #32
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b0a0      	sub	sp, #128	@ 0x80
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	65fb      	str	r3, [r7, #92]	@ 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003896:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003898:	e853 3f00 	ldrex	r3, [r3]
 800389c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800389e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80038a0:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 80038a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	461a      	mov	r2, r3
 80038ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80038ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038b0:	667a      	str	r2, [r7, #100]	@ 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80038b4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80038b6:	e841 2300 	strex	r3, r2, [r1]
 80038ba:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80038bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1e6      	bne.n	8003890 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3308      	adds	r3, #8
 80038c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038cc:	e853 3f00 	ldrex	r3, [r3]
 80038d0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80038d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038d4:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 80038d8:	f023 0301 	bic.w	r3, r3, #1
 80038dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3308      	adds	r3, #8
 80038e4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80038e6:	657a      	str	r2, [r7, #84]	@ 0x54
 80038e8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80038ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80038ee:	e841 2300 	strex	r3, r2, [r1]
 80038f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80038f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1e3      	bne.n	80038c2 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d118      	bne.n	8003934 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800390a:	e853 3f00 	ldrex	r3, [r3]
 800390e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003912:	f023 0310 	bic.w	r3, r3, #16
 8003916:	677b      	str	r3, [r7, #116]	@ 0x74
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003920:	643b      	str	r3, [r7, #64]	@ 0x40
 8003922:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003924:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003926:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003928:	e841 2300 	strex	r3, r2, [r1]
 800392c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800392e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1e6      	bne.n	8003902 <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800393e:	2b80      	cmp	r3, #128	@ 0x80
 8003940:	d137      	bne.n	80039b2 <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	3308      	adds	r3, #8
 8003948:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	e853 3f00 	ldrex	r3, [r3]
 8003950:	61fb      	str	r3, [r7, #28]
   return(result);
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003958:	673b      	str	r3, [r7, #112]	@ 0x70
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	3308      	adds	r3, #8
 8003960:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003962:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003964:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003966:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003968:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800396a:	e841 2300 	strex	r3, r2, [r1]
 800396e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1e5      	bne.n	8003942 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800397a:	2b00      	cmp	r3, #0
 800397c:	d019      	beq.n	80039b2 <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003982:	2200      	movs	r2, #0
 8003984:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800398a:	4618      	mov	r0, r3
 800398c:	f7fe f869 	bl	8001a62 <HAL_DMA_Abort>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00d      	beq.n	80039b2 <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800399a:	4618      	mov	r0, r3
 800399c:	f7fe f8ba 	bl	8001b14 <HAL_DMA_GetError>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b20      	cmp	r3, #32
 80039a4:	d105      	bne.n	80039b2 <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2210      	movs	r2, #16
 80039aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e073      	b.n	8003a9a <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039bc:	2b40      	cmp	r3, #64	@ 0x40
 80039be:	d13b      	bne.n	8003a38 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3308      	adds	r3, #8
 80039c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	e853 3f00 	ldrex	r3, [r3]
 80039ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3308      	adds	r3, #8
 80039de:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80039e0:	61ba      	str	r2, [r7, #24]
 80039e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e4:	6979      	ldr	r1, [r7, #20]
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	e841 2300 	strex	r3, r2, [r1]
 80039ec:	613b      	str	r3, [r7, #16]
   return(result);
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1e5      	bne.n	80039c0 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d01c      	beq.n	8003a38 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a04:	2200      	movs	r2, #0
 8003a06:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fe f827 	bl	8001a62 <HAL_DMA_Abort>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00e      	beq.n	8003a38 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fe f877 	bl	8001b14 <HAL_DMA_GetError>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b20      	cmp	r3, #32
 8003a2a:	d105      	bne.n	8003a38 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2210      	movs	r2, #16
 8003a30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e030      	b.n	8003a9a <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	220f      	movs	r2, #15
 8003a4e:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a58:	d107      	bne.n	8003a6a <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	699a      	ldr	r2, [r3, #24]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f042 0210 	orr.w	r2, r2, #16
 8003a68:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	699a      	ldr	r2, [r3, #24]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f042 0208 	orr.w	r2, r2, #8
 8003a78:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2220      	movs	r2, #32
 8003a86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3780      	adds	r7, #128	@ 0x80
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aa8:	b08c      	sub	sp, #48	@ 0x30
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	431a      	orrs	r2, r3
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4bab      	ldr	r3, [pc, #684]	@ (8003d80 <UART_SetConfig+0x2dc>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	6812      	ldr	r2, [r2, #0]
 8003ada:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003adc:	430b      	orrs	r3, r1
 8003ade:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4aa0      	ldr	r2, [pc, #640]	@ (8003d84 <UART_SetConfig+0x2e0>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d004      	beq.n	8003b10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003b1a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	6812      	ldr	r2, [r2, #0]
 8003b22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b24:	430b      	orrs	r3, r1
 8003b26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2e:	f023 010f 	bic.w	r1, r3, #15
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a91      	ldr	r2, [pc, #580]	@ (8003d88 <UART_SetConfig+0x2e4>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d125      	bne.n	8003b94 <UART_SetConfig+0xf0>
 8003b48:	4b90      	ldr	r3, [pc, #576]	@ (8003d8c <UART_SetConfig+0x2e8>)
 8003b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	d81a      	bhi.n	8003b8c <UART_SetConfig+0xe8>
 8003b56:	a201      	add	r2, pc, #4	@ (adr r2, 8003b5c <UART_SetConfig+0xb8>)
 8003b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5c:	08003b6d 	.word	0x08003b6d
 8003b60:	08003b7d 	.word	0x08003b7d
 8003b64:	08003b75 	.word	0x08003b75
 8003b68:	08003b85 	.word	0x08003b85
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b72:	e0d6      	b.n	8003d22 <UART_SetConfig+0x27e>
 8003b74:	2302      	movs	r3, #2
 8003b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b7a:	e0d2      	b.n	8003d22 <UART_SetConfig+0x27e>
 8003b7c:	2304      	movs	r3, #4
 8003b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b82:	e0ce      	b.n	8003d22 <UART_SetConfig+0x27e>
 8003b84:	2308      	movs	r3, #8
 8003b86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b8a:	e0ca      	b.n	8003d22 <UART_SetConfig+0x27e>
 8003b8c:	2310      	movs	r3, #16
 8003b8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003b92:	e0c6      	b.n	8003d22 <UART_SetConfig+0x27e>
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a7d      	ldr	r2, [pc, #500]	@ (8003d90 <UART_SetConfig+0x2ec>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d138      	bne.n	8003c10 <UART_SetConfig+0x16c>
 8003b9e:	4b7b      	ldr	r3, [pc, #492]	@ (8003d8c <UART_SetConfig+0x2e8>)
 8003ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ba4:	f003 030c 	and.w	r3, r3, #12
 8003ba8:	2b0c      	cmp	r3, #12
 8003baa:	d82d      	bhi.n	8003c08 <UART_SetConfig+0x164>
 8003bac:	a201      	add	r2, pc, #4	@ (adr r2, 8003bb4 <UART_SetConfig+0x110>)
 8003bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb2:	bf00      	nop
 8003bb4:	08003be9 	.word	0x08003be9
 8003bb8:	08003c09 	.word	0x08003c09
 8003bbc:	08003c09 	.word	0x08003c09
 8003bc0:	08003c09 	.word	0x08003c09
 8003bc4:	08003bf9 	.word	0x08003bf9
 8003bc8:	08003c09 	.word	0x08003c09
 8003bcc:	08003c09 	.word	0x08003c09
 8003bd0:	08003c09 	.word	0x08003c09
 8003bd4:	08003bf1 	.word	0x08003bf1
 8003bd8:	08003c09 	.word	0x08003c09
 8003bdc:	08003c09 	.word	0x08003c09
 8003be0:	08003c09 	.word	0x08003c09
 8003be4:	08003c01 	.word	0x08003c01
 8003be8:	2300      	movs	r3, #0
 8003bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bee:	e098      	b.n	8003d22 <UART_SetConfig+0x27e>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bf6:	e094      	b.n	8003d22 <UART_SetConfig+0x27e>
 8003bf8:	2304      	movs	r3, #4
 8003bfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bfe:	e090      	b.n	8003d22 <UART_SetConfig+0x27e>
 8003c00:	2308      	movs	r3, #8
 8003c02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c06:	e08c      	b.n	8003d22 <UART_SetConfig+0x27e>
 8003c08:	2310      	movs	r3, #16
 8003c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c0e:	e088      	b.n	8003d22 <UART_SetConfig+0x27e>
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a5f      	ldr	r2, [pc, #380]	@ (8003d94 <UART_SetConfig+0x2f0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d125      	bne.n	8003c66 <UART_SetConfig+0x1c2>
 8003c1a:	4b5c      	ldr	r3, [pc, #368]	@ (8003d8c <UART_SetConfig+0x2e8>)
 8003c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c20:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003c24:	2b30      	cmp	r3, #48	@ 0x30
 8003c26:	d016      	beq.n	8003c56 <UART_SetConfig+0x1b2>
 8003c28:	2b30      	cmp	r3, #48	@ 0x30
 8003c2a:	d818      	bhi.n	8003c5e <UART_SetConfig+0x1ba>
 8003c2c:	2b20      	cmp	r3, #32
 8003c2e:	d00a      	beq.n	8003c46 <UART_SetConfig+0x1a2>
 8003c30:	2b20      	cmp	r3, #32
 8003c32:	d814      	bhi.n	8003c5e <UART_SetConfig+0x1ba>
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <UART_SetConfig+0x19a>
 8003c38:	2b10      	cmp	r3, #16
 8003c3a:	d008      	beq.n	8003c4e <UART_SetConfig+0x1aa>
 8003c3c:	e00f      	b.n	8003c5e <UART_SetConfig+0x1ba>
 8003c3e:	2300      	movs	r3, #0
 8003c40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c44:	e06d      	b.n	8003d22 <UART_SetConfig+0x27e>
 8003c46:	2302      	movs	r3, #2
 8003c48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c4c:	e069      	b.n	8003d22 <UART_SetConfig+0x27e>
 8003c4e:	2304      	movs	r3, #4
 8003c50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c54:	e065      	b.n	8003d22 <UART_SetConfig+0x27e>
 8003c56:	2308      	movs	r3, #8
 8003c58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c5c:	e061      	b.n	8003d22 <UART_SetConfig+0x27e>
 8003c5e:	2310      	movs	r3, #16
 8003c60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c64:	e05d      	b.n	8003d22 <UART_SetConfig+0x27e>
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a4b      	ldr	r2, [pc, #300]	@ (8003d98 <UART_SetConfig+0x2f4>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d125      	bne.n	8003cbc <UART_SetConfig+0x218>
 8003c70:	4b46      	ldr	r3, [pc, #280]	@ (8003d8c <UART_SetConfig+0x2e8>)
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c76:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003c7a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c7c:	d016      	beq.n	8003cac <UART_SetConfig+0x208>
 8003c7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003c80:	d818      	bhi.n	8003cb4 <UART_SetConfig+0x210>
 8003c82:	2b80      	cmp	r3, #128	@ 0x80
 8003c84:	d00a      	beq.n	8003c9c <UART_SetConfig+0x1f8>
 8003c86:	2b80      	cmp	r3, #128	@ 0x80
 8003c88:	d814      	bhi.n	8003cb4 <UART_SetConfig+0x210>
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <UART_SetConfig+0x1f0>
 8003c8e:	2b40      	cmp	r3, #64	@ 0x40
 8003c90:	d008      	beq.n	8003ca4 <UART_SetConfig+0x200>
 8003c92:	e00f      	b.n	8003cb4 <UART_SetConfig+0x210>
 8003c94:	2300      	movs	r3, #0
 8003c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003c9a:	e042      	b.n	8003d22 <UART_SetConfig+0x27e>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003ca2:	e03e      	b.n	8003d22 <UART_SetConfig+0x27e>
 8003ca4:	2304      	movs	r3, #4
 8003ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003caa:	e03a      	b.n	8003d22 <UART_SetConfig+0x27e>
 8003cac:	2308      	movs	r3, #8
 8003cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cb2:	e036      	b.n	8003d22 <UART_SetConfig+0x27e>
 8003cb4:	2310      	movs	r3, #16
 8003cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cba:	e032      	b.n	8003d22 <UART_SetConfig+0x27e>
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a30      	ldr	r2, [pc, #192]	@ (8003d84 <UART_SetConfig+0x2e0>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d12a      	bne.n	8003d1c <UART_SetConfig+0x278>
 8003cc6:	4b31      	ldr	r3, [pc, #196]	@ (8003d8c <UART_SetConfig+0x2e8>)
 8003cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ccc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003cd0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003cd4:	d01a      	beq.n	8003d0c <UART_SetConfig+0x268>
 8003cd6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003cda:	d81b      	bhi.n	8003d14 <UART_SetConfig+0x270>
 8003cdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ce0:	d00c      	beq.n	8003cfc <UART_SetConfig+0x258>
 8003ce2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ce6:	d815      	bhi.n	8003d14 <UART_SetConfig+0x270>
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <UART_SetConfig+0x250>
 8003cec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cf0:	d008      	beq.n	8003d04 <UART_SetConfig+0x260>
 8003cf2:	e00f      	b.n	8003d14 <UART_SetConfig+0x270>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003cfa:	e012      	b.n	8003d22 <UART_SetConfig+0x27e>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d02:	e00e      	b.n	8003d22 <UART_SetConfig+0x27e>
 8003d04:	2304      	movs	r3, #4
 8003d06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d0a:	e00a      	b.n	8003d22 <UART_SetConfig+0x27e>
 8003d0c:	2308      	movs	r3, #8
 8003d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d12:	e006      	b.n	8003d22 <UART_SetConfig+0x27e>
 8003d14:	2310      	movs	r3, #16
 8003d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003d1a:	e002      	b.n	8003d22 <UART_SetConfig+0x27e>
 8003d1c:	2310      	movs	r3, #16
 8003d1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a17      	ldr	r2, [pc, #92]	@ (8003d84 <UART_SetConfig+0x2e0>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	f040 80a8 	bne.w	8003e7e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d2e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003d32:	2b08      	cmp	r3, #8
 8003d34:	d834      	bhi.n	8003da0 <UART_SetConfig+0x2fc>
 8003d36:	a201      	add	r2, pc, #4	@ (adr r2, 8003d3c <UART_SetConfig+0x298>)
 8003d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3c:	08003d61 	.word	0x08003d61
 8003d40:	08003da1 	.word	0x08003da1
 8003d44:	08003d69 	.word	0x08003d69
 8003d48:	08003da1 	.word	0x08003da1
 8003d4c:	08003d6f 	.word	0x08003d6f
 8003d50:	08003da1 	.word	0x08003da1
 8003d54:	08003da1 	.word	0x08003da1
 8003d58:	08003da1 	.word	0x08003da1
 8003d5c:	08003d77 	.word	0x08003d77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d60:	f7fe fe06 	bl	8002970 <HAL_RCC_GetPCLK1Freq>
 8003d64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d66:	e021      	b.n	8003dac <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d68:	4b0c      	ldr	r3, [pc, #48]	@ (8003d9c <UART_SetConfig+0x2f8>)
 8003d6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d6c:	e01e      	b.n	8003dac <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d6e:	f7fe fd91 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8003d72:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003d74:	e01a      	b.n	8003dac <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003d7c:	e016      	b.n	8003dac <UART_SetConfig+0x308>
 8003d7e:	bf00      	nop
 8003d80:	cfff69f3 	.word	0xcfff69f3
 8003d84:	40008000 	.word	0x40008000
 8003d88:	40013800 	.word	0x40013800
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	40004400 	.word	0x40004400
 8003d94:	40004800 	.word	0x40004800
 8003d98:	40004c00 	.word	0x40004c00
 8003d9c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003daa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 812a 	beq.w	8004008 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db8:	4a9e      	ldr	r2, [pc, #632]	@ (8004034 <UART_SetConfig+0x590>)
 8003dba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	4413      	add	r3, r2
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d305      	bcc.n	8003de4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d903      	bls.n	8003dec <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003dea:	e10d      	b.n	8004008 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dee:	2200      	movs	r2, #0
 8003df0:	60bb      	str	r3, [r7, #8]
 8003df2:	60fa      	str	r2, [r7, #12]
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df8:	4a8e      	ldr	r2, [pc, #568]	@ (8004034 <UART_SetConfig+0x590>)
 8003dfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	2200      	movs	r2, #0
 8003e02:	603b      	str	r3, [r7, #0]
 8003e04:	607a      	str	r2, [r7, #4]
 8003e06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e0e:	f7fc fa67 	bl	80002e0 <__aeabi_uldivmod>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	4610      	mov	r0, r2
 8003e18:	4619      	mov	r1, r3
 8003e1a:	f04f 0200 	mov.w	r2, #0
 8003e1e:	f04f 0300 	mov.w	r3, #0
 8003e22:	020b      	lsls	r3, r1, #8
 8003e24:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003e28:	0202      	lsls	r2, r0, #8
 8003e2a:	6979      	ldr	r1, [r7, #20]
 8003e2c:	6849      	ldr	r1, [r1, #4]
 8003e2e:	0849      	lsrs	r1, r1, #1
 8003e30:	2000      	movs	r0, #0
 8003e32:	460c      	mov	r4, r1
 8003e34:	4605      	mov	r5, r0
 8003e36:	eb12 0804 	adds.w	r8, r2, r4
 8003e3a:	eb43 0905 	adc.w	r9, r3, r5
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	469a      	mov	sl, r3
 8003e46:	4693      	mov	fp, r2
 8003e48:	4652      	mov	r2, sl
 8003e4a:	465b      	mov	r3, fp
 8003e4c:	4640      	mov	r0, r8
 8003e4e:	4649      	mov	r1, r9
 8003e50:	f7fc fa46 	bl	80002e0 <__aeabi_uldivmod>
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	4613      	mov	r3, r2
 8003e5a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e5c:	6a3b      	ldr	r3, [r7, #32]
 8003e5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e62:	d308      	bcc.n	8003e76 <UART_SetConfig+0x3d2>
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e6a:	d204      	bcs.n	8003e76 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6a3a      	ldr	r2, [r7, #32]
 8003e72:	60da      	str	r2, [r3, #12]
 8003e74:	e0c8      	b.n	8004008 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003e7c:	e0c4      	b.n	8004008 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e86:	d167      	bne.n	8003f58 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003e88:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d828      	bhi.n	8003ee2 <UART_SetConfig+0x43e>
 8003e90:	a201      	add	r2, pc, #4	@ (adr r2, 8003e98 <UART_SetConfig+0x3f4>)
 8003e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e96:	bf00      	nop
 8003e98:	08003ebd 	.word	0x08003ebd
 8003e9c:	08003ec5 	.word	0x08003ec5
 8003ea0:	08003ecd 	.word	0x08003ecd
 8003ea4:	08003ee3 	.word	0x08003ee3
 8003ea8:	08003ed3 	.word	0x08003ed3
 8003eac:	08003ee3 	.word	0x08003ee3
 8003eb0:	08003ee3 	.word	0x08003ee3
 8003eb4:	08003ee3 	.word	0x08003ee3
 8003eb8:	08003edb 	.word	0x08003edb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ebc:	f7fe fd58 	bl	8002970 <HAL_RCC_GetPCLK1Freq>
 8003ec0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ec2:	e014      	b.n	8003eee <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ec4:	f7fe fd6a 	bl	800299c <HAL_RCC_GetPCLK2Freq>
 8003ec8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003eca:	e010      	b.n	8003eee <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ecc:	4b5a      	ldr	r3, [pc, #360]	@ (8004038 <UART_SetConfig+0x594>)
 8003ece:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ed0:	e00d      	b.n	8003eee <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ed2:	f7fe fcdf 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8003ed6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003ed8:	e009      	b.n	8003eee <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ede:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003ee0:	e005      	b.n	8003eee <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003eec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 8089 	beq.w	8004008 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efa:	4a4e      	ldr	r2, [pc, #312]	@ (8004034 <UART_SetConfig+0x590>)
 8003efc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f00:	461a      	mov	r2, r3
 8003f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f04:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f08:	005a      	lsls	r2, r3, #1
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	085b      	lsrs	r3, r3, #1
 8003f10:	441a      	add	r2, r3
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	2b0f      	cmp	r3, #15
 8003f20:	d916      	bls.n	8003f50 <UART_SetConfig+0x4ac>
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f28:	d212      	bcs.n	8003f50 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	f023 030f 	bic.w	r3, r3, #15
 8003f32:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	085b      	lsrs	r3, r3, #1
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	8bfb      	ldrh	r3, [r7, #30]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	8bfa      	ldrh	r2, [r7, #30]
 8003f4c:	60da      	str	r2, [r3, #12]
 8003f4e:	e05b      	b.n	8004008 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003f56:	e057      	b.n	8004008 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f58:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d828      	bhi.n	8003fb2 <UART_SetConfig+0x50e>
 8003f60:	a201      	add	r2, pc, #4	@ (adr r2, 8003f68 <UART_SetConfig+0x4c4>)
 8003f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f66:	bf00      	nop
 8003f68:	08003f8d 	.word	0x08003f8d
 8003f6c:	08003f95 	.word	0x08003f95
 8003f70:	08003f9d 	.word	0x08003f9d
 8003f74:	08003fb3 	.word	0x08003fb3
 8003f78:	08003fa3 	.word	0x08003fa3
 8003f7c:	08003fb3 	.word	0x08003fb3
 8003f80:	08003fb3 	.word	0x08003fb3
 8003f84:	08003fb3 	.word	0x08003fb3
 8003f88:	08003fab 	.word	0x08003fab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f8c:	f7fe fcf0 	bl	8002970 <HAL_RCC_GetPCLK1Freq>
 8003f90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f92:	e014      	b.n	8003fbe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f94:	f7fe fd02 	bl	800299c <HAL_RCC_GetPCLK2Freq>
 8003f98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003f9a:	e010      	b.n	8003fbe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f9c:	4b26      	ldr	r3, [pc, #152]	@ (8004038 <UART_SetConfig+0x594>)
 8003f9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003fa0:	e00d      	b.n	8003fbe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fa2:	f7fe fc77 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8003fa6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003fa8:	e009      	b.n	8003fbe <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003faa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003fb0:	e005      	b.n	8003fbe <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003fbc:	bf00      	nop
    }

    if (pclk != 0U)
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d021      	beq.n	8004008 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc8:	4a1a      	ldr	r2, [pc, #104]	@ (8004034 <UART_SetConfig+0x590>)
 8003fca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd2:	fbb3 f2f2 	udiv	r2, r3, r2
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	085b      	lsrs	r3, r3, #1
 8003fdc:	441a      	add	r2, r3
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	2b0f      	cmp	r3, #15
 8003fec:	d909      	bls.n	8004002 <UART_SetConfig+0x55e>
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ff4:	d205      	bcs.n	8004002 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	60da      	str	r2, [r3, #12]
 8004000:	e002      	b.n	8004008 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	2201      	movs	r2, #1
 800400c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	2201      	movs	r2, #1
 8004014:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	2200      	movs	r2, #0
 800401c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2200      	movs	r2, #0
 8004022:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004024:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004028:	4618      	mov	r0, r3
 800402a:	3730      	adds	r7, #48	@ 0x30
 800402c:	46bd      	mov	sp, r7
 800402e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004032:	bf00      	nop
 8004034:	08005874 	.word	0x08005874
 8004038:	00f42400 	.word	0x00f42400

0800403c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004048:	f003 0308 	and.w	r3, r3, #8
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00a      	beq.n	8004066 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00a      	beq.n	80040aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ae:	f003 0304 	and.w	r3, r3, #4
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00a      	beq.n	80040ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004118:	2b00      	cmp	r3, #0
 800411a:	d01a      	beq.n	8004152 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	430a      	orrs	r2, r1
 8004130:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004136:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800413a:	d10a      	bne.n	8004152 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	605a      	str	r2, [r3, #4]
  }
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b098      	sub	sp, #96	@ 0x60
 8004184:	af02      	add	r7, sp, #8
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004190:	f7fd fb56 	bl	8001840 <HAL_GetTick>
 8004194:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d12f      	bne.n	8004204 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ac:	2200      	movs	r2, #0
 80041ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f88e 	bl	80042d4 <UART_WaitOnFlagUntilTimeout>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d022      	beq.n	8004204 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041c6:	e853 3f00 	ldrex	r3, [r3]
 80041ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	461a      	mov	r2, r3
 80041da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80041de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041e4:	e841 2300 	strex	r3, r2, [r1]
 80041e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1e6      	bne.n	80041be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2220      	movs	r2, #32
 80041f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e063      	b.n	80042cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0304 	and.w	r3, r3, #4
 800420e:	2b04      	cmp	r3, #4
 8004210:	d149      	bne.n	80042a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004212:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800421a:	2200      	movs	r2, #0
 800421c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 f857 	bl	80042d4 <UART_WaitOnFlagUntilTimeout>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d03c      	beq.n	80042a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004234:	e853 3f00 	ldrex	r3, [r3]
 8004238:	623b      	str	r3, [r7, #32]
   return(result);
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004240:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	461a      	mov	r2, r3
 8004248:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800424a:	633b      	str	r3, [r7, #48]	@ 0x30
 800424c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004250:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004252:	e841 2300 	strex	r3, r2, [r1]
 8004256:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1e6      	bne.n	800422c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	3308      	adds	r3, #8
 8004264:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	e853 3f00 	ldrex	r3, [r3]
 800426c:	60fb      	str	r3, [r7, #12]
   return(result);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f023 0301 	bic.w	r3, r3, #1
 8004274:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	3308      	adds	r3, #8
 800427c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800427e:	61fa      	str	r2, [r7, #28]
 8004280:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004282:	69b9      	ldr	r1, [r7, #24]
 8004284:	69fa      	ldr	r2, [r7, #28]
 8004286:	e841 2300 	strex	r3, r2, [r1]
 800428a:	617b      	str	r3, [r7, #20]
   return(result);
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1e5      	bne.n	800425e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2220      	movs	r2, #32
 8004296:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e012      	b.n	80042cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2220      	movs	r2, #32
 80042aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3758      	adds	r7, #88	@ 0x58
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	4613      	mov	r3, r2
 80042e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042e4:	e04f      	b.n	8004386 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ec:	d04b      	beq.n	8004386 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ee:	f7fd faa7 	bl	8001840 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d302      	bcc.n	8004304 <UART_WaitOnFlagUntilTimeout+0x30>
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e04e      	b.n	80043a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0304 	and.w	r3, r3, #4
 8004312:	2b00      	cmp	r3, #0
 8004314:	d037      	beq.n	8004386 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	2b80      	cmp	r3, #128	@ 0x80
 800431a:	d034      	beq.n	8004386 <UART_WaitOnFlagUntilTimeout+0xb2>
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2b40      	cmp	r3, #64	@ 0x40
 8004320:	d031      	beq.n	8004386 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	f003 0308 	and.w	r3, r3, #8
 800432c:	2b08      	cmp	r3, #8
 800432e:	d110      	bne.n	8004352 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2208      	movs	r2, #8
 8004336:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 f838 	bl	80043ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2208      	movs	r2, #8
 8004342:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e029      	b.n	80043a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800435c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004360:	d111      	bne.n	8004386 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800436a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 f81e 	bl	80043ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2220      	movs	r2, #32
 8004376:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e00f      	b.n	80043a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	69da      	ldr	r2, [r3, #28]
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4013      	ands	r3, r2
 8004390:	68ba      	ldr	r2, [r7, #8]
 8004392:	429a      	cmp	r2, r3
 8004394:	bf0c      	ite	eq
 8004396:	2301      	moveq	r3, #1
 8004398:	2300      	movne	r3, #0
 800439a:	b2db      	uxtb	r3, r3
 800439c:	461a      	mov	r2, r3
 800439e:	79fb      	ldrb	r3, [r7, #7]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d0a0      	beq.n	80042e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b095      	sub	sp, #84	@ 0x54
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043be:	e853 3f00 	ldrex	r3, [r3]
 80043c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	461a      	mov	r2, r3
 80043d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80043d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043dc:	e841 2300 	strex	r3, r2, [r1]
 80043e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80043e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1e6      	bne.n	80043b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	3308      	adds	r3, #8
 80043ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	e853 3f00 	ldrex	r3, [r3]
 80043f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043fe:	f023 0301 	bic.w	r3, r3, #1
 8004402:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3308      	adds	r3, #8
 800440a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800440c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800440e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004410:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004412:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004414:	e841 2300 	strex	r3, r2, [r1]
 8004418:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800441a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e3      	bne.n	80043e8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004424:	2b01      	cmp	r3, #1
 8004426:	d118      	bne.n	800445a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	e853 3f00 	ldrex	r3, [r3]
 8004434:	60bb      	str	r3, [r7, #8]
   return(result);
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	f023 0310 	bic.w	r3, r3, #16
 800443c:	647b      	str	r3, [r7, #68]	@ 0x44
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	461a      	mov	r2, r3
 8004444:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004446:	61bb      	str	r3, [r7, #24]
 8004448:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444a:	6979      	ldr	r1, [r7, #20]
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	e841 2300 	strex	r3, r2, [r1]
 8004452:	613b      	str	r3, [r7, #16]
   return(result);
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d1e6      	bne.n	8004428 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2220      	movs	r2, #32
 800445e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800446e:	bf00      	nop
 8004470:	3754      	adds	r7, #84	@ 0x54
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800447a:	b480      	push	{r7}
 800447c:	b085      	sub	sp, #20
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004488:	2b01      	cmp	r3, #1
 800448a:	d101      	bne.n	8004490 <HAL_UARTEx_DisableFifoMode+0x16>
 800448c:	2302      	movs	r3, #2
 800448e:	e027      	b.n	80044e0 <HAL_UARTEx_DisableFifoMode+0x66>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2224      	movs	r2, #36	@ 0x24
 800449c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0201 	bic.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80044be:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004500:	2302      	movs	r3, #2
 8004502:	e02d      	b.n	8004560 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2224      	movs	r2, #36	@ 0x24
 8004510:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0201 	bic.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f84f 	bl	80045e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2220      	movs	r2, #32
 8004552:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004578:	2b01      	cmp	r3, #1
 800457a:	d101      	bne.n	8004580 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800457c:	2302      	movs	r3, #2
 800457e:	e02d      	b.n	80045dc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2224      	movs	r2, #36	@ 0x24
 800458c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0201 	bic.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f811 	bl	80045e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d108      	bne.n	8004606 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004604:	e031      	b.n	800466a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004606:	2308      	movs	r3, #8
 8004608:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800460a:	2308      	movs	r3, #8
 800460c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	0e5b      	lsrs	r3, r3, #25
 8004616:	b2db      	uxtb	r3, r3
 8004618:	f003 0307 	and.w	r3, r3, #7
 800461c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	0f5b      	lsrs	r3, r3, #29
 8004626:	b2db      	uxtb	r3, r3
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800462e:	7bbb      	ldrb	r3, [r7, #14]
 8004630:	7b3a      	ldrb	r2, [r7, #12]
 8004632:	4911      	ldr	r1, [pc, #68]	@ (8004678 <UARTEx_SetNbDataToProcess+0x94>)
 8004634:	5c8a      	ldrb	r2, [r1, r2]
 8004636:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800463a:	7b3a      	ldrb	r2, [r7, #12]
 800463c:	490f      	ldr	r1, [pc, #60]	@ (800467c <UARTEx_SetNbDataToProcess+0x98>)
 800463e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004640:	fb93 f3f2 	sdiv	r3, r3, r2
 8004644:	b29a      	uxth	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800464c:	7bfb      	ldrb	r3, [r7, #15]
 800464e:	7b7a      	ldrb	r2, [r7, #13]
 8004650:	4909      	ldr	r1, [pc, #36]	@ (8004678 <UARTEx_SetNbDataToProcess+0x94>)
 8004652:	5c8a      	ldrb	r2, [r1, r2]
 8004654:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004658:	7b7a      	ldrb	r2, [r7, #13]
 800465a:	4908      	ldr	r1, [pc, #32]	@ (800467c <UARTEx_SetNbDataToProcess+0x98>)
 800465c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800465e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004662:	b29a      	uxth	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800466a:	bf00      	nop
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	0800588c 	.word	0x0800588c
 800467c:	08005894 	.word	0x08005894

08004680 <atoi>:
 8004680:	220a      	movs	r2, #10
 8004682:	2100      	movs	r1, #0
 8004684:	f000 b87a 	b.w	800477c <strtol>

08004688 <_strtol_l.constprop.0>:
 8004688:	2b24      	cmp	r3, #36	@ 0x24
 800468a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800468e:	4686      	mov	lr, r0
 8004690:	4690      	mov	r8, r2
 8004692:	d801      	bhi.n	8004698 <_strtol_l.constprop.0+0x10>
 8004694:	2b01      	cmp	r3, #1
 8004696:	d106      	bne.n	80046a6 <_strtol_l.constprop.0+0x1e>
 8004698:	f000 fa3c 	bl	8004b14 <__errno>
 800469c:	2316      	movs	r3, #22
 800469e:	6003      	str	r3, [r0, #0]
 80046a0:	2000      	movs	r0, #0
 80046a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046a6:	4834      	ldr	r0, [pc, #208]	@ (8004778 <_strtol_l.constprop.0+0xf0>)
 80046a8:	460d      	mov	r5, r1
 80046aa:	462a      	mov	r2, r5
 80046ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80046b0:	5d06      	ldrb	r6, [r0, r4]
 80046b2:	f016 0608 	ands.w	r6, r6, #8
 80046b6:	d1f8      	bne.n	80046aa <_strtol_l.constprop.0+0x22>
 80046b8:	2c2d      	cmp	r4, #45	@ 0x2d
 80046ba:	d12d      	bne.n	8004718 <_strtol_l.constprop.0+0x90>
 80046bc:	782c      	ldrb	r4, [r5, #0]
 80046be:	2601      	movs	r6, #1
 80046c0:	1c95      	adds	r5, r2, #2
 80046c2:	f033 0210 	bics.w	r2, r3, #16
 80046c6:	d109      	bne.n	80046dc <_strtol_l.constprop.0+0x54>
 80046c8:	2c30      	cmp	r4, #48	@ 0x30
 80046ca:	d12a      	bne.n	8004722 <_strtol_l.constprop.0+0x9a>
 80046cc:	782a      	ldrb	r2, [r5, #0]
 80046ce:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80046d2:	2a58      	cmp	r2, #88	@ 0x58
 80046d4:	d125      	bne.n	8004722 <_strtol_l.constprop.0+0x9a>
 80046d6:	786c      	ldrb	r4, [r5, #1]
 80046d8:	2310      	movs	r3, #16
 80046da:	3502      	adds	r5, #2
 80046dc:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80046e0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80046e4:	2200      	movs	r2, #0
 80046e6:	fbbc f9f3 	udiv	r9, ip, r3
 80046ea:	4610      	mov	r0, r2
 80046ec:	fb03 ca19 	mls	sl, r3, r9, ip
 80046f0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80046f4:	2f09      	cmp	r7, #9
 80046f6:	d81b      	bhi.n	8004730 <_strtol_l.constprop.0+0xa8>
 80046f8:	463c      	mov	r4, r7
 80046fa:	42a3      	cmp	r3, r4
 80046fc:	dd27      	ble.n	800474e <_strtol_l.constprop.0+0xc6>
 80046fe:	1c57      	adds	r7, r2, #1
 8004700:	d007      	beq.n	8004712 <_strtol_l.constprop.0+0x8a>
 8004702:	4581      	cmp	r9, r0
 8004704:	d320      	bcc.n	8004748 <_strtol_l.constprop.0+0xc0>
 8004706:	d101      	bne.n	800470c <_strtol_l.constprop.0+0x84>
 8004708:	45a2      	cmp	sl, r4
 800470a:	db1d      	blt.n	8004748 <_strtol_l.constprop.0+0xc0>
 800470c:	fb00 4003 	mla	r0, r0, r3, r4
 8004710:	2201      	movs	r2, #1
 8004712:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004716:	e7eb      	b.n	80046f0 <_strtol_l.constprop.0+0x68>
 8004718:	2c2b      	cmp	r4, #43	@ 0x2b
 800471a:	bf04      	itt	eq
 800471c:	782c      	ldrbeq	r4, [r5, #0]
 800471e:	1c95      	addeq	r5, r2, #2
 8004720:	e7cf      	b.n	80046c2 <_strtol_l.constprop.0+0x3a>
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1da      	bne.n	80046dc <_strtol_l.constprop.0+0x54>
 8004726:	2c30      	cmp	r4, #48	@ 0x30
 8004728:	bf0c      	ite	eq
 800472a:	2308      	moveq	r3, #8
 800472c:	230a      	movne	r3, #10
 800472e:	e7d5      	b.n	80046dc <_strtol_l.constprop.0+0x54>
 8004730:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004734:	2f19      	cmp	r7, #25
 8004736:	d801      	bhi.n	800473c <_strtol_l.constprop.0+0xb4>
 8004738:	3c37      	subs	r4, #55	@ 0x37
 800473a:	e7de      	b.n	80046fa <_strtol_l.constprop.0+0x72>
 800473c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004740:	2f19      	cmp	r7, #25
 8004742:	d804      	bhi.n	800474e <_strtol_l.constprop.0+0xc6>
 8004744:	3c57      	subs	r4, #87	@ 0x57
 8004746:	e7d8      	b.n	80046fa <_strtol_l.constprop.0+0x72>
 8004748:	f04f 32ff 	mov.w	r2, #4294967295
 800474c:	e7e1      	b.n	8004712 <_strtol_l.constprop.0+0x8a>
 800474e:	1c53      	adds	r3, r2, #1
 8004750:	d108      	bne.n	8004764 <_strtol_l.constprop.0+0xdc>
 8004752:	2322      	movs	r3, #34	@ 0x22
 8004754:	f8ce 3000 	str.w	r3, [lr]
 8004758:	4660      	mov	r0, ip
 800475a:	f1b8 0f00 	cmp.w	r8, #0
 800475e:	d0a0      	beq.n	80046a2 <_strtol_l.constprop.0+0x1a>
 8004760:	1e69      	subs	r1, r5, #1
 8004762:	e006      	b.n	8004772 <_strtol_l.constprop.0+0xea>
 8004764:	b106      	cbz	r6, 8004768 <_strtol_l.constprop.0+0xe0>
 8004766:	4240      	negs	r0, r0
 8004768:	f1b8 0f00 	cmp.w	r8, #0
 800476c:	d099      	beq.n	80046a2 <_strtol_l.constprop.0+0x1a>
 800476e:	2a00      	cmp	r2, #0
 8004770:	d1f6      	bne.n	8004760 <_strtol_l.constprop.0+0xd8>
 8004772:	f8c8 1000 	str.w	r1, [r8]
 8004776:	e794      	b.n	80046a2 <_strtol_l.constprop.0+0x1a>
 8004778:	0800589d 	.word	0x0800589d

0800477c <strtol>:
 800477c:	4613      	mov	r3, r2
 800477e:	460a      	mov	r2, r1
 8004780:	4601      	mov	r1, r0
 8004782:	4802      	ldr	r0, [pc, #8]	@ (800478c <strtol+0x10>)
 8004784:	6800      	ldr	r0, [r0, #0]
 8004786:	f7ff bf7f 	b.w	8004688 <_strtol_l.constprop.0>
 800478a:	bf00      	nop
 800478c:	20000020 	.word	0x20000020

08004790 <std>:
 8004790:	2300      	movs	r3, #0
 8004792:	b510      	push	{r4, lr}
 8004794:	4604      	mov	r4, r0
 8004796:	e9c0 3300 	strd	r3, r3, [r0]
 800479a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800479e:	6083      	str	r3, [r0, #8]
 80047a0:	8181      	strh	r1, [r0, #12]
 80047a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80047a4:	81c2      	strh	r2, [r0, #14]
 80047a6:	6183      	str	r3, [r0, #24]
 80047a8:	4619      	mov	r1, r3
 80047aa:	2208      	movs	r2, #8
 80047ac:	305c      	adds	r0, #92	@ 0x5c
 80047ae:	f000 f8f4 	bl	800499a <memset>
 80047b2:	4b0d      	ldr	r3, [pc, #52]	@ (80047e8 <std+0x58>)
 80047b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80047b6:	4b0d      	ldr	r3, [pc, #52]	@ (80047ec <std+0x5c>)
 80047b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80047ba:	4b0d      	ldr	r3, [pc, #52]	@ (80047f0 <std+0x60>)
 80047bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80047be:	4b0d      	ldr	r3, [pc, #52]	@ (80047f4 <std+0x64>)
 80047c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80047c2:	4b0d      	ldr	r3, [pc, #52]	@ (80047f8 <std+0x68>)
 80047c4:	6224      	str	r4, [r4, #32]
 80047c6:	429c      	cmp	r4, r3
 80047c8:	d006      	beq.n	80047d8 <std+0x48>
 80047ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80047ce:	4294      	cmp	r4, r2
 80047d0:	d002      	beq.n	80047d8 <std+0x48>
 80047d2:	33d0      	adds	r3, #208	@ 0xd0
 80047d4:	429c      	cmp	r4, r3
 80047d6:	d105      	bne.n	80047e4 <std+0x54>
 80047d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80047dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047e0:	f000 b9c2 	b.w	8004b68 <__retarget_lock_init_recursive>
 80047e4:	bd10      	pop	{r4, pc}
 80047e6:	bf00      	nop
 80047e8:	08004915 	.word	0x08004915
 80047ec:	08004937 	.word	0x08004937
 80047f0:	0800496f 	.word	0x0800496f
 80047f4:	08004993 	.word	0x08004993
 80047f8:	20000428 	.word	0x20000428

080047fc <stdio_exit_handler>:
 80047fc:	4a02      	ldr	r2, [pc, #8]	@ (8004808 <stdio_exit_handler+0xc>)
 80047fe:	4903      	ldr	r1, [pc, #12]	@ (800480c <stdio_exit_handler+0x10>)
 8004800:	4803      	ldr	r0, [pc, #12]	@ (8004810 <stdio_exit_handler+0x14>)
 8004802:	f000 b869 	b.w	80048d8 <_fwalk_sglue>
 8004806:	bf00      	nop
 8004808:	20000014 	.word	0x20000014
 800480c:	08004eb5 	.word	0x08004eb5
 8004810:	20000024 	.word	0x20000024

08004814 <cleanup_stdio>:
 8004814:	6841      	ldr	r1, [r0, #4]
 8004816:	4b0c      	ldr	r3, [pc, #48]	@ (8004848 <cleanup_stdio+0x34>)
 8004818:	4299      	cmp	r1, r3
 800481a:	b510      	push	{r4, lr}
 800481c:	4604      	mov	r4, r0
 800481e:	d001      	beq.n	8004824 <cleanup_stdio+0x10>
 8004820:	f000 fb48 	bl	8004eb4 <_fflush_r>
 8004824:	68a1      	ldr	r1, [r4, #8]
 8004826:	4b09      	ldr	r3, [pc, #36]	@ (800484c <cleanup_stdio+0x38>)
 8004828:	4299      	cmp	r1, r3
 800482a:	d002      	beq.n	8004832 <cleanup_stdio+0x1e>
 800482c:	4620      	mov	r0, r4
 800482e:	f000 fb41 	bl	8004eb4 <_fflush_r>
 8004832:	68e1      	ldr	r1, [r4, #12]
 8004834:	4b06      	ldr	r3, [pc, #24]	@ (8004850 <cleanup_stdio+0x3c>)
 8004836:	4299      	cmp	r1, r3
 8004838:	d004      	beq.n	8004844 <cleanup_stdio+0x30>
 800483a:	4620      	mov	r0, r4
 800483c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004840:	f000 bb38 	b.w	8004eb4 <_fflush_r>
 8004844:	bd10      	pop	{r4, pc}
 8004846:	bf00      	nop
 8004848:	20000428 	.word	0x20000428
 800484c:	20000490 	.word	0x20000490
 8004850:	200004f8 	.word	0x200004f8

08004854 <global_stdio_init.part.0>:
 8004854:	b510      	push	{r4, lr}
 8004856:	4b0b      	ldr	r3, [pc, #44]	@ (8004884 <global_stdio_init.part.0+0x30>)
 8004858:	4c0b      	ldr	r4, [pc, #44]	@ (8004888 <global_stdio_init.part.0+0x34>)
 800485a:	4a0c      	ldr	r2, [pc, #48]	@ (800488c <global_stdio_init.part.0+0x38>)
 800485c:	601a      	str	r2, [r3, #0]
 800485e:	4620      	mov	r0, r4
 8004860:	2200      	movs	r2, #0
 8004862:	2104      	movs	r1, #4
 8004864:	f7ff ff94 	bl	8004790 <std>
 8004868:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800486c:	2201      	movs	r2, #1
 800486e:	2109      	movs	r1, #9
 8004870:	f7ff ff8e 	bl	8004790 <std>
 8004874:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004878:	2202      	movs	r2, #2
 800487a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800487e:	2112      	movs	r1, #18
 8004880:	f7ff bf86 	b.w	8004790 <std>
 8004884:	20000560 	.word	0x20000560
 8004888:	20000428 	.word	0x20000428
 800488c:	080047fd 	.word	0x080047fd

08004890 <__sfp_lock_acquire>:
 8004890:	4801      	ldr	r0, [pc, #4]	@ (8004898 <__sfp_lock_acquire+0x8>)
 8004892:	f000 b96a 	b.w	8004b6a <__retarget_lock_acquire_recursive>
 8004896:	bf00      	nop
 8004898:	20000569 	.word	0x20000569

0800489c <__sfp_lock_release>:
 800489c:	4801      	ldr	r0, [pc, #4]	@ (80048a4 <__sfp_lock_release+0x8>)
 800489e:	f000 b965 	b.w	8004b6c <__retarget_lock_release_recursive>
 80048a2:	bf00      	nop
 80048a4:	20000569 	.word	0x20000569

080048a8 <__sinit>:
 80048a8:	b510      	push	{r4, lr}
 80048aa:	4604      	mov	r4, r0
 80048ac:	f7ff fff0 	bl	8004890 <__sfp_lock_acquire>
 80048b0:	6a23      	ldr	r3, [r4, #32]
 80048b2:	b11b      	cbz	r3, 80048bc <__sinit+0x14>
 80048b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048b8:	f7ff bff0 	b.w	800489c <__sfp_lock_release>
 80048bc:	4b04      	ldr	r3, [pc, #16]	@ (80048d0 <__sinit+0x28>)
 80048be:	6223      	str	r3, [r4, #32]
 80048c0:	4b04      	ldr	r3, [pc, #16]	@ (80048d4 <__sinit+0x2c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1f5      	bne.n	80048b4 <__sinit+0xc>
 80048c8:	f7ff ffc4 	bl	8004854 <global_stdio_init.part.0>
 80048cc:	e7f2      	b.n	80048b4 <__sinit+0xc>
 80048ce:	bf00      	nop
 80048d0:	08004815 	.word	0x08004815
 80048d4:	20000560 	.word	0x20000560

080048d8 <_fwalk_sglue>:
 80048d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048dc:	4607      	mov	r7, r0
 80048de:	4688      	mov	r8, r1
 80048e0:	4614      	mov	r4, r2
 80048e2:	2600      	movs	r6, #0
 80048e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80048e8:	f1b9 0901 	subs.w	r9, r9, #1
 80048ec:	d505      	bpl.n	80048fa <_fwalk_sglue+0x22>
 80048ee:	6824      	ldr	r4, [r4, #0]
 80048f0:	2c00      	cmp	r4, #0
 80048f2:	d1f7      	bne.n	80048e4 <_fwalk_sglue+0xc>
 80048f4:	4630      	mov	r0, r6
 80048f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048fa:	89ab      	ldrh	r3, [r5, #12]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d907      	bls.n	8004910 <_fwalk_sglue+0x38>
 8004900:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004904:	3301      	adds	r3, #1
 8004906:	d003      	beq.n	8004910 <_fwalk_sglue+0x38>
 8004908:	4629      	mov	r1, r5
 800490a:	4638      	mov	r0, r7
 800490c:	47c0      	blx	r8
 800490e:	4306      	orrs	r6, r0
 8004910:	3568      	adds	r5, #104	@ 0x68
 8004912:	e7e9      	b.n	80048e8 <_fwalk_sglue+0x10>

08004914 <__sread>:
 8004914:	b510      	push	{r4, lr}
 8004916:	460c      	mov	r4, r1
 8004918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800491c:	f000 f8d6 	bl	8004acc <_read_r>
 8004920:	2800      	cmp	r0, #0
 8004922:	bfab      	itete	ge
 8004924:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004926:	89a3      	ldrhlt	r3, [r4, #12]
 8004928:	181b      	addge	r3, r3, r0
 800492a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800492e:	bfac      	ite	ge
 8004930:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004932:	81a3      	strhlt	r3, [r4, #12]
 8004934:	bd10      	pop	{r4, pc}

08004936 <__swrite>:
 8004936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800493a:	461f      	mov	r7, r3
 800493c:	898b      	ldrh	r3, [r1, #12]
 800493e:	05db      	lsls	r3, r3, #23
 8004940:	4605      	mov	r5, r0
 8004942:	460c      	mov	r4, r1
 8004944:	4616      	mov	r6, r2
 8004946:	d505      	bpl.n	8004954 <__swrite+0x1e>
 8004948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800494c:	2302      	movs	r3, #2
 800494e:	2200      	movs	r2, #0
 8004950:	f000 f8aa 	bl	8004aa8 <_lseek_r>
 8004954:	89a3      	ldrh	r3, [r4, #12]
 8004956:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800495a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800495e:	81a3      	strh	r3, [r4, #12]
 8004960:	4632      	mov	r2, r6
 8004962:	463b      	mov	r3, r7
 8004964:	4628      	mov	r0, r5
 8004966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800496a:	f000 b8c1 	b.w	8004af0 <_write_r>

0800496e <__sseek>:
 800496e:	b510      	push	{r4, lr}
 8004970:	460c      	mov	r4, r1
 8004972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004976:	f000 f897 	bl	8004aa8 <_lseek_r>
 800497a:	1c43      	adds	r3, r0, #1
 800497c:	89a3      	ldrh	r3, [r4, #12]
 800497e:	bf15      	itete	ne
 8004980:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004982:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004986:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800498a:	81a3      	strheq	r3, [r4, #12]
 800498c:	bf18      	it	ne
 800498e:	81a3      	strhne	r3, [r4, #12]
 8004990:	bd10      	pop	{r4, pc}

08004992 <__sclose>:
 8004992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004996:	f000 b877 	b.w	8004a88 <_close_r>

0800499a <memset>:
 800499a:	4402      	add	r2, r0
 800499c:	4603      	mov	r3, r0
 800499e:	4293      	cmp	r3, r2
 80049a0:	d100      	bne.n	80049a4 <memset+0xa>
 80049a2:	4770      	bx	lr
 80049a4:	f803 1b01 	strb.w	r1, [r3], #1
 80049a8:	e7f9      	b.n	800499e <memset+0x4>

080049aa <strncpy>:
 80049aa:	b510      	push	{r4, lr}
 80049ac:	3901      	subs	r1, #1
 80049ae:	4603      	mov	r3, r0
 80049b0:	b132      	cbz	r2, 80049c0 <strncpy+0x16>
 80049b2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80049b6:	f803 4b01 	strb.w	r4, [r3], #1
 80049ba:	3a01      	subs	r2, #1
 80049bc:	2c00      	cmp	r4, #0
 80049be:	d1f7      	bne.n	80049b0 <strncpy+0x6>
 80049c0:	441a      	add	r2, r3
 80049c2:	2100      	movs	r1, #0
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d100      	bne.n	80049ca <strncpy+0x20>
 80049c8:	bd10      	pop	{r4, pc}
 80049ca:	f803 1b01 	strb.w	r1, [r3], #1
 80049ce:	e7f9      	b.n	80049c4 <strncpy+0x1a>

080049d0 <strtok>:
 80049d0:	4b16      	ldr	r3, [pc, #88]	@ (8004a2c <strtok+0x5c>)
 80049d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049d6:	681f      	ldr	r7, [r3, #0]
 80049d8:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80049da:	4605      	mov	r5, r0
 80049dc:	460e      	mov	r6, r1
 80049de:	b9ec      	cbnz	r4, 8004a1c <strtok+0x4c>
 80049e0:	2050      	movs	r0, #80	@ 0x50
 80049e2:	f000 f92d 	bl	8004c40 <malloc>
 80049e6:	4602      	mov	r2, r0
 80049e8:	6478      	str	r0, [r7, #68]	@ 0x44
 80049ea:	b920      	cbnz	r0, 80049f6 <strtok+0x26>
 80049ec:	4b10      	ldr	r3, [pc, #64]	@ (8004a30 <strtok+0x60>)
 80049ee:	4811      	ldr	r0, [pc, #68]	@ (8004a34 <strtok+0x64>)
 80049f0:	215b      	movs	r1, #91	@ 0x5b
 80049f2:	f000 f8bd 	bl	8004b70 <__assert_func>
 80049f6:	e9c0 4400 	strd	r4, r4, [r0]
 80049fa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80049fe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004a02:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8004a06:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8004a0a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8004a0e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8004a12:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8004a16:	6184      	str	r4, [r0, #24]
 8004a18:	7704      	strb	r4, [r0, #28]
 8004a1a:	6244      	str	r4, [r0, #36]	@ 0x24
 8004a1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a1e:	4631      	mov	r1, r6
 8004a20:	4628      	mov	r0, r5
 8004a22:	2301      	movs	r3, #1
 8004a24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a28:	f000 b806 	b.w	8004a38 <__strtok_r>
 8004a2c:	20000020 	.word	0x20000020
 8004a30:	0800599d 	.word	0x0800599d
 8004a34:	080059b4 	.word	0x080059b4

08004a38 <__strtok_r>:
 8004a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a3a:	4604      	mov	r4, r0
 8004a3c:	b908      	cbnz	r0, 8004a42 <__strtok_r+0xa>
 8004a3e:	6814      	ldr	r4, [r2, #0]
 8004a40:	b144      	cbz	r4, 8004a54 <__strtok_r+0x1c>
 8004a42:	4620      	mov	r0, r4
 8004a44:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004a48:	460f      	mov	r7, r1
 8004a4a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004a4e:	b91e      	cbnz	r6, 8004a58 <__strtok_r+0x20>
 8004a50:	b965      	cbnz	r5, 8004a6c <__strtok_r+0x34>
 8004a52:	6015      	str	r5, [r2, #0]
 8004a54:	2000      	movs	r0, #0
 8004a56:	e005      	b.n	8004a64 <__strtok_r+0x2c>
 8004a58:	42b5      	cmp	r5, r6
 8004a5a:	d1f6      	bne.n	8004a4a <__strtok_r+0x12>
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1f0      	bne.n	8004a42 <__strtok_r+0xa>
 8004a60:	6014      	str	r4, [r2, #0]
 8004a62:	7003      	strb	r3, [r0, #0]
 8004a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a66:	461c      	mov	r4, r3
 8004a68:	e00c      	b.n	8004a84 <__strtok_r+0x4c>
 8004a6a:	b915      	cbnz	r5, 8004a72 <__strtok_r+0x3a>
 8004a6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004a70:	460e      	mov	r6, r1
 8004a72:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004a76:	42ab      	cmp	r3, r5
 8004a78:	d1f7      	bne.n	8004a6a <__strtok_r+0x32>
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0f3      	beq.n	8004a66 <__strtok_r+0x2e>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004a84:	6014      	str	r4, [r2, #0]
 8004a86:	e7ed      	b.n	8004a64 <__strtok_r+0x2c>

08004a88 <_close_r>:
 8004a88:	b538      	push	{r3, r4, r5, lr}
 8004a8a:	4d06      	ldr	r5, [pc, #24]	@ (8004aa4 <_close_r+0x1c>)
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	4604      	mov	r4, r0
 8004a90:	4608      	mov	r0, r1
 8004a92:	602b      	str	r3, [r5, #0]
 8004a94:	f7fc fdc9 	bl	800162a <_close>
 8004a98:	1c43      	adds	r3, r0, #1
 8004a9a:	d102      	bne.n	8004aa2 <_close_r+0x1a>
 8004a9c:	682b      	ldr	r3, [r5, #0]
 8004a9e:	b103      	cbz	r3, 8004aa2 <_close_r+0x1a>
 8004aa0:	6023      	str	r3, [r4, #0]
 8004aa2:	bd38      	pop	{r3, r4, r5, pc}
 8004aa4:	20000564 	.word	0x20000564

08004aa8 <_lseek_r>:
 8004aa8:	b538      	push	{r3, r4, r5, lr}
 8004aaa:	4d07      	ldr	r5, [pc, #28]	@ (8004ac8 <_lseek_r+0x20>)
 8004aac:	4604      	mov	r4, r0
 8004aae:	4608      	mov	r0, r1
 8004ab0:	4611      	mov	r1, r2
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	602a      	str	r2, [r5, #0]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f7fc fdde 	bl	8001678 <_lseek>
 8004abc:	1c43      	adds	r3, r0, #1
 8004abe:	d102      	bne.n	8004ac6 <_lseek_r+0x1e>
 8004ac0:	682b      	ldr	r3, [r5, #0]
 8004ac2:	b103      	cbz	r3, 8004ac6 <_lseek_r+0x1e>
 8004ac4:	6023      	str	r3, [r4, #0]
 8004ac6:	bd38      	pop	{r3, r4, r5, pc}
 8004ac8:	20000564 	.word	0x20000564

08004acc <_read_r>:
 8004acc:	b538      	push	{r3, r4, r5, lr}
 8004ace:	4d07      	ldr	r5, [pc, #28]	@ (8004aec <_read_r+0x20>)
 8004ad0:	4604      	mov	r4, r0
 8004ad2:	4608      	mov	r0, r1
 8004ad4:	4611      	mov	r1, r2
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	602a      	str	r2, [r5, #0]
 8004ada:	461a      	mov	r2, r3
 8004adc:	f7fc fd6c 	bl	80015b8 <_read>
 8004ae0:	1c43      	adds	r3, r0, #1
 8004ae2:	d102      	bne.n	8004aea <_read_r+0x1e>
 8004ae4:	682b      	ldr	r3, [r5, #0]
 8004ae6:	b103      	cbz	r3, 8004aea <_read_r+0x1e>
 8004ae8:	6023      	str	r3, [r4, #0]
 8004aea:	bd38      	pop	{r3, r4, r5, pc}
 8004aec:	20000564 	.word	0x20000564

08004af0 <_write_r>:
 8004af0:	b538      	push	{r3, r4, r5, lr}
 8004af2:	4d07      	ldr	r5, [pc, #28]	@ (8004b10 <_write_r+0x20>)
 8004af4:	4604      	mov	r4, r0
 8004af6:	4608      	mov	r0, r1
 8004af8:	4611      	mov	r1, r2
 8004afa:	2200      	movs	r2, #0
 8004afc:	602a      	str	r2, [r5, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	f7fc fd77 	bl	80015f2 <_write>
 8004b04:	1c43      	adds	r3, r0, #1
 8004b06:	d102      	bne.n	8004b0e <_write_r+0x1e>
 8004b08:	682b      	ldr	r3, [r5, #0]
 8004b0a:	b103      	cbz	r3, 8004b0e <_write_r+0x1e>
 8004b0c:	6023      	str	r3, [r4, #0]
 8004b0e:	bd38      	pop	{r3, r4, r5, pc}
 8004b10:	20000564 	.word	0x20000564

08004b14 <__errno>:
 8004b14:	4b01      	ldr	r3, [pc, #4]	@ (8004b1c <__errno+0x8>)
 8004b16:	6818      	ldr	r0, [r3, #0]
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	20000020 	.word	0x20000020

08004b20 <__libc_init_array>:
 8004b20:	b570      	push	{r4, r5, r6, lr}
 8004b22:	4d0d      	ldr	r5, [pc, #52]	@ (8004b58 <__libc_init_array+0x38>)
 8004b24:	4c0d      	ldr	r4, [pc, #52]	@ (8004b5c <__libc_init_array+0x3c>)
 8004b26:	1b64      	subs	r4, r4, r5
 8004b28:	10a4      	asrs	r4, r4, #2
 8004b2a:	2600      	movs	r6, #0
 8004b2c:	42a6      	cmp	r6, r4
 8004b2e:	d109      	bne.n	8004b44 <__libc_init_array+0x24>
 8004b30:	4d0b      	ldr	r5, [pc, #44]	@ (8004b60 <__libc_init_array+0x40>)
 8004b32:	4c0c      	ldr	r4, [pc, #48]	@ (8004b64 <__libc_init_array+0x44>)
 8004b34:	f000 fe3a 	bl	80057ac <_init>
 8004b38:	1b64      	subs	r4, r4, r5
 8004b3a:	10a4      	asrs	r4, r4, #2
 8004b3c:	2600      	movs	r6, #0
 8004b3e:	42a6      	cmp	r6, r4
 8004b40:	d105      	bne.n	8004b4e <__libc_init_array+0x2e>
 8004b42:	bd70      	pop	{r4, r5, r6, pc}
 8004b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b48:	4798      	blx	r3
 8004b4a:	3601      	adds	r6, #1
 8004b4c:	e7ee      	b.n	8004b2c <__libc_init_array+0xc>
 8004b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b52:	4798      	blx	r3
 8004b54:	3601      	adds	r6, #1
 8004b56:	e7f2      	b.n	8004b3e <__libc_init_array+0x1e>
 8004b58:	08005a88 	.word	0x08005a88
 8004b5c:	08005a88 	.word	0x08005a88
 8004b60:	08005a88 	.word	0x08005a88
 8004b64:	08005a8c 	.word	0x08005a8c

08004b68 <__retarget_lock_init_recursive>:
 8004b68:	4770      	bx	lr

08004b6a <__retarget_lock_acquire_recursive>:
 8004b6a:	4770      	bx	lr

08004b6c <__retarget_lock_release_recursive>:
 8004b6c:	4770      	bx	lr
	...

08004b70 <__assert_func>:
 8004b70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004b72:	4614      	mov	r4, r2
 8004b74:	461a      	mov	r2, r3
 8004b76:	4b09      	ldr	r3, [pc, #36]	@ (8004b9c <__assert_func+0x2c>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4605      	mov	r5, r0
 8004b7c:	68d8      	ldr	r0, [r3, #12]
 8004b7e:	b954      	cbnz	r4, 8004b96 <__assert_func+0x26>
 8004b80:	4b07      	ldr	r3, [pc, #28]	@ (8004ba0 <__assert_func+0x30>)
 8004b82:	461c      	mov	r4, r3
 8004b84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004b88:	9100      	str	r1, [sp, #0]
 8004b8a:	462b      	mov	r3, r5
 8004b8c:	4905      	ldr	r1, [pc, #20]	@ (8004ba4 <__assert_func+0x34>)
 8004b8e:	f000 f9b9 	bl	8004f04 <fiprintf>
 8004b92:	f000 f9d9 	bl	8004f48 <abort>
 8004b96:	4b04      	ldr	r3, [pc, #16]	@ (8004ba8 <__assert_func+0x38>)
 8004b98:	e7f4      	b.n	8004b84 <__assert_func+0x14>
 8004b9a:	bf00      	nop
 8004b9c:	20000020 	.word	0x20000020
 8004ba0:	08005a49 	.word	0x08005a49
 8004ba4:	08005a1b 	.word	0x08005a1b
 8004ba8:	08005a0e 	.word	0x08005a0e

08004bac <_free_r>:
 8004bac:	b538      	push	{r3, r4, r5, lr}
 8004bae:	4605      	mov	r5, r0
 8004bb0:	2900      	cmp	r1, #0
 8004bb2:	d041      	beq.n	8004c38 <_free_r+0x8c>
 8004bb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bb8:	1f0c      	subs	r4, r1, #4
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	bfb8      	it	lt
 8004bbe:	18e4      	addlt	r4, r4, r3
 8004bc0:	f000 f8e8 	bl	8004d94 <__malloc_lock>
 8004bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8004c3c <_free_r+0x90>)
 8004bc6:	6813      	ldr	r3, [r2, #0]
 8004bc8:	b933      	cbnz	r3, 8004bd8 <_free_r+0x2c>
 8004bca:	6063      	str	r3, [r4, #4]
 8004bcc:	6014      	str	r4, [r2, #0]
 8004bce:	4628      	mov	r0, r5
 8004bd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bd4:	f000 b8e4 	b.w	8004da0 <__malloc_unlock>
 8004bd8:	42a3      	cmp	r3, r4
 8004bda:	d908      	bls.n	8004bee <_free_r+0x42>
 8004bdc:	6820      	ldr	r0, [r4, #0]
 8004bde:	1821      	adds	r1, r4, r0
 8004be0:	428b      	cmp	r3, r1
 8004be2:	bf01      	itttt	eq
 8004be4:	6819      	ldreq	r1, [r3, #0]
 8004be6:	685b      	ldreq	r3, [r3, #4]
 8004be8:	1809      	addeq	r1, r1, r0
 8004bea:	6021      	streq	r1, [r4, #0]
 8004bec:	e7ed      	b.n	8004bca <_free_r+0x1e>
 8004bee:	461a      	mov	r2, r3
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	b10b      	cbz	r3, 8004bf8 <_free_r+0x4c>
 8004bf4:	42a3      	cmp	r3, r4
 8004bf6:	d9fa      	bls.n	8004bee <_free_r+0x42>
 8004bf8:	6811      	ldr	r1, [r2, #0]
 8004bfa:	1850      	adds	r0, r2, r1
 8004bfc:	42a0      	cmp	r0, r4
 8004bfe:	d10b      	bne.n	8004c18 <_free_r+0x6c>
 8004c00:	6820      	ldr	r0, [r4, #0]
 8004c02:	4401      	add	r1, r0
 8004c04:	1850      	adds	r0, r2, r1
 8004c06:	4283      	cmp	r3, r0
 8004c08:	6011      	str	r1, [r2, #0]
 8004c0a:	d1e0      	bne.n	8004bce <_free_r+0x22>
 8004c0c:	6818      	ldr	r0, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	6053      	str	r3, [r2, #4]
 8004c12:	4408      	add	r0, r1
 8004c14:	6010      	str	r0, [r2, #0]
 8004c16:	e7da      	b.n	8004bce <_free_r+0x22>
 8004c18:	d902      	bls.n	8004c20 <_free_r+0x74>
 8004c1a:	230c      	movs	r3, #12
 8004c1c:	602b      	str	r3, [r5, #0]
 8004c1e:	e7d6      	b.n	8004bce <_free_r+0x22>
 8004c20:	6820      	ldr	r0, [r4, #0]
 8004c22:	1821      	adds	r1, r4, r0
 8004c24:	428b      	cmp	r3, r1
 8004c26:	bf04      	itt	eq
 8004c28:	6819      	ldreq	r1, [r3, #0]
 8004c2a:	685b      	ldreq	r3, [r3, #4]
 8004c2c:	6063      	str	r3, [r4, #4]
 8004c2e:	bf04      	itt	eq
 8004c30:	1809      	addeq	r1, r1, r0
 8004c32:	6021      	streq	r1, [r4, #0]
 8004c34:	6054      	str	r4, [r2, #4]
 8004c36:	e7ca      	b.n	8004bce <_free_r+0x22>
 8004c38:	bd38      	pop	{r3, r4, r5, pc}
 8004c3a:	bf00      	nop
 8004c3c:	20000570 	.word	0x20000570

08004c40 <malloc>:
 8004c40:	4b02      	ldr	r3, [pc, #8]	@ (8004c4c <malloc+0xc>)
 8004c42:	4601      	mov	r1, r0
 8004c44:	6818      	ldr	r0, [r3, #0]
 8004c46:	f000 b825 	b.w	8004c94 <_malloc_r>
 8004c4a:	bf00      	nop
 8004c4c:	20000020 	.word	0x20000020

08004c50 <sbrk_aligned>:
 8004c50:	b570      	push	{r4, r5, r6, lr}
 8004c52:	4e0f      	ldr	r6, [pc, #60]	@ (8004c90 <sbrk_aligned+0x40>)
 8004c54:	460c      	mov	r4, r1
 8004c56:	6831      	ldr	r1, [r6, #0]
 8004c58:	4605      	mov	r5, r0
 8004c5a:	b911      	cbnz	r1, 8004c62 <sbrk_aligned+0x12>
 8004c5c:	f000 f964 	bl	8004f28 <_sbrk_r>
 8004c60:	6030      	str	r0, [r6, #0]
 8004c62:	4621      	mov	r1, r4
 8004c64:	4628      	mov	r0, r5
 8004c66:	f000 f95f 	bl	8004f28 <_sbrk_r>
 8004c6a:	1c43      	adds	r3, r0, #1
 8004c6c:	d103      	bne.n	8004c76 <sbrk_aligned+0x26>
 8004c6e:	f04f 34ff 	mov.w	r4, #4294967295
 8004c72:	4620      	mov	r0, r4
 8004c74:	bd70      	pop	{r4, r5, r6, pc}
 8004c76:	1cc4      	adds	r4, r0, #3
 8004c78:	f024 0403 	bic.w	r4, r4, #3
 8004c7c:	42a0      	cmp	r0, r4
 8004c7e:	d0f8      	beq.n	8004c72 <sbrk_aligned+0x22>
 8004c80:	1a21      	subs	r1, r4, r0
 8004c82:	4628      	mov	r0, r5
 8004c84:	f000 f950 	bl	8004f28 <_sbrk_r>
 8004c88:	3001      	adds	r0, #1
 8004c8a:	d1f2      	bne.n	8004c72 <sbrk_aligned+0x22>
 8004c8c:	e7ef      	b.n	8004c6e <sbrk_aligned+0x1e>
 8004c8e:	bf00      	nop
 8004c90:	2000056c 	.word	0x2000056c

08004c94 <_malloc_r>:
 8004c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c98:	1ccd      	adds	r5, r1, #3
 8004c9a:	f025 0503 	bic.w	r5, r5, #3
 8004c9e:	3508      	adds	r5, #8
 8004ca0:	2d0c      	cmp	r5, #12
 8004ca2:	bf38      	it	cc
 8004ca4:	250c      	movcc	r5, #12
 8004ca6:	2d00      	cmp	r5, #0
 8004ca8:	4606      	mov	r6, r0
 8004caa:	db01      	blt.n	8004cb0 <_malloc_r+0x1c>
 8004cac:	42a9      	cmp	r1, r5
 8004cae:	d904      	bls.n	8004cba <_malloc_r+0x26>
 8004cb0:	230c      	movs	r3, #12
 8004cb2:	6033      	str	r3, [r6, #0]
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d90 <_malloc_r+0xfc>
 8004cbe:	f000 f869 	bl	8004d94 <__malloc_lock>
 8004cc2:	f8d8 3000 	ldr.w	r3, [r8]
 8004cc6:	461c      	mov	r4, r3
 8004cc8:	bb44      	cbnz	r4, 8004d1c <_malloc_r+0x88>
 8004cca:	4629      	mov	r1, r5
 8004ccc:	4630      	mov	r0, r6
 8004cce:	f7ff ffbf 	bl	8004c50 <sbrk_aligned>
 8004cd2:	1c43      	adds	r3, r0, #1
 8004cd4:	4604      	mov	r4, r0
 8004cd6:	d158      	bne.n	8004d8a <_malloc_r+0xf6>
 8004cd8:	f8d8 4000 	ldr.w	r4, [r8]
 8004cdc:	4627      	mov	r7, r4
 8004cde:	2f00      	cmp	r7, #0
 8004ce0:	d143      	bne.n	8004d6a <_malloc_r+0xd6>
 8004ce2:	2c00      	cmp	r4, #0
 8004ce4:	d04b      	beq.n	8004d7e <_malloc_r+0xea>
 8004ce6:	6823      	ldr	r3, [r4, #0]
 8004ce8:	4639      	mov	r1, r7
 8004cea:	4630      	mov	r0, r6
 8004cec:	eb04 0903 	add.w	r9, r4, r3
 8004cf0:	f000 f91a 	bl	8004f28 <_sbrk_r>
 8004cf4:	4581      	cmp	r9, r0
 8004cf6:	d142      	bne.n	8004d7e <_malloc_r+0xea>
 8004cf8:	6821      	ldr	r1, [r4, #0]
 8004cfa:	1a6d      	subs	r5, r5, r1
 8004cfc:	4629      	mov	r1, r5
 8004cfe:	4630      	mov	r0, r6
 8004d00:	f7ff ffa6 	bl	8004c50 <sbrk_aligned>
 8004d04:	3001      	adds	r0, #1
 8004d06:	d03a      	beq.n	8004d7e <_malloc_r+0xea>
 8004d08:	6823      	ldr	r3, [r4, #0]
 8004d0a:	442b      	add	r3, r5
 8004d0c:	6023      	str	r3, [r4, #0]
 8004d0e:	f8d8 3000 	ldr.w	r3, [r8]
 8004d12:	685a      	ldr	r2, [r3, #4]
 8004d14:	bb62      	cbnz	r2, 8004d70 <_malloc_r+0xdc>
 8004d16:	f8c8 7000 	str.w	r7, [r8]
 8004d1a:	e00f      	b.n	8004d3c <_malloc_r+0xa8>
 8004d1c:	6822      	ldr	r2, [r4, #0]
 8004d1e:	1b52      	subs	r2, r2, r5
 8004d20:	d420      	bmi.n	8004d64 <_malloc_r+0xd0>
 8004d22:	2a0b      	cmp	r2, #11
 8004d24:	d917      	bls.n	8004d56 <_malloc_r+0xc2>
 8004d26:	1961      	adds	r1, r4, r5
 8004d28:	42a3      	cmp	r3, r4
 8004d2a:	6025      	str	r5, [r4, #0]
 8004d2c:	bf18      	it	ne
 8004d2e:	6059      	strne	r1, [r3, #4]
 8004d30:	6863      	ldr	r3, [r4, #4]
 8004d32:	bf08      	it	eq
 8004d34:	f8c8 1000 	streq.w	r1, [r8]
 8004d38:	5162      	str	r2, [r4, r5]
 8004d3a:	604b      	str	r3, [r1, #4]
 8004d3c:	4630      	mov	r0, r6
 8004d3e:	f000 f82f 	bl	8004da0 <__malloc_unlock>
 8004d42:	f104 000b 	add.w	r0, r4, #11
 8004d46:	1d23      	adds	r3, r4, #4
 8004d48:	f020 0007 	bic.w	r0, r0, #7
 8004d4c:	1ac2      	subs	r2, r0, r3
 8004d4e:	bf1c      	itt	ne
 8004d50:	1a1b      	subne	r3, r3, r0
 8004d52:	50a3      	strne	r3, [r4, r2]
 8004d54:	e7af      	b.n	8004cb6 <_malloc_r+0x22>
 8004d56:	6862      	ldr	r2, [r4, #4]
 8004d58:	42a3      	cmp	r3, r4
 8004d5a:	bf0c      	ite	eq
 8004d5c:	f8c8 2000 	streq.w	r2, [r8]
 8004d60:	605a      	strne	r2, [r3, #4]
 8004d62:	e7eb      	b.n	8004d3c <_malloc_r+0xa8>
 8004d64:	4623      	mov	r3, r4
 8004d66:	6864      	ldr	r4, [r4, #4]
 8004d68:	e7ae      	b.n	8004cc8 <_malloc_r+0x34>
 8004d6a:	463c      	mov	r4, r7
 8004d6c:	687f      	ldr	r7, [r7, #4]
 8004d6e:	e7b6      	b.n	8004cde <_malloc_r+0x4a>
 8004d70:	461a      	mov	r2, r3
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	42a3      	cmp	r3, r4
 8004d76:	d1fb      	bne.n	8004d70 <_malloc_r+0xdc>
 8004d78:	2300      	movs	r3, #0
 8004d7a:	6053      	str	r3, [r2, #4]
 8004d7c:	e7de      	b.n	8004d3c <_malloc_r+0xa8>
 8004d7e:	230c      	movs	r3, #12
 8004d80:	6033      	str	r3, [r6, #0]
 8004d82:	4630      	mov	r0, r6
 8004d84:	f000 f80c 	bl	8004da0 <__malloc_unlock>
 8004d88:	e794      	b.n	8004cb4 <_malloc_r+0x20>
 8004d8a:	6005      	str	r5, [r0, #0]
 8004d8c:	e7d6      	b.n	8004d3c <_malloc_r+0xa8>
 8004d8e:	bf00      	nop
 8004d90:	20000570 	.word	0x20000570

08004d94 <__malloc_lock>:
 8004d94:	4801      	ldr	r0, [pc, #4]	@ (8004d9c <__malloc_lock+0x8>)
 8004d96:	f7ff bee8 	b.w	8004b6a <__retarget_lock_acquire_recursive>
 8004d9a:	bf00      	nop
 8004d9c:	20000568 	.word	0x20000568

08004da0 <__malloc_unlock>:
 8004da0:	4801      	ldr	r0, [pc, #4]	@ (8004da8 <__malloc_unlock+0x8>)
 8004da2:	f7ff bee3 	b.w	8004b6c <__retarget_lock_release_recursive>
 8004da6:	bf00      	nop
 8004da8:	20000568 	.word	0x20000568

08004dac <__sflush_r>:
 8004dac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004db4:	0716      	lsls	r6, r2, #28
 8004db6:	4605      	mov	r5, r0
 8004db8:	460c      	mov	r4, r1
 8004dba:	d454      	bmi.n	8004e66 <__sflush_r+0xba>
 8004dbc:	684b      	ldr	r3, [r1, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	dc02      	bgt.n	8004dc8 <__sflush_r+0x1c>
 8004dc2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	dd48      	ble.n	8004e5a <__sflush_r+0xae>
 8004dc8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004dca:	2e00      	cmp	r6, #0
 8004dcc:	d045      	beq.n	8004e5a <__sflush_r+0xae>
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004dd4:	682f      	ldr	r7, [r5, #0]
 8004dd6:	6a21      	ldr	r1, [r4, #32]
 8004dd8:	602b      	str	r3, [r5, #0]
 8004dda:	d030      	beq.n	8004e3e <__sflush_r+0x92>
 8004ddc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004dde:	89a3      	ldrh	r3, [r4, #12]
 8004de0:	0759      	lsls	r1, r3, #29
 8004de2:	d505      	bpl.n	8004df0 <__sflush_r+0x44>
 8004de4:	6863      	ldr	r3, [r4, #4]
 8004de6:	1ad2      	subs	r2, r2, r3
 8004de8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004dea:	b10b      	cbz	r3, 8004df0 <__sflush_r+0x44>
 8004dec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004dee:	1ad2      	subs	r2, r2, r3
 8004df0:	2300      	movs	r3, #0
 8004df2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004df4:	6a21      	ldr	r1, [r4, #32]
 8004df6:	4628      	mov	r0, r5
 8004df8:	47b0      	blx	r6
 8004dfa:	1c43      	adds	r3, r0, #1
 8004dfc:	89a3      	ldrh	r3, [r4, #12]
 8004dfe:	d106      	bne.n	8004e0e <__sflush_r+0x62>
 8004e00:	6829      	ldr	r1, [r5, #0]
 8004e02:	291d      	cmp	r1, #29
 8004e04:	d82b      	bhi.n	8004e5e <__sflush_r+0xb2>
 8004e06:	4a2a      	ldr	r2, [pc, #168]	@ (8004eb0 <__sflush_r+0x104>)
 8004e08:	410a      	asrs	r2, r1
 8004e0a:	07d6      	lsls	r6, r2, #31
 8004e0c:	d427      	bmi.n	8004e5e <__sflush_r+0xb2>
 8004e0e:	2200      	movs	r2, #0
 8004e10:	6062      	str	r2, [r4, #4]
 8004e12:	04d9      	lsls	r1, r3, #19
 8004e14:	6922      	ldr	r2, [r4, #16]
 8004e16:	6022      	str	r2, [r4, #0]
 8004e18:	d504      	bpl.n	8004e24 <__sflush_r+0x78>
 8004e1a:	1c42      	adds	r2, r0, #1
 8004e1c:	d101      	bne.n	8004e22 <__sflush_r+0x76>
 8004e1e:	682b      	ldr	r3, [r5, #0]
 8004e20:	b903      	cbnz	r3, 8004e24 <__sflush_r+0x78>
 8004e22:	6560      	str	r0, [r4, #84]	@ 0x54
 8004e24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e26:	602f      	str	r7, [r5, #0]
 8004e28:	b1b9      	cbz	r1, 8004e5a <__sflush_r+0xae>
 8004e2a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e2e:	4299      	cmp	r1, r3
 8004e30:	d002      	beq.n	8004e38 <__sflush_r+0x8c>
 8004e32:	4628      	mov	r0, r5
 8004e34:	f7ff feba 	bl	8004bac <_free_r>
 8004e38:	2300      	movs	r3, #0
 8004e3a:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e3c:	e00d      	b.n	8004e5a <__sflush_r+0xae>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	4628      	mov	r0, r5
 8004e42:	47b0      	blx	r6
 8004e44:	4602      	mov	r2, r0
 8004e46:	1c50      	adds	r0, r2, #1
 8004e48:	d1c9      	bne.n	8004dde <__sflush_r+0x32>
 8004e4a:	682b      	ldr	r3, [r5, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0c6      	beq.n	8004dde <__sflush_r+0x32>
 8004e50:	2b1d      	cmp	r3, #29
 8004e52:	d001      	beq.n	8004e58 <__sflush_r+0xac>
 8004e54:	2b16      	cmp	r3, #22
 8004e56:	d11e      	bne.n	8004e96 <__sflush_r+0xea>
 8004e58:	602f      	str	r7, [r5, #0]
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	e022      	b.n	8004ea4 <__sflush_r+0xf8>
 8004e5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e62:	b21b      	sxth	r3, r3
 8004e64:	e01b      	b.n	8004e9e <__sflush_r+0xf2>
 8004e66:	690f      	ldr	r7, [r1, #16]
 8004e68:	2f00      	cmp	r7, #0
 8004e6a:	d0f6      	beq.n	8004e5a <__sflush_r+0xae>
 8004e6c:	0793      	lsls	r3, r2, #30
 8004e6e:	680e      	ldr	r6, [r1, #0]
 8004e70:	bf08      	it	eq
 8004e72:	694b      	ldreq	r3, [r1, #20]
 8004e74:	600f      	str	r7, [r1, #0]
 8004e76:	bf18      	it	ne
 8004e78:	2300      	movne	r3, #0
 8004e7a:	eba6 0807 	sub.w	r8, r6, r7
 8004e7e:	608b      	str	r3, [r1, #8]
 8004e80:	f1b8 0f00 	cmp.w	r8, #0
 8004e84:	dde9      	ble.n	8004e5a <__sflush_r+0xae>
 8004e86:	6a21      	ldr	r1, [r4, #32]
 8004e88:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004e8a:	4643      	mov	r3, r8
 8004e8c:	463a      	mov	r2, r7
 8004e8e:	4628      	mov	r0, r5
 8004e90:	47b0      	blx	r6
 8004e92:	2800      	cmp	r0, #0
 8004e94:	dc08      	bgt.n	8004ea8 <__sflush_r+0xfc>
 8004e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e9e:	81a3      	strh	r3, [r4, #12]
 8004ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ea8:	4407      	add	r7, r0
 8004eaa:	eba8 0800 	sub.w	r8, r8, r0
 8004eae:	e7e7      	b.n	8004e80 <__sflush_r+0xd4>
 8004eb0:	dfbffffe 	.word	0xdfbffffe

08004eb4 <_fflush_r>:
 8004eb4:	b538      	push	{r3, r4, r5, lr}
 8004eb6:	690b      	ldr	r3, [r1, #16]
 8004eb8:	4605      	mov	r5, r0
 8004eba:	460c      	mov	r4, r1
 8004ebc:	b913      	cbnz	r3, 8004ec4 <_fflush_r+0x10>
 8004ebe:	2500      	movs	r5, #0
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	bd38      	pop	{r3, r4, r5, pc}
 8004ec4:	b118      	cbz	r0, 8004ece <_fflush_r+0x1a>
 8004ec6:	6a03      	ldr	r3, [r0, #32]
 8004ec8:	b90b      	cbnz	r3, 8004ece <_fflush_r+0x1a>
 8004eca:	f7ff fced 	bl	80048a8 <__sinit>
 8004ece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0f3      	beq.n	8004ebe <_fflush_r+0xa>
 8004ed6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004ed8:	07d0      	lsls	r0, r2, #31
 8004eda:	d404      	bmi.n	8004ee6 <_fflush_r+0x32>
 8004edc:	0599      	lsls	r1, r3, #22
 8004ede:	d402      	bmi.n	8004ee6 <_fflush_r+0x32>
 8004ee0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ee2:	f7ff fe42 	bl	8004b6a <__retarget_lock_acquire_recursive>
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	4621      	mov	r1, r4
 8004eea:	f7ff ff5f 	bl	8004dac <__sflush_r>
 8004eee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ef0:	07da      	lsls	r2, r3, #31
 8004ef2:	4605      	mov	r5, r0
 8004ef4:	d4e4      	bmi.n	8004ec0 <_fflush_r+0xc>
 8004ef6:	89a3      	ldrh	r3, [r4, #12]
 8004ef8:	059b      	lsls	r3, r3, #22
 8004efa:	d4e1      	bmi.n	8004ec0 <_fflush_r+0xc>
 8004efc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004efe:	f7ff fe35 	bl	8004b6c <__retarget_lock_release_recursive>
 8004f02:	e7dd      	b.n	8004ec0 <_fflush_r+0xc>

08004f04 <fiprintf>:
 8004f04:	b40e      	push	{r1, r2, r3}
 8004f06:	b503      	push	{r0, r1, lr}
 8004f08:	4601      	mov	r1, r0
 8004f0a:	ab03      	add	r3, sp, #12
 8004f0c:	4805      	ldr	r0, [pc, #20]	@ (8004f24 <fiprintf+0x20>)
 8004f0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f12:	6800      	ldr	r0, [r0, #0]
 8004f14:	9301      	str	r3, [sp, #4]
 8004f16:	f000 f847 	bl	8004fa8 <_vfiprintf_r>
 8004f1a:	b002      	add	sp, #8
 8004f1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f20:	b003      	add	sp, #12
 8004f22:	4770      	bx	lr
 8004f24:	20000020 	.word	0x20000020

08004f28 <_sbrk_r>:
 8004f28:	b538      	push	{r3, r4, r5, lr}
 8004f2a:	4d06      	ldr	r5, [pc, #24]	@ (8004f44 <_sbrk_r+0x1c>)
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	4604      	mov	r4, r0
 8004f30:	4608      	mov	r0, r1
 8004f32:	602b      	str	r3, [r5, #0]
 8004f34:	f7fc fbae 	bl	8001694 <_sbrk>
 8004f38:	1c43      	adds	r3, r0, #1
 8004f3a:	d102      	bne.n	8004f42 <_sbrk_r+0x1a>
 8004f3c:	682b      	ldr	r3, [r5, #0]
 8004f3e:	b103      	cbz	r3, 8004f42 <_sbrk_r+0x1a>
 8004f40:	6023      	str	r3, [r4, #0]
 8004f42:	bd38      	pop	{r3, r4, r5, pc}
 8004f44:	20000564 	.word	0x20000564

08004f48 <abort>:
 8004f48:	b508      	push	{r3, lr}
 8004f4a:	2006      	movs	r0, #6
 8004f4c:	f000 fb8e 	bl	800566c <raise>
 8004f50:	2001      	movs	r0, #1
 8004f52:	f7fc fb26 	bl	80015a2 <_exit>

08004f56 <__sfputc_r>:
 8004f56:	6893      	ldr	r3, [r2, #8]
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	b410      	push	{r4}
 8004f5e:	6093      	str	r3, [r2, #8]
 8004f60:	da08      	bge.n	8004f74 <__sfputc_r+0x1e>
 8004f62:	6994      	ldr	r4, [r2, #24]
 8004f64:	42a3      	cmp	r3, r4
 8004f66:	db01      	blt.n	8004f6c <__sfputc_r+0x16>
 8004f68:	290a      	cmp	r1, #10
 8004f6a:	d103      	bne.n	8004f74 <__sfputc_r+0x1e>
 8004f6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f70:	f000 bac0 	b.w	80054f4 <__swbuf_r>
 8004f74:	6813      	ldr	r3, [r2, #0]
 8004f76:	1c58      	adds	r0, r3, #1
 8004f78:	6010      	str	r0, [r2, #0]
 8004f7a:	7019      	strb	r1, [r3, #0]
 8004f7c:	4608      	mov	r0, r1
 8004f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <__sfputs_r>:
 8004f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f86:	4606      	mov	r6, r0
 8004f88:	460f      	mov	r7, r1
 8004f8a:	4614      	mov	r4, r2
 8004f8c:	18d5      	adds	r5, r2, r3
 8004f8e:	42ac      	cmp	r4, r5
 8004f90:	d101      	bne.n	8004f96 <__sfputs_r+0x12>
 8004f92:	2000      	movs	r0, #0
 8004f94:	e007      	b.n	8004fa6 <__sfputs_r+0x22>
 8004f96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f9a:	463a      	mov	r2, r7
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	f7ff ffda 	bl	8004f56 <__sfputc_r>
 8004fa2:	1c43      	adds	r3, r0, #1
 8004fa4:	d1f3      	bne.n	8004f8e <__sfputs_r+0xa>
 8004fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004fa8 <_vfiprintf_r>:
 8004fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fac:	460d      	mov	r5, r1
 8004fae:	b09d      	sub	sp, #116	@ 0x74
 8004fb0:	4614      	mov	r4, r2
 8004fb2:	4698      	mov	r8, r3
 8004fb4:	4606      	mov	r6, r0
 8004fb6:	b118      	cbz	r0, 8004fc0 <_vfiprintf_r+0x18>
 8004fb8:	6a03      	ldr	r3, [r0, #32]
 8004fba:	b90b      	cbnz	r3, 8004fc0 <_vfiprintf_r+0x18>
 8004fbc:	f7ff fc74 	bl	80048a8 <__sinit>
 8004fc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004fc2:	07d9      	lsls	r1, r3, #31
 8004fc4:	d405      	bmi.n	8004fd2 <_vfiprintf_r+0x2a>
 8004fc6:	89ab      	ldrh	r3, [r5, #12]
 8004fc8:	059a      	lsls	r2, r3, #22
 8004fca:	d402      	bmi.n	8004fd2 <_vfiprintf_r+0x2a>
 8004fcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004fce:	f7ff fdcc 	bl	8004b6a <__retarget_lock_acquire_recursive>
 8004fd2:	89ab      	ldrh	r3, [r5, #12]
 8004fd4:	071b      	lsls	r3, r3, #28
 8004fd6:	d501      	bpl.n	8004fdc <_vfiprintf_r+0x34>
 8004fd8:	692b      	ldr	r3, [r5, #16]
 8004fda:	b99b      	cbnz	r3, 8005004 <_vfiprintf_r+0x5c>
 8004fdc:	4629      	mov	r1, r5
 8004fde:	4630      	mov	r0, r6
 8004fe0:	f000 fac6 	bl	8005570 <__swsetup_r>
 8004fe4:	b170      	cbz	r0, 8005004 <_vfiprintf_r+0x5c>
 8004fe6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004fe8:	07dc      	lsls	r4, r3, #31
 8004fea:	d504      	bpl.n	8004ff6 <_vfiprintf_r+0x4e>
 8004fec:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff0:	b01d      	add	sp, #116	@ 0x74
 8004ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff6:	89ab      	ldrh	r3, [r5, #12]
 8004ff8:	0598      	lsls	r0, r3, #22
 8004ffa:	d4f7      	bmi.n	8004fec <_vfiprintf_r+0x44>
 8004ffc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ffe:	f7ff fdb5 	bl	8004b6c <__retarget_lock_release_recursive>
 8005002:	e7f3      	b.n	8004fec <_vfiprintf_r+0x44>
 8005004:	2300      	movs	r3, #0
 8005006:	9309      	str	r3, [sp, #36]	@ 0x24
 8005008:	2320      	movs	r3, #32
 800500a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800500e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005012:	2330      	movs	r3, #48	@ 0x30
 8005014:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80051c4 <_vfiprintf_r+0x21c>
 8005018:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800501c:	f04f 0901 	mov.w	r9, #1
 8005020:	4623      	mov	r3, r4
 8005022:	469a      	mov	sl, r3
 8005024:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005028:	b10a      	cbz	r2, 800502e <_vfiprintf_r+0x86>
 800502a:	2a25      	cmp	r2, #37	@ 0x25
 800502c:	d1f9      	bne.n	8005022 <_vfiprintf_r+0x7a>
 800502e:	ebba 0b04 	subs.w	fp, sl, r4
 8005032:	d00b      	beq.n	800504c <_vfiprintf_r+0xa4>
 8005034:	465b      	mov	r3, fp
 8005036:	4622      	mov	r2, r4
 8005038:	4629      	mov	r1, r5
 800503a:	4630      	mov	r0, r6
 800503c:	f7ff ffa2 	bl	8004f84 <__sfputs_r>
 8005040:	3001      	adds	r0, #1
 8005042:	f000 80a7 	beq.w	8005194 <_vfiprintf_r+0x1ec>
 8005046:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005048:	445a      	add	r2, fp
 800504a:	9209      	str	r2, [sp, #36]	@ 0x24
 800504c:	f89a 3000 	ldrb.w	r3, [sl]
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 809f 	beq.w	8005194 <_vfiprintf_r+0x1ec>
 8005056:	2300      	movs	r3, #0
 8005058:	f04f 32ff 	mov.w	r2, #4294967295
 800505c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005060:	f10a 0a01 	add.w	sl, sl, #1
 8005064:	9304      	str	r3, [sp, #16]
 8005066:	9307      	str	r3, [sp, #28]
 8005068:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800506c:	931a      	str	r3, [sp, #104]	@ 0x68
 800506e:	4654      	mov	r4, sl
 8005070:	2205      	movs	r2, #5
 8005072:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005076:	4853      	ldr	r0, [pc, #332]	@ (80051c4 <_vfiprintf_r+0x21c>)
 8005078:	f7fb f8e2 	bl	8000240 <memchr>
 800507c:	9a04      	ldr	r2, [sp, #16]
 800507e:	b9d8      	cbnz	r0, 80050b8 <_vfiprintf_r+0x110>
 8005080:	06d1      	lsls	r1, r2, #27
 8005082:	bf44      	itt	mi
 8005084:	2320      	movmi	r3, #32
 8005086:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800508a:	0713      	lsls	r3, r2, #28
 800508c:	bf44      	itt	mi
 800508e:	232b      	movmi	r3, #43	@ 0x2b
 8005090:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005094:	f89a 3000 	ldrb.w	r3, [sl]
 8005098:	2b2a      	cmp	r3, #42	@ 0x2a
 800509a:	d015      	beq.n	80050c8 <_vfiprintf_r+0x120>
 800509c:	9a07      	ldr	r2, [sp, #28]
 800509e:	4654      	mov	r4, sl
 80050a0:	2000      	movs	r0, #0
 80050a2:	f04f 0c0a 	mov.w	ip, #10
 80050a6:	4621      	mov	r1, r4
 80050a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050ac:	3b30      	subs	r3, #48	@ 0x30
 80050ae:	2b09      	cmp	r3, #9
 80050b0:	d94b      	bls.n	800514a <_vfiprintf_r+0x1a2>
 80050b2:	b1b0      	cbz	r0, 80050e2 <_vfiprintf_r+0x13a>
 80050b4:	9207      	str	r2, [sp, #28]
 80050b6:	e014      	b.n	80050e2 <_vfiprintf_r+0x13a>
 80050b8:	eba0 0308 	sub.w	r3, r0, r8
 80050bc:	fa09 f303 	lsl.w	r3, r9, r3
 80050c0:	4313      	orrs	r3, r2
 80050c2:	9304      	str	r3, [sp, #16]
 80050c4:	46a2      	mov	sl, r4
 80050c6:	e7d2      	b.n	800506e <_vfiprintf_r+0xc6>
 80050c8:	9b03      	ldr	r3, [sp, #12]
 80050ca:	1d19      	adds	r1, r3, #4
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	9103      	str	r1, [sp, #12]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	bfbb      	ittet	lt
 80050d4:	425b      	neglt	r3, r3
 80050d6:	f042 0202 	orrlt.w	r2, r2, #2
 80050da:	9307      	strge	r3, [sp, #28]
 80050dc:	9307      	strlt	r3, [sp, #28]
 80050de:	bfb8      	it	lt
 80050e0:	9204      	strlt	r2, [sp, #16]
 80050e2:	7823      	ldrb	r3, [r4, #0]
 80050e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80050e6:	d10a      	bne.n	80050fe <_vfiprintf_r+0x156>
 80050e8:	7863      	ldrb	r3, [r4, #1]
 80050ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80050ec:	d132      	bne.n	8005154 <_vfiprintf_r+0x1ac>
 80050ee:	9b03      	ldr	r3, [sp, #12]
 80050f0:	1d1a      	adds	r2, r3, #4
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	9203      	str	r2, [sp, #12]
 80050f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80050fa:	3402      	adds	r4, #2
 80050fc:	9305      	str	r3, [sp, #20]
 80050fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80051d4 <_vfiprintf_r+0x22c>
 8005102:	7821      	ldrb	r1, [r4, #0]
 8005104:	2203      	movs	r2, #3
 8005106:	4650      	mov	r0, sl
 8005108:	f7fb f89a 	bl	8000240 <memchr>
 800510c:	b138      	cbz	r0, 800511e <_vfiprintf_r+0x176>
 800510e:	9b04      	ldr	r3, [sp, #16]
 8005110:	eba0 000a 	sub.w	r0, r0, sl
 8005114:	2240      	movs	r2, #64	@ 0x40
 8005116:	4082      	lsls	r2, r0
 8005118:	4313      	orrs	r3, r2
 800511a:	3401      	adds	r4, #1
 800511c:	9304      	str	r3, [sp, #16]
 800511e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005122:	4829      	ldr	r0, [pc, #164]	@ (80051c8 <_vfiprintf_r+0x220>)
 8005124:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005128:	2206      	movs	r2, #6
 800512a:	f7fb f889 	bl	8000240 <memchr>
 800512e:	2800      	cmp	r0, #0
 8005130:	d03f      	beq.n	80051b2 <_vfiprintf_r+0x20a>
 8005132:	4b26      	ldr	r3, [pc, #152]	@ (80051cc <_vfiprintf_r+0x224>)
 8005134:	bb1b      	cbnz	r3, 800517e <_vfiprintf_r+0x1d6>
 8005136:	9b03      	ldr	r3, [sp, #12]
 8005138:	3307      	adds	r3, #7
 800513a:	f023 0307 	bic.w	r3, r3, #7
 800513e:	3308      	adds	r3, #8
 8005140:	9303      	str	r3, [sp, #12]
 8005142:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005144:	443b      	add	r3, r7
 8005146:	9309      	str	r3, [sp, #36]	@ 0x24
 8005148:	e76a      	b.n	8005020 <_vfiprintf_r+0x78>
 800514a:	fb0c 3202 	mla	r2, ip, r2, r3
 800514e:	460c      	mov	r4, r1
 8005150:	2001      	movs	r0, #1
 8005152:	e7a8      	b.n	80050a6 <_vfiprintf_r+0xfe>
 8005154:	2300      	movs	r3, #0
 8005156:	3401      	adds	r4, #1
 8005158:	9305      	str	r3, [sp, #20]
 800515a:	4619      	mov	r1, r3
 800515c:	f04f 0c0a 	mov.w	ip, #10
 8005160:	4620      	mov	r0, r4
 8005162:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005166:	3a30      	subs	r2, #48	@ 0x30
 8005168:	2a09      	cmp	r2, #9
 800516a:	d903      	bls.n	8005174 <_vfiprintf_r+0x1cc>
 800516c:	2b00      	cmp	r3, #0
 800516e:	d0c6      	beq.n	80050fe <_vfiprintf_r+0x156>
 8005170:	9105      	str	r1, [sp, #20]
 8005172:	e7c4      	b.n	80050fe <_vfiprintf_r+0x156>
 8005174:	fb0c 2101 	mla	r1, ip, r1, r2
 8005178:	4604      	mov	r4, r0
 800517a:	2301      	movs	r3, #1
 800517c:	e7f0      	b.n	8005160 <_vfiprintf_r+0x1b8>
 800517e:	ab03      	add	r3, sp, #12
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	462a      	mov	r2, r5
 8005184:	4b12      	ldr	r3, [pc, #72]	@ (80051d0 <_vfiprintf_r+0x228>)
 8005186:	a904      	add	r1, sp, #16
 8005188:	4630      	mov	r0, r6
 800518a:	f3af 8000 	nop.w
 800518e:	4607      	mov	r7, r0
 8005190:	1c78      	adds	r0, r7, #1
 8005192:	d1d6      	bne.n	8005142 <_vfiprintf_r+0x19a>
 8005194:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005196:	07d9      	lsls	r1, r3, #31
 8005198:	d405      	bmi.n	80051a6 <_vfiprintf_r+0x1fe>
 800519a:	89ab      	ldrh	r3, [r5, #12]
 800519c:	059a      	lsls	r2, r3, #22
 800519e:	d402      	bmi.n	80051a6 <_vfiprintf_r+0x1fe>
 80051a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051a2:	f7ff fce3 	bl	8004b6c <__retarget_lock_release_recursive>
 80051a6:	89ab      	ldrh	r3, [r5, #12]
 80051a8:	065b      	lsls	r3, r3, #25
 80051aa:	f53f af1f 	bmi.w	8004fec <_vfiprintf_r+0x44>
 80051ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80051b0:	e71e      	b.n	8004ff0 <_vfiprintf_r+0x48>
 80051b2:	ab03      	add	r3, sp, #12
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	462a      	mov	r2, r5
 80051b8:	4b05      	ldr	r3, [pc, #20]	@ (80051d0 <_vfiprintf_r+0x228>)
 80051ba:	a904      	add	r1, sp, #16
 80051bc:	4630      	mov	r0, r6
 80051be:	f000 f879 	bl	80052b4 <_printf_i>
 80051c2:	e7e4      	b.n	800518e <_vfiprintf_r+0x1e6>
 80051c4:	08005a4a 	.word	0x08005a4a
 80051c8:	08005a54 	.word	0x08005a54
 80051cc:	00000000 	.word	0x00000000
 80051d0:	08004f85 	.word	0x08004f85
 80051d4:	08005a50 	.word	0x08005a50

080051d8 <_printf_common>:
 80051d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051dc:	4616      	mov	r6, r2
 80051de:	4698      	mov	r8, r3
 80051e0:	688a      	ldr	r2, [r1, #8]
 80051e2:	690b      	ldr	r3, [r1, #16]
 80051e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80051e8:	4293      	cmp	r3, r2
 80051ea:	bfb8      	it	lt
 80051ec:	4613      	movlt	r3, r2
 80051ee:	6033      	str	r3, [r6, #0]
 80051f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80051f4:	4607      	mov	r7, r0
 80051f6:	460c      	mov	r4, r1
 80051f8:	b10a      	cbz	r2, 80051fe <_printf_common+0x26>
 80051fa:	3301      	adds	r3, #1
 80051fc:	6033      	str	r3, [r6, #0]
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	0699      	lsls	r1, r3, #26
 8005202:	bf42      	ittt	mi
 8005204:	6833      	ldrmi	r3, [r6, #0]
 8005206:	3302      	addmi	r3, #2
 8005208:	6033      	strmi	r3, [r6, #0]
 800520a:	6825      	ldr	r5, [r4, #0]
 800520c:	f015 0506 	ands.w	r5, r5, #6
 8005210:	d106      	bne.n	8005220 <_printf_common+0x48>
 8005212:	f104 0a19 	add.w	sl, r4, #25
 8005216:	68e3      	ldr	r3, [r4, #12]
 8005218:	6832      	ldr	r2, [r6, #0]
 800521a:	1a9b      	subs	r3, r3, r2
 800521c:	42ab      	cmp	r3, r5
 800521e:	dc26      	bgt.n	800526e <_printf_common+0x96>
 8005220:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005224:	6822      	ldr	r2, [r4, #0]
 8005226:	3b00      	subs	r3, #0
 8005228:	bf18      	it	ne
 800522a:	2301      	movne	r3, #1
 800522c:	0692      	lsls	r2, r2, #26
 800522e:	d42b      	bmi.n	8005288 <_printf_common+0xb0>
 8005230:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005234:	4641      	mov	r1, r8
 8005236:	4638      	mov	r0, r7
 8005238:	47c8      	blx	r9
 800523a:	3001      	adds	r0, #1
 800523c:	d01e      	beq.n	800527c <_printf_common+0xa4>
 800523e:	6823      	ldr	r3, [r4, #0]
 8005240:	6922      	ldr	r2, [r4, #16]
 8005242:	f003 0306 	and.w	r3, r3, #6
 8005246:	2b04      	cmp	r3, #4
 8005248:	bf02      	ittt	eq
 800524a:	68e5      	ldreq	r5, [r4, #12]
 800524c:	6833      	ldreq	r3, [r6, #0]
 800524e:	1aed      	subeq	r5, r5, r3
 8005250:	68a3      	ldr	r3, [r4, #8]
 8005252:	bf0c      	ite	eq
 8005254:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005258:	2500      	movne	r5, #0
 800525a:	4293      	cmp	r3, r2
 800525c:	bfc4      	itt	gt
 800525e:	1a9b      	subgt	r3, r3, r2
 8005260:	18ed      	addgt	r5, r5, r3
 8005262:	2600      	movs	r6, #0
 8005264:	341a      	adds	r4, #26
 8005266:	42b5      	cmp	r5, r6
 8005268:	d11a      	bne.n	80052a0 <_printf_common+0xc8>
 800526a:	2000      	movs	r0, #0
 800526c:	e008      	b.n	8005280 <_printf_common+0xa8>
 800526e:	2301      	movs	r3, #1
 8005270:	4652      	mov	r2, sl
 8005272:	4641      	mov	r1, r8
 8005274:	4638      	mov	r0, r7
 8005276:	47c8      	blx	r9
 8005278:	3001      	adds	r0, #1
 800527a:	d103      	bne.n	8005284 <_printf_common+0xac>
 800527c:	f04f 30ff 	mov.w	r0, #4294967295
 8005280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005284:	3501      	adds	r5, #1
 8005286:	e7c6      	b.n	8005216 <_printf_common+0x3e>
 8005288:	18e1      	adds	r1, r4, r3
 800528a:	1c5a      	adds	r2, r3, #1
 800528c:	2030      	movs	r0, #48	@ 0x30
 800528e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005292:	4422      	add	r2, r4
 8005294:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005298:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800529c:	3302      	adds	r3, #2
 800529e:	e7c7      	b.n	8005230 <_printf_common+0x58>
 80052a0:	2301      	movs	r3, #1
 80052a2:	4622      	mov	r2, r4
 80052a4:	4641      	mov	r1, r8
 80052a6:	4638      	mov	r0, r7
 80052a8:	47c8      	blx	r9
 80052aa:	3001      	adds	r0, #1
 80052ac:	d0e6      	beq.n	800527c <_printf_common+0xa4>
 80052ae:	3601      	adds	r6, #1
 80052b0:	e7d9      	b.n	8005266 <_printf_common+0x8e>
	...

080052b4 <_printf_i>:
 80052b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052b8:	7e0f      	ldrb	r7, [r1, #24]
 80052ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80052bc:	2f78      	cmp	r7, #120	@ 0x78
 80052be:	4691      	mov	r9, r2
 80052c0:	4680      	mov	r8, r0
 80052c2:	460c      	mov	r4, r1
 80052c4:	469a      	mov	sl, r3
 80052c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80052ca:	d807      	bhi.n	80052dc <_printf_i+0x28>
 80052cc:	2f62      	cmp	r7, #98	@ 0x62
 80052ce:	d80a      	bhi.n	80052e6 <_printf_i+0x32>
 80052d0:	2f00      	cmp	r7, #0
 80052d2:	f000 80d2 	beq.w	800547a <_printf_i+0x1c6>
 80052d6:	2f58      	cmp	r7, #88	@ 0x58
 80052d8:	f000 80b9 	beq.w	800544e <_printf_i+0x19a>
 80052dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80052e4:	e03a      	b.n	800535c <_printf_i+0xa8>
 80052e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80052ea:	2b15      	cmp	r3, #21
 80052ec:	d8f6      	bhi.n	80052dc <_printf_i+0x28>
 80052ee:	a101      	add	r1, pc, #4	@ (adr r1, 80052f4 <_printf_i+0x40>)
 80052f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052f4:	0800534d 	.word	0x0800534d
 80052f8:	08005361 	.word	0x08005361
 80052fc:	080052dd 	.word	0x080052dd
 8005300:	080052dd 	.word	0x080052dd
 8005304:	080052dd 	.word	0x080052dd
 8005308:	080052dd 	.word	0x080052dd
 800530c:	08005361 	.word	0x08005361
 8005310:	080052dd 	.word	0x080052dd
 8005314:	080052dd 	.word	0x080052dd
 8005318:	080052dd 	.word	0x080052dd
 800531c:	080052dd 	.word	0x080052dd
 8005320:	08005461 	.word	0x08005461
 8005324:	0800538b 	.word	0x0800538b
 8005328:	0800541b 	.word	0x0800541b
 800532c:	080052dd 	.word	0x080052dd
 8005330:	080052dd 	.word	0x080052dd
 8005334:	08005483 	.word	0x08005483
 8005338:	080052dd 	.word	0x080052dd
 800533c:	0800538b 	.word	0x0800538b
 8005340:	080052dd 	.word	0x080052dd
 8005344:	080052dd 	.word	0x080052dd
 8005348:	08005423 	.word	0x08005423
 800534c:	6833      	ldr	r3, [r6, #0]
 800534e:	1d1a      	adds	r2, r3, #4
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6032      	str	r2, [r6, #0]
 8005354:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005358:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800535c:	2301      	movs	r3, #1
 800535e:	e09d      	b.n	800549c <_printf_i+0x1e8>
 8005360:	6833      	ldr	r3, [r6, #0]
 8005362:	6820      	ldr	r0, [r4, #0]
 8005364:	1d19      	adds	r1, r3, #4
 8005366:	6031      	str	r1, [r6, #0]
 8005368:	0606      	lsls	r6, r0, #24
 800536a:	d501      	bpl.n	8005370 <_printf_i+0xbc>
 800536c:	681d      	ldr	r5, [r3, #0]
 800536e:	e003      	b.n	8005378 <_printf_i+0xc4>
 8005370:	0645      	lsls	r5, r0, #25
 8005372:	d5fb      	bpl.n	800536c <_printf_i+0xb8>
 8005374:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005378:	2d00      	cmp	r5, #0
 800537a:	da03      	bge.n	8005384 <_printf_i+0xd0>
 800537c:	232d      	movs	r3, #45	@ 0x2d
 800537e:	426d      	negs	r5, r5
 8005380:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005384:	4859      	ldr	r0, [pc, #356]	@ (80054ec <_printf_i+0x238>)
 8005386:	230a      	movs	r3, #10
 8005388:	e011      	b.n	80053ae <_printf_i+0xfa>
 800538a:	6821      	ldr	r1, [r4, #0]
 800538c:	6833      	ldr	r3, [r6, #0]
 800538e:	0608      	lsls	r0, r1, #24
 8005390:	f853 5b04 	ldr.w	r5, [r3], #4
 8005394:	d402      	bmi.n	800539c <_printf_i+0xe8>
 8005396:	0649      	lsls	r1, r1, #25
 8005398:	bf48      	it	mi
 800539a:	b2ad      	uxthmi	r5, r5
 800539c:	2f6f      	cmp	r7, #111	@ 0x6f
 800539e:	4853      	ldr	r0, [pc, #332]	@ (80054ec <_printf_i+0x238>)
 80053a0:	6033      	str	r3, [r6, #0]
 80053a2:	bf14      	ite	ne
 80053a4:	230a      	movne	r3, #10
 80053a6:	2308      	moveq	r3, #8
 80053a8:	2100      	movs	r1, #0
 80053aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80053ae:	6866      	ldr	r6, [r4, #4]
 80053b0:	60a6      	str	r6, [r4, #8]
 80053b2:	2e00      	cmp	r6, #0
 80053b4:	bfa2      	ittt	ge
 80053b6:	6821      	ldrge	r1, [r4, #0]
 80053b8:	f021 0104 	bicge.w	r1, r1, #4
 80053bc:	6021      	strge	r1, [r4, #0]
 80053be:	b90d      	cbnz	r5, 80053c4 <_printf_i+0x110>
 80053c0:	2e00      	cmp	r6, #0
 80053c2:	d04b      	beq.n	800545c <_printf_i+0x1a8>
 80053c4:	4616      	mov	r6, r2
 80053c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80053ca:	fb03 5711 	mls	r7, r3, r1, r5
 80053ce:	5dc7      	ldrb	r7, [r0, r7]
 80053d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053d4:	462f      	mov	r7, r5
 80053d6:	42bb      	cmp	r3, r7
 80053d8:	460d      	mov	r5, r1
 80053da:	d9f4      	bls.n	80053c6 <_printf_i+0x112>
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d10b      	bne.n	80053f8 <_printf_i+0x144>
 80053e0:	6823      	ldr	r3, [r4, #0]
 80053e2:	07df      	lsls	r7, r3, #31
 80053e4:	d508      	bpl.n	80053f8 <_printf_i+0x144>
 80053e6:	6923      	ldr	r3, [r4, #16]
 80053e8:	6861      	ldr	r1, [r4, #4]
 80053ea:	4299      	cmp	r1, r3
 80053ec:	bfde      	ittt	le
 80053ee:	2330      	movle	r3, #48	@ 0x30
 80053f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053f8:	1b92      	subs	r2, r2, r6
 80053fa:	6122      	str	r2, [r4, #16]
 80053fc:	f8cd a000 	str.w	sl, [sp]
 8005400:	464b      	mov	r3, r9
 8005402:	aa03      	add	r2, sp, #12
 8005404:	4621      	mov	r1, r4
 8005406:	4640      	mov	r0, r8
 8005408:	f7ff fee6 	bl	80051d8 <_printf_common>
 800540c:	3001      	adds	r0, #1
 800540e:	d14a      	bne.n	80054a6 <_printf_i+0x1f2>
 8005410:	f04f 30ff 	mov.w	r0, #4294967295
 8005414:	b004      	add	sp, #16
 8005416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800541a:	6823      	ldr	r3, [r4, #0]
 800541c:	f043 0320 	orr.w	r3, r3, #32
 8005420:	6023      	str	r3, [r4, #0]
 8005422:	4833      	ldr	r0, [pc, #204]	@ (80054f0 <_printf_i+0x23c>)
 8005424:	2778      	movs	r7, #120	@ 0x78
 8005426:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	6831      	ldr	r1, [r6, #0]
 800542e:	061f      	lsls	r7, r3, #24
 8005430:	f851 5b04 	ldr.w	r5, [r1], #4
 8005434:	d402      	bmi.n	800543c <_printf_i+0x188>
 8005436:	065f      	lsls	r7, r3, #25
 8005438:	bf48      	it	mi
 800543a:	b2ad      	uxthmi	r5, r5
 800543c:	6031      	str	r1, [r6, #0]
 800543e:	07d9      	lsls	r1, r3, #31
 8005440:	bf44      	itt	mi
 8005442:	f043 0320 	orrmi.w	r3, r3, #32
 8005446:	6023      	strmi	r3, [r4, #0]
 8005448:	b11d      	cbz	r5, 8005452 <_printf_i+0x19e>
 800544a:	2310      	movs	r3, #16
 800544c:	e7ac      	b.n	80053a8 <_printf_i+0xf4>
 800544e:	4827      	ldr	r0, [pc, #156]	@ (80054ec <_printf_i+0x238>)
 8005450:	e7e9      	b.n	8005426 <_printf_i+0x172>
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	f023 0320 	bic.w	r3, r3, #32
 8005458:	6023      	str	r3, [r4, #0]
 800545a:	e7f6      	b.n	800544a <_printf_i+0x196>
 800545c:	4616      	mov	r6, r2
 800545e:	e7bd      	b.n	80053dc <_printf_i+0x128>
 8005460:	6833      	ldr	r3, [r6, #0]
 8005462:	6825      	ldr	r5, [r4, #0]
 8005464:	6961      	ldr	r1, [r4, #20]
 8005466:	1d18      	adds	r0, r3, #4
 8005468:	6030      	str	r0, [r6, #0]
 800546a:	062e      	lsls	r6, r5, #24
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	d501      	bpl.n	8005474 <_printf_i+0x1c0>
 8005470:	6019      	str	r1, [r3, #0]
 8005472:	e002      	b.n	800547a <_printf_i+0x1c6>
 8005474:	0668      	lsls	r0, r5, #25
 8005476:	d5fb      	bpl.n	8005470 <_printf_i+0x1bc>
 8005478:	8019      	strh	r1, [r3, #0]
 800547a:	2300      	movs	r3, #0
 800547c:	6123      	str	r3, [r4, #16]
 800547e:	4616      	mov	r6, r2
 8005480:	e7bc      	b.n	80053fc <_printf_i+0x148>
 8005482:	6833      	ldr	r3, [r6, #0]
 8005484:	1d1a      	adds	r2, r3, #4
 8005486:	6032      	str	r2, [r6, #0]
 8005488:	681e      	ldr	r6, [r3, #0]
 800548a:	6862      	ldr	r2, [r4, #4]
 800548c:	2100      	movs	r1, #0
 800548e:	4630      	mov	r0, r6
 8005490:	f7fa fed6 	bl	8000240 <memchr>
 8005494:	b108      	cbz	r0, 800549a <_printf_i+0x1e6>
 8005496:	1b80      	subs	r0, r0, r6
 8005498:	6060      	str	r0, [r4, #4]
 800549a:	6863      	ldr	r3, [r4, #4]
 800549c:	6123      	str	r3, [r4, #16]
 800549e:	2300      	movs	r3, #0
 80054a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054a4:	e7aa      	b.n	80053fc <_printf_i+0x148>
 80054a6:	6923      	ldr	r3, [r4, #16]
 80054a8:	4632      	mov	r2, r6
 80054aa:	4649      	mov	r1, r9
 80054ac:	4640      	mov	r0, r8
 80054ae:	47d0      	blx	sl
 80054b0:	3001      	adds	r0, #1
 80054b2:	d0ad      	beq.n	8005410 <_printf_i+0x15c>
 80054b4:	6823      	ldr	r3, [r4, #0]
 80054b6:	079b      	lsls	r3, r3, #30
 80054b8:	d413      	bmi.n	80054e2 <_printf_i+0x22e>
 80054ba:	68e0      	ldr	r0, [r4, #12]
 80054bc:	9b03      	ldr	r3, [sp, #12]
 80054be:	4298      	cmp	r0, r3
 80054c0:	bfb8      	it	lt
 80054c2:	4618      	movlt	r0, r3
 80054c4:	e7a6      	b.n	8005414 <_printf_i+0x160>
 80054c6:	2301      	movs	r3, #1
 80054c8:	4632      	mov	r2, r6
 80054ca:	4649      	mov	r1, r9
 80054cc:	4640      	mov	r0, r8
 80054ce:	47d0      	blx	sl
 80054d0:	3001      	adds	r0, #1
 80054d2:	d09d      	beq.n	8005410 <_printf_i+0x15c>
 80054d4:	3501      	adds	r5, #1
 80054d6:	68e3      	ldr	r3, [r4, #12]
 80054d8:	9903      	ldr	r1, [sp, #12]
 80054da:	1a5b      	subs	r3, r3, r1
 80054dc:	42ab      	cmp	r3, r5
 80054de:	dcf2      	bgt.n	80054c6 <_printf_i+0x212>
 80054e0:	e7eb      	b.n	80054ba <_printf_i+0x206>
 80054e2:	2500      	movs	r5, #0
 80054e4:	f104 0619 	add.w	r6, r4, #25
 80054e8:	e7f5      	b.n	80054d6 <_printf_i+0x222>
 80054ea:	bf00      	nop
 80054ec:	08005a5b 	.word	0x08005a5b
 80054f0:	08005a6c 	.word	0x08005a6c

080054f4 <__swbuf_r>:
 80054f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f6:	460e      	mov	r6, r1
 80054f8:	4614      	mov	r4, r2
 80054fa:	4605      	mov	r5, r0
 80054fc:	b118      	cbz	r0, 8005506 <__swbuf_r+0x12>
 80054fe:	6a03      	ldr	r3, [r0, #32]
 8005500:	b90b      	cbnz	r3, 8005506 <__swbuf_r+0x12>
 8005502:	f7ff f9d1 	bl	80048a8 <__sinit>
 8005506:	69a3      	ldr	r3, [r4, #24]
 8005508:	60a3      	str	r3, [r4, #8]
 800550a:	89a3      	ldrh	r3, [r4, #12]
 800550c:	071a      	lsls	r2, r3, #28
 800550e:	d501      	bpl.n	8005514 <__swbuf_r+0x20>
 8005510:	6923      	ldr	r3, [r4, #16]
 8005512:	b943      	cbnz	r3, 8005526 <__swbuf_r+0x32>
 8005514:	4621      	mov	r1, r4
 8005516:	4628      	mov	r0, r5
 8005518:	f000 f82a 	bl	8005570 <__swsetup_r>
 800551c:	b118      	cbz	r0, 8005526 <__swbuf_r+0x32>
 800551e:	f04f 37ff 	mov.w	r7, #4294967295
 8005522:	4638      	mov	r0, r7
 8005524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005526:	6823      	ldr	r3, [r4, #0]
 8005528:	6922      	ldr	r2, [r4, #16]
 800552a:	1a98      	subs	r0, r3, r2
 800552c:	6963      	ldr	r3, [r4, #20]
 800552e:	b2f6      	uxtb	r6, r6
 8005530:	4283      	cmp	r3, r0
 8005532:	4637      	mov	r7, r6
 8005534:	dc05      	bgt.n	8005542 <__swbuf_r+0x4e>
 8005536:	4621      	mov	r1, r4
 8005538:	4628      	mov	r0, r5
 800553a:	f7ff fcbb 	bl	8004eb4 <_fflush_r>
 800553e:	2800      	cmp	r0, #0
 8005540:	d1ed      	bne.n	800551e <__swbuf_r+0x2a>
 8005542:	68a3      	ldr	r3, [r4, #8]
 8005544:	3b01      	subs	r3, #1
 8005546:	60a3      	str	r3, [r4, #8]
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	1c5a      	adds	r2, r3, #1
 800554c:	6022      	str	r2, [r4, #0]
 800554e:	701e      	strb	r6, [r3, #0]
 8005550:	6962      	ldr	r2, [r4, #20]
 8005552:	1c43      	adds	r3, r0, #1
 8005554:	429a      	cmp	r2, r3
 8005556:	d004      	beq.n	8005562 <__swbuf_r+0x6e>
 8005558:	89a3      	ldrh	r3, [r4, #12]
 800555a:	07db      	lsls	r3, r3, #31
 800555c:	d5e1      	bpl.n	8005522 <__swbuf_r+0x2e>
 800555e:	2e0a      	cmp	r6, #10
 8005560:	d1df      	bne.n	8005522 <__swbuf_r+0x2e>
 8005562:	4621      	mov	r1, r4
 8005564:	4628      	mov	r0, r5
 8005566:	f7ff fca5 	bl	8004eb4 <_fflush_r>
 800556a:	2800      	cmp	r0, #0
 800556c:	d0d9      	beq.n	8005522 <__swbuf_r+0x2e>
 800556e:	e7d6      	b.n	800551e <__swbuf_r+0x2a>

08005570 <__swsetup_r>:
 8005570:	b538      	push	{r3, r4, r5, lr}
 8005572:	4b29      	ldr	r3, [pc, #164]	@ (8005618 <__swsetup_r+0xa8>)
 8005574:	4605      	mov	r5, r0
 8005576:	6818      	ldr	r0, [r3, #0]
 8005578:	460c      	mov	r4, r1
 800557a:	b118      	cbz	r0, 8005584 <__swsetup_r+0x14>
 800557c:	6a03      	ldr	r3, [r0, #32]
 800557e:	b90b      	cbnz	r3, 8005584 <__swsetup_r+0x14>
 8005580:	f7ff f992 	bl	80048a8 <__sinit>
 8005584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005588:	0719      	lsls	r1, r3, #28
 800558a:	d422      	bmi.n	80055d2 <__swsetup_r+0x62>
 800558c:	06da      	lsls	r2, r3, #27
 800558e:	d407      	bmi.n	80055a0 <__swsetup_r+0x30>
 8005590:	2209      	movs	r2, #9
 8005592:	602a      	str	r2, [r5, #0]
 8005594:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005598:	81a3      	strh	r3, [r4, #12]
 800559a:	f04f 30ff 	mov.w	r0, #4294967295
 800559e:	e033      	b.n	8005608 <__swsetup_r+0x98>
 80055a0:	0758      	lsls	r0, r3, #29
 80055a2:	d512      	bpl.n	80055ca <__swsetup_r+0x5a>
 80055a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80055a6:	b141      	cbz	r1, 80055ba <__swsetup_r+0x4a>
 80055a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80055ac:	4299      	cmp	r1, r3
 80055ae:	d002      	beq.n	80055b6 <__swsetup_r+0x46>
 80055b0:	4628      	mov	r0, r5
 80055b2:	f7ff fafb 	bl	8004bac <_free_r>
 80055b6:	2300      	movs	r3, #0
 80055b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80055ba:	89a3      	ldrh	r3, [r4, #12]
 80055bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80055c0:	81a3      	strh	r3, [r4, #12]
 80055c2:	2300      	movs	r3, #0
 80055c4:	6063      	str	r3, [r4, #4]
 80055c6:	6923      	ldr	r3, [r4, #16]
 80055c8:	6023      	str	r3, [r4, #0]
 80055ca:	89a3      	ldrh	r3, [r4, #12]
 80055cc:	f043 0308 	orr.w	r3, r3, #8
 80055d0:	81a3      	strh	r3, [r4, #12]
 80055d2:	6923      	ldr	r3, [r4, #16]
 80055d4:	b94b      	cbnz	r3, 80055ea <__swsetup_r+0x7a>
 80055d6:	89a3      	ldrh	r3, [r4, #12]
 80055d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80055dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055e0:	d003      	beq.n	80055ea <__swsetup_r+0x7a>
 80055e2:	4621      	mov	r1, r4
 80055e4:	4628      	mov	r0, r5
 80055e6:	f000 f883 	bl	80056f0 <__smakebuf_r>
 80055ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055ee:	f013 0201 	ands.w	r2, r3, #1
 80055f2:	d00a      	beq.n	800560a <__swsetup_r+0x9a>
 80055f4:	2200      	movs	r2, #0
 80055f6:	60a2      	str	r2, [r4, #8]
 80055f8:	6962      	ldr	r2, [r4, #20]
 80055fa:	4252      	negs	r2, r2
 80055fc:	61a2      	str	r2, [r4, #24]
 80055fe:	6922      	ldr	r2, [r4, #16]
 8005600:	b942      	cbnz	r2, 8005614 <__swsetup_r+0xa4>
 8005602:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005606:	d1c5      	bne.n	8005594 <__swsetup_r+0x24>
 8005608:	bd38      	pop	{r3, r4, r5, pc}
 800560a:	0799      	lsls	r1, r3, #30
 800560c:	bf58      	it	pl
 800560e:	6962      	ldrpl	r2, [r4, #20]
 8005610:	60a2      	str	r2, [r4, #8]
 8005612:	e7f4      	b.n	80055fe <__swsetup_r+0x8e>
 8005614:	2000      	movs	r0, #0
 8005616:	e7f7      	b.n	8005608 <__swsetup_r+0x98>
 8005618:	20000020 	.word	0x20000020

0800561c <_raise_r>:
 800561c:	291f      	cmp	r1, #31
 800561e:	b538      	push	{r3, r4, r5, lr}
 8005620:	4605      	mov	r5, r0
 8005622:	460c      	mov	r4, r1
 8005624:	d904      	bls.n	8005630 <_raise_r+0x14>
 8005626:	2316      	movs	r3, #22
 8005628:	6003      	str	r3, [r0, #0]
 800562a:	f04f 30ff 	mov.w	r0, #4294967295
 800562e:	bd38      	pop	{r3, r4, r5, pc}
 8005630:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005632:	b112      	cbz	r2, 800563a <_raise_r+0x1e>
 8005634:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005638:	b94b      	cbnz	r3, 800564e <_raise_r+0x32>
 800563a:	4628      	mov	r0, r5
 800563c:	f000 f830 	bl	80056a0 <_getpid_r>
 8005640:	4622      	mov	r2, r4
 8005642:	4601      	mov	r1, r0
 8005644:	4628      	mov	r0, r5
 8005646:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800564a:	f000 b817 	b.w	800567c <_kill_r>
 800564e:	2b01      	cmp	r3, #1
 8005650:	d00a      	beq.n	8005668 <_raise_r+0x4c>
 8005652:	1c59      	adds	r1, r3, #1
 8005654:	d103      	bne.n	800565e <_raise_r+0x42>
 8005656:	2316      	movs	r3, #22
 8005658:	6003      	str	r3, [r0, #0]
 800565a:	2001      	movs	r0, #1
 800565c:	e7e7      	b.n	800562e <_raise_r+0x12>
 800565e:	2100      	movs	r1, #0
 8005660:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005664:	4620      	mov	r0, r4
 8005666:	4798      	blx	r3
 8005668:	2000      	movs	r0, #0
 800566a:	e7e0      	b.n	800562e <_raise_r+0x12>

0800566c <raise>:
 800566c:	4b02      	ldr	r3, [pc, #8]	@ (8005678 <raise+0xc>)
 800566e:	4601      	mov	r1, r0
 8005670:	6818      	ldr	r0, [r3, #0]
 8005672:	f7ff bfd3 	b.w	800561c <_raise_r>
 8005676:	bf00      	nop
 8005678:	20000020 	.word	0x20000020

0800567c <_kill_r>:
 800567c:	b538      	push	{r3, r4, r5, lr}
 800567e:	4d07      	ldr	r5, [pc, #28]	@ (800569c <_kill_r+0x20>)
 8005680:	2300      	movs	r3, #0
 8005682:	4604      	mov	r4, r0
 8005684:	4608      	mov	r0, r1
 8005686:	4611      	mov	r1, r2
 8005688:	602b      	str	r3, [r5, #0]
 800568a:	f7fb ff7a 	bl	8001582 <_kill>
 800568e:	1c43      	adds	r3, r0, #1
 8005690:	d102      	bne.n	8005698 <_kill_r+0x1c>
 8005692:	682b      	ldr	r3, [r5, #0]
 8005694:	b103      	cbz	r3, 8005698 <_kill_r+0x1c>
 8005696:	6023      	str	r3, [r4, #0]
 8005698:	bd38      	pop	{r3, r4, r5, pc}
 800569a:	bf00      	nop
 800569c:	20000564 	.word	0x20000564

080056a0 <_getpid_r>:
 80056a0:	f7fb bf67 	b.w	8001572 <_getpid>

080056a4 <__swhatbuf_r>:
 80056a4:	b570      	push	{r4, r5, r6, lr}
 80056a6:	460c      	mov	r4, r1
 80056a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056ac:	2900      	cmp	r1, #0
 80056ae:	b096      	sub	sp, #88	@ 0x58
 80056b0:	4615      	mov	r5, r2
 80056b2:	461e      	mov	r6, r3
 80056b4:	da0d      	bge.n	80056d2 <__swhatbuf_r+0x2e>
 80056b6:	89a3      	ldrh	r3, [r4, #12]
 80056b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80056bc:	f04f 0100 	mov.w	r1, #0
 80056c0:	bf14      	ite	ne
 80056c2:	2340      	movne	r3, #64	@ 0x40
 80056c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80056c8:	2000      	movs	r0, #0
 80056ca:	6031      	str	r1, [r6, #0]
 80056cc:	602b      	str	r3, [r5, #0]
 80056ce:	b016      	add	sp, #88	@ 0x58
 80056d0:	bd70      	pop	{r4, r5, r6, pc}
 80056d2:	466a      	mov	r2, sp
 80056d4:	f000 f848 	bl	8005768 <_fstat_r>
 80056d8:	2800      	cmp	r0, #0
 80056da:	dbec      	blt.n	80056b6 <__swhatbuf_r+0x12>
 80056dc:	9901      	ldr	r1, [sp, #4]
 80056de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80056e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80056e6:	4259      	negs	r1, r3
 80056e8:	4159      	adcs	r1, r3
 80056ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056ee:	e7eb      	b.n	80056c8 <__swhatbuf_r+0x24>

080056f0 <__smakebuf_r>:
 80056f0:	898b      	ldrh	r3, [r1, #12]
 80056f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056f4:	079d      	lsls	r5, r3, #30
 80056f6:	4606      	mov	r6, r0
 80056f8:	460c      	mov	r4, r1
 80056fa:	d507      	bpl.n	800570c <__smakebuf_r+0x1c>
 80056fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005700:	6023      	str	r3, [r4, #0]
 8005702:	6123      	str	r3, [r4, #16]
 8005704:	2301      	movs	r3, #1
 8005706:	6163      	str	r3, [r4, #20]
 8005708:	b003      	add	sp, #12
 800570a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800570c:	ab01      	add	r3, sp, #4
 800570e:	466a      	mov	r2, sp
 8005710:	f7ff ffc8 	bl	80056a4 <__swhatbuf_r>
 8005714:	9f00      	ldr	r7, [sp, #0]
 8005716:	4605      	mov	r5, r0
 8005718:	4639      	mov	r1, r7
 800571a:	4630      	mov	r0, r6
 800571c:	f7ff faba 	bl	8004c94 <_malloc_r>
 8005720:	b948      	cbnz	r0, 8005736 <__smakebuf_r+0x46>
 8005722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005726:	059a      	lsls	r2, r3, #22
 8005728:	d4ee      	bmi.n	8005708 <__smakebuf_r+0x18>
 800572a:	f023 0303 	bic.w	r3, r3, #3
 800572e:	f043 0302 	orr.w	r3, r3, #2
 8005732:	81a3      	strh	r3, [r4, #12]
 8005734:	e7e2      	b.n	80056fc <__smakebuf_r+0xc>
 8005736:	89a3      	ldrh	r3, [r4, #12]
 8005738:	6020      	str	r0, [r4, #0]
 800573a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800573e:	81a3      	strh	r3, [r4, #12]
 8005740:	9b01      	ldr	r3, [sp, #4]
 8005742:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005746:	b15b      	cbz	r3, 8005760 <__smakebuf_r+0x70>
 8005748:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800574c:	4630      	mov	r0, r6
 800574e:	f000 f81d 	bl	800578c <_isatty_r>
 8005752:	b128      	cbz	r0, 8005760 <__smakebuf_r+0x70>
 8005754:	89a3      	ldrh	r3, [r4, #12]
 8005756:	f023 0303 	bic.w	r3, r3, #3
 800575a:	f043 0301 	orr.w	r3, r3, #1
 800575e:	81a3      	strh	r3, [r4, #12]
 8005760:	89a3      	ldrh	r3, [r4, #12]
 8005762:	431d      	orrs	r5, r3
 8005764:	81a5      	strh	r5, [r4, #12]
 8005766:	e7cf      	b.n	8005708 <__smakebuf_r+0x18>

08005768 <_fstat_r>:
 8005768:	b538      	push	{r3, r4, r5, lr}
 800576a:	4d07      	ldr	r5, [pc, #28]	@ (8005788 <_fstat_r+0x20>)
 800576c:	2300      	movs	r3, #0
 800576e:	4604      	mov	r4, r0
 8005770:	4608      	mov	r0, r1
 8005772:	4611      	mov	r1, r2
 8005774:	602b      	str	r3, [r5, #0]
 8005776:	f7fb ff64 	bl	8001642 <_fstat>
 800577a:	1c43      	adds	r3, r0, #1
 800577c:	d102      	bne.n	8005784 <_fstat_r+0x1c>
 800577e:	682b      	ldr	r3, [r5, #0]
 8005780:	b103      	cbz	r3, 8005784 <_fstat_r+0x1c>
 8005782:	6023      	str	r3, [r4, #0]
 8005784:	bd38      	pop	{r3, r4, r5, pc}
 8005786:	bf00      	nop
 8005788:	20000564 	.word	0x20000564

0800578c <_isatty_r>:
 800578c:	b538      	push	{r3, r4, r5, lr}
 800578e:	4d06      	ldr	r5, [pc, #24]	@ (80057a8 <_isatty_r+0x1c>)
 8005790:	2300      	movs	r3, #0
 8005792:	4604      	mov	r4, r0
 8005794:	4608      	mov	r0, r1
 8005796:	602b      	str	r3, [r5, #0]
 8005798:	f7fb ff63 	bl	8001662 <_isatty>
 800579c:	1c43      	adds	r3, r0, #1
 800579e:	d102      	bne.n	80057a6 <_isatty_r+0x1a>
 80057a0:	682b      	ldr	r3, [r5, #0]
 80057a2:	b103      	cbz	r3, 80057a6 <_isatty_r+0x1a>
 80057a4:	6023      	str	r3, [r4, #0]
 80057a6:	bd38      	pop	{r3, r4, r5, pc}
 80057a8:	20000564 	.word	0x20000564

080057ac <_init>:
 80057ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ae:	bf00      	nop
 80057b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057b2:	bc08      	pop	{r3}
 80057b4:	469e      	mov	lr, r3
 80057b6:	4770      	bx	lr

080057b8 <_fini>:
 80057b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ba:	bf00      	nop
 80057bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057be:	bc08      	pop	{r3}
 80057c0:	469e      	mov	lr, r3
 80057c2:	4770      	bx	lr
